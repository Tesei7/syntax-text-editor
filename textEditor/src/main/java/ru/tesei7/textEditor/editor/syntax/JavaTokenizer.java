/* The following code was generated by JFlex 1.6.1 */

package ru.tesei7.textEditor.editor.syntax;

import ru.tesei7.textEditor.editor.syntax.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Ilya/git/syntax-text-editor/textEditor/src/main/jflex/java.jflex</tt>
 */
public class JavaTokenizer implements TokenTypes, Tokenizer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;
  public static final int COMMENT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\104\1\105\1\1\16\7\4\0\1\3\1\72"+
    "\1\24\1\0\1\6\1\72\1\74\1\25\1\57\1\60\1\5\1\76"+
    "\1\66\1\23\1\21\1\4\1\10\1\16\1\77\1\15\1\100\1\17"+
    "\1\103\1\101\1\102\1\11\1\73\1\65\1\71\1\67\1\70\1\73"+
    "\1\0\3\14\1\20\1\22\1\20\5\6\1\12\13\6\1\13\2\6"+
    "\1\63\1\26\1\64\1\72\1\6\1\0\1\27\1\30\1\34\1\46"+
    "\1\37\1\50\1\53\1\43\1\44\1\6\1\41\1\36\1\51\1\40"+
    "\1\35\1\52\1\6\1\33\1\31\1\32\1\45\1\54\1\55\1\47"+
    "\1\42\1\56\1\61\1\75\1\62\1\73\6\7\1\106\32\7\2\0"+
    "\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0"+
    "\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6\16\0\5\6\7\0"+
    "\1\6\1\0\1\6\21\0\160\7\5\6\1\0\2\6\2\0\4\6"+
    "\10\0\1\6\1\0\3\6\1\0\1\6\1\0\24\6\1\0\123\6"+
    "\1\0\213\6\1\0\5\7\2\0\236\6\11\0\46\6\2\0\1\6"+
    "\7\0\47\6\7\0\1\6\1\0\55\7\1\0\1\7\1\0\2\7"+
    "\1\0\2\7\1\0\1\7\10\0\33\6\5\0\3\6\15\0\5\7"+
    "\6\0\1\6\4\0\13\7\5\0\53\6\37\7\4\0\2\6\1\7"+
    "\143\6\1\0\1\6\10\7\1\0\6\7\2\6\2\7\1\0\4\7"+
    "\2\6\12\7\3\6\2\0\1\6\17\0\1\7\1\6\1\7\36\6"+
    "\33\7\2\0\131\6\13\7\1\6\16\0\12\7\41\6\11\7\2\6"+
    "\4\0\1\6\5\0\26\6\4\7\1\6\11\7\1\6\3\7\1\6"+
    "\5\7\22\0\31\6\3\7\104\0\1\6\1\0\13\6\67\0\33\7"+
    "\1\0\4\7\66\6\3\7\1\6\22\7\1\6\7\7\12\6\2\7"+
    "\2\0\12\7\1\0\7\6\1\0\7\6\1\0\3\7\1\0\10\6"+
    "\2\0\2\6\2\0\26\6\1\0\7\6\1\0\1\6\3\0\4\6"+
    "\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7\1\6\10\0"+
    "\1\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7\4\6\7\0"+
    "\1\6\5\0\3\7\1\0\6\6\4\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0\1\7\1\0"+
    "\5\7\4\0\2\7\2\0\3\7\3\0\1\7\7\0\4\6\1\0"+
    "\1\6\7\0\14\7\3\6\1\7\13\0\3\7\1\0\11\6\1\0"+
    "\3\6\1\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0"+
    "\1\7\1\6\10\7\1\0\3\7\1\0\3\7\2\0\1\6\17\0"+
    "\2\6\2\7\2\0\12\7\1\0\1\6\17\0\3\7\1\0\10\6"+
    "\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6"+
    "\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7\10\0\2\7"+
    "\4\0\2\6\1\0\3\6\2\7\2\0\12\7\1\0\1\6\20\0"+
    "\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6"+
    "\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0\14\6"+
    "\4\0\5\7\3\0\3\7\1\0\4\7\2\0\1\6\6\0\1\7"+
    "\16\0\12\7\11\0\1\6\7\0\3\7\1\0\10\6\1\0\3\6"+
    "\1\0\27\6\1\0\12\6\1\0\5\6\3\0\1\6\7\7\1\0"+
    "\3\7\1\0\4\7\7\0\2\7\1\0\2\6\6\0\2\6\2\7"+
    "\2\0\12\7\22\0\2\7\1\0\10\6\1\0\3\6\1\0\27\6"+
    "\1\0\12\6\1\0\5\6\2\0\1\7\1\6\7\7\1\0\3\7"+
    "\1\0\4\7\7\0\2\7\7\0\1\6\1\0\2\6\2\7\2\0"+
    "\12\7\1\0\2\6\17\0\2\7\1\0\10\6\1\0\3\6\1\0"+
    "\51\6\2\0\1\6\7\7\1\0\3\7\1\0\4\7\1\6\10\0"+
    "\1\7\10\0\2\6\2\7\2\0\12\7\12\0\6\6\2\0\2\7"+
    "\1\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6"+
    "\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7\22\0\2\7"+
    "\15\0\60\6\1\7\2\6\7\7\4\0\10\6\10\7\1\0\12\7"+
    "\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6"+
    "\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6"+
    "\2\0\2\6\1\0\4\6\1\7\2\6\6\7\1\0\2\7\1\6"+
    "\2\0\5\6\1\0\1\6\1\0\6\7\2\0\12\7\2\0\4\6"+
    "\40\0\1\6\27\0\2\7\6\0\12\7\13\0\1\7\1\0\1\7"+
    "\1\0\1\7\4\0\2\7\10\6\1\0\44\6\4\0\24\7\1\0"+
    "\2\7\5\6\13\7\1\0\44\7\11\0\1\7\71\0\53\6\24\7"+
    "\1\6\12\7\6\0\6\6\4\7\4\6\3\7\1\6\3\7\2\6"+
    "\7\7\3\6\4\7\15\6\14\7\1\6\17\7\2\0\46\6\1\0"+
    "\1\6\5\0\1\6\2\0\53\6\1\0\u014d\6\1\0\4\6\2\0"+
    "\7\6\1\0\1\6\1\0\4\6\2\0\51\6\1\0\4\6\2\0"+
    "\41\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0"+
    "\17\6\1\0\71\6\1\0\4\6\2\0\103\6\2\0\3\7\40\0"+
    "\20\6\20\0\125\6\14\0\u026c\6\2\0\21\6\1\0\32\6\5\0"+
    "\113\6\3\0\3\6\17\0\15\6\1\0\4\6\3\7\13\0\22\6"+
    "\3\7\13\0\22\6\2\7\14\0\15\6\1\0\3\6\1\0\2\7"+
    "\14\0\64\6\40\7\3\0\1\6\3\0\2\6\1\7\2\0\12\7"+
    "\41\0\3\7\2\0\12\7\6\0\130\6\10\0\51\6\1\7\1\6"+
    "\5\0\106\6\12\0\35\6\3\0\14\7\4\0\14\7\12\0\12\7"+
    "\36\6\2\0\5\6\13\0\54\6\4\0\21\7\7\6\2\7\6\0"+
    "\12\7\46\0\27\6\5\7\4\0\65\6\12\7\1\0\35\7\2\0"+
    "\13\7\6\0\12\7\15\0\1\6\130\0\5\7\57\6\21\7\7\6"+
    "\4\0\12\7\21\0\11\7\14\0\3\7\36\6\15\7\2\6\12\7"+
    "\54\6\16\7\14\0\44\6\24\7\10\0\12\7\3\0\3\6\12\7"+
    "\44\6\122\0\3\7\1\0\25\7\4\6\1\7\4\6\3\7\2\6"+
    "\11\0\300\6\47\7\25\0\4\7\u0116\6\2\0\6\6\2\0\46\6"+
    "\2\0\6\6\2\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\37\6\2\0\65\6\1\0\7\6\1\0\1\6\3\0\3\6"+
    "\1\0\7\6\3\0\4\6\2\0\6\6\4\0\15\6\5\0\3\6"+
    "\1\0\7\6\16\0\5\7\30\0\1\104\1\104\5\7\20\0\2\6"+
    "\23\0\1\6\13\0\5\7\5\0\6\7\1\0\1\6\15\0\1\6"+
    "\20\0\15\6\3\0\33\6\25\0\15\7\4\0\1\7\3\0\14\7"+
    "\21\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6\3\0\5\6"+
    "\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0\13\6"+
    "\2\0\4\6\5\0\5\6\4\0\1\6\21\0\51\6\u0a77\0\57\6"+
    "\1\0\57\6\1\0\205\6\6\0\4\6\3\7\2\6\14\0\46\6"+
    "\1\0\1\6\5\0\1\6\2\0\70\6\7\0\1\6\17\0\1\7"+
    "\27\6\11\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\40\7\57\0"+
    "\1\6\u01d5\0\3\6\31\0\11\6\6\7\1\0\5\6\2\0\5\6"+
    "\4\0\126\6\2\0\2\7\2\0\3\6\1\0\132\6\1\0\4\6"+
    "\5\0\51\6\3\0\136\6\21\0\33\6\65\0\20\6\u0200\0\u19b6\6"+
    "\112\0\u51cd\6\63\0\u048d\6\103\0\56\6\2\0\u010d\6\3\0\20\6"+
    "\12\7\2\6\24\0\57\6\1\7\4\0\12\7\1\0\31\6\7\0"+
    "\1\7\120\6\2\7\45\0\11\6\2\0\147\6\2\0\4\6\1\0"+
    "\4\6\14\0\13\6\115\0\12\6\1\7\3\6\1\7\4\6\1\7"+
    "\27\6\5\7\20\0\1\6\7\0\64\6\14\0\2\7\62\6\21\7"+
    "\13\0\12\7\6\0\22\7\6\6\3\0\1\6\4\0\12\7\34\6"+
    "\10\7\2\0\27\6\15\7\14\0\35\6\3\0\4\7\57\6\16\7"+
    "\16\0\1\6\12\7\46\0\51\6\16\7\11\0\3\6\1\7\10\6"+
    "\2\7\2\0\12\7\6\0\27\6\3\0\1\6\1\7\4\0\60\6"+
    "\1\7\1\6\3\7\2\6\2\7\5\6\2\7\1\6\1\7\1\6"+
    "\30\0\3\6\2\0\13\6\5\7\2\0\3\6\2\7\12\0\6\6"+
    "\2\0\6\6\2\0\6\6\11\0\7\6\1\0\7\6\221\0\43\6"+
    "\10\7\1\0\2\7\2\0\12\7\6\0\u2ba4\6\14\0\27\6\4\0"+
    "\61\6\u2104\0\u016e\6\2\0\152\6\46\0\7\6\14\0\5\6\5\0"+
    "\1\6\1\7\12\6\1\0\15\6\1\0\5\6\1\0\1\6\1\0"+
    "\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0"+
    "\66\6\50\0\15\6\3\0\20\7\20\0\7\7\14\0\2\6\30\0"+
    "\3\6\31\0\1\6\6\0\5\6\1\0\207\6\2\0\1\7\4\0"+
    "\1\6\13\0\12\7\7\0\32\6\4\0\1\6\1\0\32\6\13\0"+
    "\131\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6\3\0"+
    "\2\6\3\0\2\6\22\0\3\7\4\0\14\6\1\0\32\6\1\0"+
    "\23\6\1\0\2\6\1\0\17\6\2\0\16\6\42\0\173\6\105\0"+
    "\65\6\210\0\1\7\202\0\35\6\3\0\61\6\57\0\37\6\21\0"+
    "\33\6\65\0\36\6\2\0\44\6\4\0\10\6\1\0\5\6\52\0"+
    "\236\6\2\0\12\7\u0356\0\6\6\2\0\1\6\1\0\54\6\1\0"+
    "\2\6\3\0\1\6\2\0\27\6\252\0\26\6\12\0\32\6\106\0"+
    "\70\6\6\0\2\6\100\0\1\6\3\7\1\0\2\7\5\0\4\7"+
    "\4\6\1\0\3\6\1\0\33\6\4\0\3\7\4\0\1\7\40\0"+
    "\35\6\203\0\66\6\12\0\26\6\12\0\23\6\215\0\111\6\u03b7\0"+
    "\3\7\65\6\17\7\37\0\12\7\20\0\3\7\55\6\13\7\2\0"+
    "\1\7\22\0\31\6\7\0\12\7\6\0\3\7\44\6\16\7\1\0"+
    "\12\7\100\0\3\7\60\6\16\7\4\6\13\0\12\7\u04a6\0\53\6"+
    "\15\7\10\0\12\7\u0936\0\u036f\6\221\0\143\6\u0b9d\0\u042f\6\u33d1\0"+
    "\u0239\6\u04c7\0\105\6\13\0\1\6\56\7\20\0\4\7\15\6\u4060\0"+
    "\2\6\u2163\0\5\7\3\0\26\7\2\0\7\7\36\0\4\7\224\0"+
    "\3\7\u01bb\0\125\6\1\0\107\6\1\0\2\6\2\0\1\6\2\0"+
    "\2\6\2\0\4\6\1\0\14\6\1\0\1\6\1\0\7\6\1\0"+
    "\101\6\1\0\4\6\2\0\10\6\1\0\7\6\1\0\34\6\1\0"+
    "\4\6\1\0\5\6\1\0\1\6\3\0\7\6\1\0\u0154\6\2\0"+
    "\31\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0"+
    "\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0"+
    "\10\6\2\0\62\7\u1600\0\4\6\1\0\33\6\1\0\2\6\1\0"+
    "\1\6\2\0\1\6\1\0\12\6\1\0\4\6\1\0\1\6\1\0"+
    "\1\6\6\0\1\6\4\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\3\6\1\0\2\6\1\0\1\6\2\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\2\6\1\0\1\6\2\0"+
    "\4\6\1\0\7\6\1\0\4\6\1\0\4\6\1\0\1\6\1\0"+
    "\12\6\1\0\21\6\5\0\3\6\1\0\5\6\1\0\21\6\u1144\0"+
    "\ua6d7\6\51\0\u1035\6\13\0\336\6\u3fe2\0\u021e\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\7\36\0\140\7\200\0\360\7\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\2\3\1\4\2\5\1\6\1\3"+
    "\1\7\1\10\20\4\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\6\3\1\21\2\22\1\23\2\1"+
    "\2\24\1\1\5\25\1\26\1\27\1\5\1\30\1\5"+
    "\1\0\3\5\2\30\2\0\27\4\1\31\1\4\1\31"+
    "\13\4\1\3\1\32\2\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\12\32\1\45\2\26"+
    "\4\5\1\30\2\0\27\4\1\31\16\4\1\33\1\0"+
    "\1\46\1\0\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\3\5\1\0\10\4\1\57\17\4\3\5"+
    "\1\0\6\4\1\31\7\4\1\31\2\4\3\5\1\0"+
    "\12\4\3\5\1\0\7\4\3\5\1\0\3\4\3\5"+
    "\1\0\2\4\3\5\2\0\2\5\1\0\2\5\1\0"+
    "\2\5\1\0\2\5\1\0\2\5\1\0\2\5\1\0"+
    "\1\5\1\30\1\0\5\30";

  private static int [] zzUnpackAction() {
    int [] result = new int[311];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u011c\0\u01aa"+
    "\0\u01f1\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u011c\0\u011c"+
    "\0\u039b\0\u03e2\0\u0429\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c"+
    "\0\u05d3\0\u061a\0\u0661\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4"+
    "\0\u011c\0\u011c\0\u011c\0\u011c\0\u011c\0\u011c\0\u011c\0\u011c"+
    "\0\u080b\0\u0852\0\u011c\0\u0899\0\u08e0\0\u0927\0\u096e\0\u09b5"+
    "\0\u011c\0\u011c\0\u09fc\0\u0a43\0\u0a8a\0\u011c\0\u0ad1\0\u0b18"+
    "\0\u0b5f\0\u011c\0\u0ba6\0\u0bed\0\u0c34\0\u011c\0\u0c7b\0\u0cc2"+
    "\0\u011c\0\u0d09\0\u0d50\0\u0d97\0\u0dde\0\u011c\0\u0e25\0\u0e6c"+
    "\0\u0eb3\0\u0efa\0\u0f41\0\u0f88\0\u0fcf\0\u1016\0\u105d\0\u10a4"+
    "\0\u10eb\0\u1132\0\u1179\0\u11c0\0\u1207\0\u124e\0\u1295\0\u12dc"+
    "\0\u1323\0\u136a\0\u13b1\0\u13f8\0\u143f\0\u1486\0\u14cd\0\u1514"+
    "\0\u0238\0\u155b\0\u15a2\0\u15e9\0\u1630\0\u1677\0\u16be\0\u1705"+
    "\0\u174c\0\u1793\0\u17da\0\u1821\0\u1868\0\u18af\0\u18f6\0\u011c"+
    "\0\u193d\0\u1984\0\u011c\0\u011c\0\u011c\0\u011c\0\u011c\0\u011c"+
    "\0\u011c\0\u011c\0\u011c\0\u19cb\0\u1a12\0\u1a59\0\u1aa0\0\u1ae7"+
    "\0\u1b2e\0\u1b75\0\u1bbc\0\u1c03\0\u1c4a\0\u011c\0\u1c91\0\u011c"+
    "\0\u1cd8\0\u1d1f\0\u1d66\0\u1dad\0\u1df4\0\u1e3b\0\u1e82\0\u1ec9"+
    "\0\u1f10\0\u1f57\0\u1f9e\0\u1fe5\0\u202c\0\u2073\0\u20ba\0\u2101"+
    "\0\u2148\0\u218f\0\u21d6\0\u221d\0\u2264\0\u22ab\0\u22f2\0\u2339"+
    "\0\u2380\0\u23c7\0\u240e\0\u2455\0\u249c\0\u24e3\0\u252a\0\u2571"+
    "\0\u25b8\0\u25ff\0\u2646\0\u268d\0\u26d4\0\u271b\0\u2762\0\u27a9"+
    "\0\u27f0\0\u2837\0\u287e\0\u28c5\0\u290c\0\u011c\0\u1a12\0\u011c"+
    "\0\u2953\0\u011c\0\u011c\0\u011c\0\u011c\0\u011c\0\u011c\0\u011c"+
    "\0\u011c\0\u299a\0\u29e1\0\u2a28\0\u2a6f\0\u2ab6\0\u2afd\0\u2b44"+
    "\0\u2b8b\0\u2bd2\0\u2c19\0\u2c60\0\u2ca7\0\u0238\0\u2cee\0\u2d35"+
    "\0\u2d7c\0\u2dc3\0\u2e0a\0\u2e51\0\u2e98\0\u2edf\0\u2f26\0\u2f6d"+
    "\0\u2fb4\0\u2ffb\0\u3042\0\u3089\0\u30d0\0\u3117\0\u315e\0\u31a5"+
    "\0\u31ec\0\u3233\0\u327a\0\u32c1\0\u3308\0\u334f\0\u3396\0\u2264"+
    "\0\u33dd\0\u3424\0\u346b\0\u34b2\0\u34f9\0\u3540\0\u3587\0\u35ce"+
    "\0\u3615\0\u365c\0\u36a3\0\u36ea\0\u3731\0\u3778\0\u37bf\0\u3806"+
    "\0\u384d\0\u3894\0\u38db\0\u3922\0\u3969\0\u39b0\0\u39f7\0\u3a3e"+
    "\0\u3a85\0\u3acc\0\u3b13\0\u3b5a\0\u3ba1\0\u3be8\0\u3c2f\0\u3c76"+
    "\0\u3cbd\0\u3d04\0\u3d4b\0\u3d92\0\u3dd9\0\u3e20\0\u3e67\0\u3eae"+
    "\0\u3ef5\0\u3f3c\0\u3f83\0\u3fca\0\u4011\0\u4058\0\u409f\0\u40e6"+
    "\0\u412d\0\u4174\0\u41bb\0\u4202\0\u4249\0\u4290\0\u42d7\0\u431e"+
    "\0\u4365\0\u43ac\0\u43f3\0\u443a\0\u4481\0\u44c8\0\u450f\0\u4556"+
    "\0\u459d\0\u45e4\0\u462b\0\u4672\0\u46b9\0\u4700\0\u4747\0\u478e"+
    "\0\u478e\0\u47d5\0\u481c\0\u4863\0\u48aa\0\u48f1\0\u4938";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[311];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\2\7\1\10\1\11\1\12\1\5\1\13"+
    "\1\14\3\12\3\14\1\12\1\15\1\12\1\16\1\17"+
    "\1\20\1\5\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\12\1\27\1\30\1\31\3\12\1\32\1\12\1\33"+
    "\1\12\1\34\1\12\1\35\1\36\1\37\1\40\1\12"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\11\1\51\1\52\1\11\1\53\1\54\1\55\1\56"+
    "\5\14\1\5\1\7\1\5\1\57\1\60\1\61\21\57"+
    "\1\62\1\57\1\63\60\57\1\64\1\65\1\66\22\64"+
    "\1\5\1\67\60\64\1\70\1\71\1\72\2\70\1\73"+
    "\20\70\1\74\60\70\111\0\1\7\110\0\1\75\1\76"+
    "\61\0\1\53\106\0\1\53\25\0\13\12\1\0\1\12"+
    "\4\0\30\12\20\0\5\12\2\0\1\12\10\0\1\77"+
    "\1\100\1\101\1\102\1\0\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\13\0\1\101\1\110\6\0\1\106\1\102"+
    "\1\106\26\0\1\103\2\105\1\100\1\105\13\0\2\14"+
    "\1\101\2\0\3\14\1\106\1\107\1\110\13\0\1\101"+
    "\1\110\6\0\1\106\1\0\1\106\26\0\5\14\13\0"+
    "\2\107\3\0\3\107\57\0\5\107\26\0\1\53\43\0"+
    "\1\53\7\0\1\111\15\0\13\12\1\0\1\12\4\0"+
    "\1\12\1\112\26\12\20\0\5\12\2\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\4\12\1\113\1\12\1\114"+
    "\4\12\1\115\14\12\20\0\5\12\2\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\3\12\1\116\7\12\1\117"+
    "\1\120\1\12\1\121\7\12\1\122\1\12\20\0\5\12"+
    "\2\0\1\12\6\0\13\12\1\0\1\12\4\0\4\12"+
    "\1\123\7\12\1\124\13\12\20\0\5\12\2\0\1\12"+
    "\6\0\13\12\1\0\1\12\4\0\10\12\1\125\17\12"+
    "\20\0\5\12\2\0\1\12\6\0\13\12\1\0\1\12"+
    "\4\0\1\126\5\12\1\127\1\130\4\12\1\131\13\12"+
    "\20\0\5\12\2\0\1\12\6\0\13\12\1\0\1\12"+
    "\4\0\6\12\1\132\21\12\20\0\5\12\2\0\1\12"+
    "\6\0\13\12\1\0\1\12\4\0\7\12\1\133\10\12"+
    "\1\134\7\12\20\0\5\12\2\0\1\12\6\0\13\12"+
    "\1\0\1\12\4\0\1\135\7\12\1\136\5\12\1\137"+
    "\11\12\20\0\5\12\2\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\11\12\1\140\7\12\1\141\1\142\5\12"+
    "\20\0\5\12\2\0\1\12\6\0\13\12\1\0\1\12"+
    "\4\0\6\12\1\143\1\12\1\144\17\12\20\0\5\12"+
    "\2\0\1\12\6\0\13\12\1\0\1\12\4\0\1\145"+
    "\5\12\1\146\1\147\5\12\1\150\12\12\20\0\5\12"+
    "\2\0\1\12\6\0\13\12\1\0\1\12\4\0\1\151"+
    "\3\12\1\152\11\12\1\153\11\12\20\0\5\12\2\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\6\12\1\154"+
    "\21\12\20\0\5\12\2\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\6\12\1\155\21\12\20\0\5\12\2\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\14\12\1\156"+
    "\13\12\20\0\5\12\2\0\1\12\67\0\1\53\1\157"+
    "\105\0\1\53\1\0\1\11\104\0\1\53\4\0\1\53"+
    "\101\0\1\53\5\0\1\53\100\0\1\53\6\0\1\53"+
    "\10\0\1\57\2\0\21\57\1\0\1\57\1\0\60\57"+
    "\2\0\1\61\104\0\1\160\2\0\5\160\1\161\4\160"+
    "\2\161\1\162\4\160\1\163\1\164\1\165\1\160\1\166"+
    "\1\160\1\167\1\170\4\160\1\171\7\160\1\172\26\160"+
    "\1\161\2\162\1\160\1\162\30\0\1\173\63\0\1\66"+
    "\104\0\1\160\2\0\5\160\1\174\4\160\2\174\1\175"+
    "\4\160\1\176\1\177\1\200\1\160\1\201\1\160\1\202"+
    "\1\203\4\160\1\204\7\160\1\205\26\160\1\174\2\175"+
    "\1\160\1\175\3\0\1\70\2\0\2\70\1\0\101\70"+
    "\2\0\1\72\110\0\1\206\102\0\1\70\2\0\2\70"+
    "\1\160\101\70\1\75\1\207\1\210\104\75\10\0\1\77"+
    "\1\100\1\101\2\0\1\103\1\104\1\105\1\106\1\107"+
    "\1\110\13\0\1\101\1\110\6\0\1\106\1\0\1\106"+
    "\26\0\1\103\2\105\1\100\1\105\13\0\2\100\3\0"+
    "\3\100\1\106\1\107\1\110\14\0\1\110\6\0\1\106"+
    "\1\0\1\106\26\0\5\100\13\0\1\211\1\212\2\0"+
    "\5\212\1\0\1\212\4\0\2\212\3\0\1\212\2\0"+
    "\1\212\6\0\1\212\1\0\1\212\26\0\5\212\13\0"+
    "\1\213\1\100\1\101\2\0\3\213\1\106\1\107\1\110"+
    "\13\0\1\101\1\110\6\0\1\106\1\0\1\106\26\0"+
    "\3\213\1\100\1\213\13\0\1\105\1\100\1\101\2\0"+
    "\3\105\1\106\1\107\1\110\13\0\1\101\1\110\6\0"+
    "\1\106\1\0\1\106\26\0\3\105\1\100\1\105\13\0"+
    "\1\214\1\100\1\101\2\0\3\214\1\106\1\107\1\110"+
    "\13\0\1\101\1\110\6\0\1\106\1\0\1\106\26\0"+
    "\3\214\1\100\1\214\13\0\2\107\3\0\3\107\1\106"+
    "\1\0\1\110\14\0\1\110\6\0\1\106\1\0\1\106"+
    "\26\0\5\107\13\0\2\215\3\0\3\215\3\0\1\216"+
    "\52\0\1\216\5\215\21\0\1\217\76\0\13\12\1\0"+
    "\1\12\4\0\2\12\1\220\25\12\20\0\5\12\2\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\10\12\1\221"+
    "\17\12\20\0\5\12\2\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\6\12\1\222\21\12\20\0\5\12\2\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\3\12\1\223"+
    "\24\12\20\0\5\12\2\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\1\224\3\12\1\225\23\12\20\0\5\12"+
    "\2\0\1\12\6\0\13\12\1\0\1\12\4\0\11\12"+
    "\1\226\16\12\20\0\5\12\2\0\1\12\6\0\13\12"+
    "\1\0\1\12\4\0\6\12\1\227\21\12\20\0\5\12"+
    "\2\0\1\12\6\0\13\12\1\0\1\12\4\0\23\12"+
    "\1\230\4\12\20\0\5\12\2\0\1\12\6\0\13\12"+
    "\1\0\1\12\4\0\15\12\1\231\12\12\20\0\5\12"+
    "\2\0\1\12\6\0\13\12\1\0\1\12\4\0\1\232"+
    "\12\12\1\141\2\12\1\233\11\12\20\0\5\12\2\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\4\12\1\234"+
    "\10\12\1\235\12\12\20\0\5\12\2\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\3\12\1\236\24\12\20\0"+
    "\5\12\2\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\2\12\1\223\1\237\24\12\20\0\5\12\2\0\1\12"+
    "\6\0\13\12\1\0\1\12\4\0\11\12\1\240\16\12"+
    "\20\0\5\12\2\0\1\12\6\0\13\12\1\0\1\12"+
    "\4\0\1\241\27\12\20\0\5\12\2\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\1\146\27\12\20\0\5\12"+
    "\2\0\1\12\6\0\13\12\1\0\1\12\4\0\11\12"+
    "\1\242\16\12\20\0\5\12\2\0\1\12\6\0\13\12"+
    "\1\0\1\12\4\0\2\12\1\223\25\12\20\0\5\12"+
    "\2\0\1\12\6\0\13\12\1\0\1\12\4\0\3\12"+
    "\1\243\24\12\20\0\5\12\2\0\1\12\6\0\13\12"+
    "\1\0\1\12\4\0\3\12\1\244\24\12\20\0\5\12"+
    "\2\0\1\12\6\0\13\12\1\0\1\12\4\0\26\12"+
    "\1\141\1\12\20\0\5\12\2\0\1\12\6\0\13\12"+
    "\1\0\1\12\4\0\7\12\1\245\20\12\20\0\5\12"+
    "\2\0\1\12\6\0\13\12\1\0\1\12\4\0\2\12"+
    "\1\246\1\247\24\12\20\0\5\12\2\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\23\12\1\250\4\12\20\0"+
    "\5\12\2\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\16\12\1\251\11\12\20\0\5\12\2\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\21\12\1\252\6\12\20\0"+
    "\5\12\2\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\7\12\1\253\20\12\20\0\5\12\2\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\4\12\1\141\23\12\20\0"+
    "\5\12\2\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\6\12\1\254\21\12\20\0\5\12\2\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\11\12\1\255\16\12\20\0"+
    "\5\12\2\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\5\12\1\256\22\12\20\0\5\12\2\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\6\12\1\257\6\12\1\260"+
    "\12\12\20\0\5\12\2\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\1\12\1\261\26\12\20\0\5\12\2\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\3\12\1\262"+
    "\24\12\20\0\5\12\2\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\7\12\1\263\5\12\1\264\12\12\20\0"+
    "\5\12\2\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\15\12\1\265\12\12\20\0\5\12\2\0\1\12\67\0"+
    "\1\53\1\11\26\0\1\162\4\0\3\162\57\0\3\162"+
    "\1\0\1\162\13\0\1\266\4\0\3\266\57\0\3\266"+
    "\1\0\1\266\13\0\1\267\4\0\3\267\5\0\1\270"+
    "\51\0\3\267\1\0\1\267\13\0\1\271\4\0\3\271"+
    "\5\0\1\270\51\0\3\271\1\0\1\271\30\0\1\272"+
    "\106\0\1\273\106\0\1\274\106\0\1\275\106\0\1\276"+
    "\106\0\1\277\106\0\1\300\106\0\1\301\63\0\1\210"+
    "\114\0\1\211\1\212\1\101\1\0\5\212\1\0\1\212"+
    "\4\0\2\212\3\0\1\212\1\0\1\101\1\212\6\0"+
    "\1\212\1\0\1\212\26\0\5\212\13\0\2\302\1\101"+
    "\1\0\5\302\1\0\1\302\4\0\2\302\3\0\1\302"+
    "\1\0\1\101\1\302\6\0\1\302\1\0\1\302\26\0"+
    "\5\302\13\0\1\303\1\100\1\101\2\0\3\303\1\106"+
    "\1\107\1\110\13\0\1\101\1\110\6\0\1\106\1\0"+
    "\1\106\26\0\3\303\1\100\1\303\13\0\1\304\1\100"+
    "\1\101\2\0\3\304\1\106\1\107\1\110\13\0\1\101"+
    "\1\110\6\0\1\106\1\0\1\106\26\0\3\304\1\100"+
    "\1\304\13\0\2\215\3\0\3\215\1\106\25\0\1\106"+
    "\1\0\1\106\26\0\5\215\13\0\2\215\3\0\3\215"+
    "\57\0\5\215\103\0\1\305\14\0\13\12\1\0\1\12"+
    "\4\0\3\12\1\306\24\12\20\0\5\12\2\0\1\12"+
    "\6\0\13\12\1\0\1\12\4\0\1\307\27\12\20\0"+
    "\5\12\2\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\7\12\1\310\20\12\20\0\5\12\2\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\10\12\1\141\17\12\20\0"+
    "\5\12\2\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\3\12\1\311\24\12\20\0\5\12\2\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\15\12\1\312\12\12\20\0"+
    "\5\12\2\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\5\12\1\313\22\12\20\0\5\12\2\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\4\12\1\314\23\12\20\0"+
    "\5\12\2\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\10\12\1\146\17\12\20\0\5\12\2\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\3\12\1\237\24\12\20\0"+
    "\5\12\2\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\11\12\1\315\16\12\20\0\5\12\2\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\10\12\1\316\17\12\20\0"+
    "\5\12\2\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\6\12\1\317\21\12\20\0\5\12\2\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\2\12\1\141\25\12\20\0"+
    "\5\12\2\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\16\12\1\320\11\12\20\0\5\12\2\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\5\12\1\321\22\12\20\0"+
    "\5\12\2\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\2\12\1\314\1\322\24\12\20\0\5\12\2\0\1\12"+
    "\6\0\13\12\1\0\1\12\4\0\2\12\1\235\25\12"+
    "\20\0\5\12\2\0\1\12\6\0\13\12\1\0\1\12"+
    "\4\0\24\12\1\141\3\12\20\0\5\12\2\0\1\12"+
    "\6\0\13\12\1\0\1\12\4\0\10\12\1\323\17\12"+
    "\20\0\5\12\2\0\1\12\6\0\13\12\1\0\1\12"+
    "\4\0\15\12\1\324\12\12\20\0\5\12\2\0\1\12"+
    "\6\0\13\12\1\0\1\12\4\0\7\12\1\141\20\12"+
    "\20\0\5\12\2\0\1\12\6\0\13\12\1\0\1\12"+
    "\4\0\3\12\1\325\24\12\20\0\5\12\2\0\1\12"+
    "\6\0\13\12\1\0\1\12\4\0\10\12\1\326\17\12"+
    "\20\0\5\12\2\0\1\12\6\0\13\12\1\0\1\12"+
    "\4\0\6\12\1\227\1\327\20\12\20\0\5\12\2\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\1\12\1\265"+
    "\26\12\20\0\5\12\2\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\1\330\27\12\20\0\5\12\2\0\1\12"+
    "\6\0\13\12\1\0\1\12\4\0\2\12\1\233\25\12"+
    "\20\0\5\12\2\0\1\12\6\0\13\12\1\0\1\12"+
    "\4\0\1\314\27\12\20\0\5\12\2\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\1\331\27\12\20\0\5\12"+
    "\2\0\1\12\6\0\13\12\1\0\1\12\4\0\12\12"+
    "\1\332\15\12\20\0\5\12\2\0\1\12\6\0\13\12"+
    "\1\0\1\12\4\0\3\12\1\333\24\12\20\0\5\12"+
    "\2\0\1\12\6\0\13\12\1\0\1\12\4\0\25\12"+
    "\1\334\2\12\20\0\5\12\2\0\1\12\6\0\13\12"+
    "\1\0\1\12\4\0\7\12\1\311\20\12\20\0\5\12"+
    "\2\0\1\12\6\0\13\12\1\0\1\12\4\0\6\12"+
    "\1\141\21\12\20\0\5\12\2\0\1\12\6\0\13\12"+
    "\1\0\1\12\4\0\1\335\27\12\20\0\5\12\2\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\17\12\1\141"+
    "\10\12\20\0\5\12\2\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\7\12\1\223\20\12\20\0\5\12\2\0"+
    "\1\12\25\0\1\270\71\0\2\336\1\101\1\0\5\336"+
    "\1\0\1\336\4\0\2\336\3\0\1\336\1\0\1\101"+
    "\1\336\6\0\1\336\1\0\1\336\26\0\5\336\13\0"+
    "\1\337\1\100\1\101\2\0\3\337\1\106\1\107\1\110"+
    "\13\0\1\101\1\110\6\0\1\106\1\0\1\106\26\0"+
    "\3\337\1\100\1\337\13\0\1\340\1\100\1\101\2\0"+
    "\3\340\1\106\1\107\1\110\13\0\1\101\1\110\6\0"+
    "\1\106\1\0\1\106\26\0\3\340\1\100\1\340\104\0"+
    "\1\341\13\0\13\12\1\0\1\12\4\0\4\12\1\342"+
    "\23\12\20\0\5\12\2\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\12\12\1\141\15\12\20\0\5\12\2\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\10\12\1\343"+
    "\17\12\20\0\5\12\2\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\15\12\1\344\12\12\20\0\5\12\2\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\5\12\1\345"+
    "\22\12\20\0\5\12\2\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\14\12\1\346\13\12\20\0\5\12\2\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\3\12\1\141"+
    "\24\12\20\0\5\12\2\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\2\12\1\347\25\12\20\0\5\12\2\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\26\12\1\350"+
    "\1\12\20\0\5\12\2\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\4\12\1\351\23\12\20\0\5\12\2\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\14\12\1\141"+
    "\13\12\20\0\5\12\2\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\15\12\1\352\12\12\20\0\5\12\2\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\11\12\1\353"+
    "\16\12\20\0\5\12\2\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\25\12\1\223\2\12\20\0\5\12\2\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\1\354\27\12"+
    "\20\0\5\12\2\0\1\12\6\0\13\12\1\0\1\12"+
    "\4\0\4\12\1\355\23\12\20\0\5\12\2\0\1\12"+
    "\6\0\13\12\1\0\1\12\4\0\10\12\1\356\17\12"+
    "\20\0\5\12\2\0\1\12\6\0\13\12\1\0\1\12"+
    "\4\0\16\12\1\357\11\12\20\0\5\12\2\0\1\12"+
    "\6\0\13\12\1\0\1\12\4\0\7\12\1\360\20\12"+
    "\20\0\5\12\2\0\1\12\6\0\13\12\1\0\1\12"+
    "\4\0\1\361\27\12\20\0\5\12\2\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\10\12\1\362\17\12\20\0"+
    "\5\12\2\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\1\115\27\12\20\0\5\12\2\0\1\12\6\0\13\12"+
    "\1\0\1\12\4\0\3\12\1\156\24\12\20\0\5\12"+
    "\2\0\1\12\10\0\2\363\1\101\1\0\5\363\1\0"+
    "\1\363\4\0\2\363\3\0\1\363\1\0\1\101\1\363"+
    "\6\0\1\363\1\0\1\363\26\0\5\363\13\0\1\364"+
    "\1\100\1\101\2\0\3\364\1\106\1\107\1\110\13\0"+
    "\1\101\1\110\6\0\1\106\1\0\1\106\26\0\3\364"+
    "\1\100\1\364\13\0\1\365\1\100\1\101\2\0\3\365"+
    "\1\106\1\107\1\110\13\0\1\101\1\110\6\0\1\106"+
    "\1\0\1\106\26\0\3\365\1\100\1\365\103\0\1\366"+
    "\14\0\13\12\1\0\1\12\4\0\1\367\27\12\20\0"+
    "\5\12\2\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\1\351\27\12\20\0\5\12\2\0\1\12\6\0\13\12"+
    "\1\0\1\12\4\0\5\12\1\141\22\12\20\0\5\12"+
    "\2\0\1\12\6\0\13\12\1\0\1\12\4\0\3\12"+
    "\1\370\24\12\20\0\5\12\2\0\1\12\6\0\13\12"+
    "\1\0\1\12\4\0\4\12\1\371\23\12\20\0\5\12"+
    "\2\0\1\12\6\0\13\12\1\0\1\12\4\0\15\12"+
    "\1\372\12\12\20\0\5\12\2\0\1\12\6\0\13\12"+
    "\1\0\1\12\4\0\11\12\1\141\16\12\20\0\5\12"+
    "\2\0\1\12\6\0\13\12\1\0\1\12\4\0\11\12"+
    "\1\373\16\12\20\0\5\12\2\0\1\12\6\0\13\12"+
    "\1\0\1\12\4\0\17\12\1\235\10\12\20\0\5\12"+
    "\2\0\1\12\6\0\13\12\1\0\1\12\4\0\11\12"+
    "\1\374\16\12\20\0\5\12\2\0\1\12\6\0\13\12"+
    "\1\0\1\12\4\0\21\12\1\375\6\12\20\0\5\12"+
    "\2\0\1\12\6\0\13\12\1\0\1\12\4\0\22\12"+
    "\1\376\5\12\20\0\5\12\2\0\1\12\6\0\13\12"+
    "\1\0\1\12\4\0\7\12\1\314\20\12\20\0\5\12"+
    "\2\0\1\12\6\0\13\12\1\0\1\12\4\0\7\12"+
    "\1\377\20\12\20\0\5\12\2\0\1\12\6\0\13\12"+
    "\1\0\1\12\4\0\24\12\1\223\3\12\20\0\5\12"+
    "\2\0\1\12\6\0\13\12\1\0\1\12\4\0\5\12"+
    "\1\u0100\22\12\20\0\5\12\2\0\1\12\10\0\2\u0101"+
    "\1\101\1\0\5\u0101\1\0\1\u0101\4\0\2\u0101\3\0"+
    "\1\u0101\1\0\1\101\1\u0101\6\0\1\u0101\1\0\1\u0101"+
    "\26\0\5\u0101\13\0\1\u0102\1\100\1\101\2\0\3\u0102"+
    "\1\106\1\107\1\110\13\0\1\101\1\110\6\0\1\106"+
    "\1\0\1\106\26\0\3\u0102\1\100\1\u0102\13\0\1\u0103"+
    "\1\100\1\101\2\0\3\u0103\1\106\1\107\1\110\13\0"+
    "\1\101\1\110\6\0\1\106\1\0\1\106\26\0\3\u0103"+
    "\1\100\1\u0103\105\0\1\u0104\12\0\13\12\1\0\1\12"+
    "\4\0\5\12\1\314\22\12\20\0\5\12\2\0\1\12"+
    "\6\0\13\12\1\0\1\12\4\0\21\12\1\u0105\6\12"+
    "\20\0\5\12\2\0\1\12\6\0\13\12\1\0\1\12"+
    "\4\0\6\12\1\u0106\21\12\20\0\5\12\2\0\1\12"+
    "\6\0\13\12\1\0\1\12\4\0\10\12\1\u0107\17\12"+
    "\20\0\5\12\2\0\1\12\6\0\13\12\1\0\1\12"+
    "\4\0\16\12\1\223\11\12\20\0\5\12\2\0\1\12"+
    "\6\0\13\12\1\0\1\12\4\0\5\12\1\u0108\22\12"+
    "\20\0\5\12\2\0\1\12\6\0\13\12\1\0\1\12"+
    "\4\0\1\u0109\27\12\20\0\5\12\2\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\10\12\1\u010a\17\12\20\0"+
    "\5\12\2\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\13\12\1\141\14\12\20\0\5\12\2\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\3\12\1\u010b\24\12\20\0"+
    "\5\12\2\0\1\12\10\0\2\u010c\1\101\1\0\5\u010c"+
    "\1\0\1\u010c\4\0\2\u010c\3\0\1\u010c\1\0\1\101"+
    "\1\u010c\6\0\1\u010c\1\0\1\u010c\26\0\5\u010c\13\0"+
    "\1\u010d\1\100\1\101\2\0\3\u010d\1\106\1\107\1\110"+
    "\13\0\1\101\1\110\6\0\1\106\1\0\1\106\26\0"+
    "\3\u010d\1\100\1\u010d\13\0\1\u010e\1\100\1\101\2\0"+
    "\3\u010e\1\106\1\107\1\110\13\0\1\101\1\110\6\0"+
    "\1\106\1\0\1\106\26\0\3\u010e\1\100\1\u010e\20\0"+
    "\1\u010f\77\0\13\12\1\0\1\12\4\0\23\12\1\141"+
    "\4\12\20\0\5\12\2\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\11\12\1\u0110\16\12\20\0\5\12\2\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\11\12\1\314"+
    "\16\12\20\0\5\12\2\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\10\12\1\u0111\17\12\20\0\5\12\2\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\5\12\1\223"+
    "\22\12\20\0\5\12\2\0\1\12\6\0\13\12\1\0"+
    "\1\12\4\0\11\12\1\u0112\16\12\20\0\5\12\2\0"+
    "\1\12\6\0\13\12\1\0\1\12\4\0\10\12\1\264"+
    "\17\12\20\0\5\12\2\0\1\12\10\0\2\u0113\1\101"+
    "\1\0\5\u0113\1\0\1\u0113\4\0\2\u0113\3\0\1\u0113"+
    "\1\0\1\101\1\u0113\6\0\1\u0113\1\0\1\u0113\26\0"+
    "\5\u0113\13\0\1\u0114\1\100\1\101\2\0\3\u0114\1\106"+
    "\1\107\1\110\13\0\1\101\1\110\6\0\1\106\1\0"+
    "\1\106\26\0\3\u0114\1\100\1\u0114\13\0\1\u0115\1\100"+
    "\1\101\2\0\3\u0115\1\106\1\107\1\110\13\0\1\101"+
    "\1\110\6\0\1\106\1\0\1\106\26\0\3\u0115\1\100"+
    "\1\u0115\106\0\1\u0116\11\0\13\12\1\0\1\12\4\0"+
    "\15\12\1\u0117\12\12\20\0\5\12\2\0\1\12\6\0"+
    "\13\12\1\0\1\12\4\0\6\12\1\u0118\21\12\20\0"+
    "\5\12\2\0\1\12\6\0\13\12\1\0\1\12\4\0"+
    "\3\12\1\235\24\12\20\0\5\12\2\0\1\12\10\0"+
    "\2\u0119\1\101\1\0\5\u0119\1\0\1\u0119\4\0\2\u0119"+
    "\3\0\1\u0119\1\0\1\101\1\u0119\6\0\1\u0119\1\0"+
    "\1\u0119\26\0\5\u0119\13\0\1\u011a\1\100\1\101\2\0"+
    "\3\u011a\1\106\1\107\1\110\13\0\1\101\1\110\6\0"+
    "\1\106\1\0\1\106\26\0\3\u011a\1\100\1\u011a\13\0"+
    "\1\u011b\1\100\1\101\2\0\3\u011b\1\106\1\107\1\110"+
    "\13\0\1\101\1\110\6\0\1\106\1\0\1\106\26\0"+
    "\3\u011b\1\100\1\u011b\103\0\1\u011c\14\0\13\12\1\0"+
    "\1\12\4\0\27\12\1\u010b\20\0\5\12\2\0\1\12"+
    "\6\0\13\12\1\0\1\12\4\0\21\12\1\141\6\12"+
    "\20\0\5\12\2\0\1\12\10\0\2\u011d\1\101\1\0"+
    "\5\u011d\1\0\1\u011d\4\0\2\u011d\3\0\1\u011d\1\0"+
    "\1\101\1\u011d\6\0\1\u011d\1\0\1\u011d\26\0\5\u011d"+
    "\13\0\1\u011e\1\100\1\101\2\0\3\u011e\1\106\1\107"+
    "\1\110\13\0\1\101\1\110\6\0\1\106\1\0\1\106"+
    "\26\0\3\u011e\1\100\1\u011e\13\0\1\u011f\1\100\1\101"+
    "\2\0\3\u011f\1\106\1\107\1\110\13\0\1\101\1\110"+
    "\6\0\1\106\1\0\1\106\26\0\3\u011f\1\100\1\u011f"+
    "\105\0\1\101\14\0\2\u0120\1\101\1\0\5\u0120\1\0"+
    "\1\u0120\4\0\2\u0120\3\0\1\u0120\1\0\1\101\1\u0120"+
    "\6\0\1\u0120\1\0\1\u0120\26\0\5\u0120\13\0\1\u0121"+
    "\1\100\1\101\2\0\3\u0121\1\106\1\107\1\110\13\0"+
    "\1\101\1\110\6\0\1\106\1\0\1\106\26\0\3\u0121"+
    "\1\100\1\u0121\13\0\1\u0122\1\100\1\101\2\0\3\u0122"+
    "\1\106\1\107\1\110\13\0\1\101\1\110\6\0\1\106"+
    "\1\0\1\106\26\0\3\u0122\1\100\1\u0122\13\0\2\u0123"+
    "\1\101\1\0\5\u0123\1\0\1\u0123\4\0\2\u0123\3\0"+
    "\1\u0123\1\0\1\101\1\u0123\6\0\1\u0123\1\0\1\u0123"+
    "\26\0\5\u0123\13\0\1\u0124\1\100\1\101\2\0\3\u0124"+
    "\1\106\1\107\1\110\13\0\1\101\1\110\6\0\1\106"+
    "\1\0\1\106\26\0\3\u0124\1\100\1\u0124\13\0\1\u0125"+
    "\1\100\1\101\2\0\3\u0125\1\106\1\107\1\110\13\0"+
    "\1\101\1\110\6\0\1\106\1\0\1\106\26\0\3\u0125"+
    "\1\100\1\u0125\13\0\2\u0126\1\101\1\0\5\u0126\1\0"+
    "\1\u0126\4\0\2\u0126\3\0\1\u0126\1\0\1\101\1\u0126"+
    "\6\0\1\u0126\1\0\1\u0126\26\0\5\u0126\13\0\1\u0127"+
    "\1\100\1\101\2\0\3\u0127\1\106\1\107\1\110\13\0"+
    "\1\101\1\110\6\0\1\106\1\0\1\106\26\0\3\u0127"+
    "\1\100\1\u0127\13\0\1\u0128\1\100\1\101\2\0\3\u0128"+
    "\1\106\1\107\1\110\13\0\1\101\1\110\6\0\1\106"+
    "\1\0\1\106\26\0\3\u0128\1\100\1\u0128\13\0\2\u0129"+
    "\1\101\1\0\5\u0129\1\0\1\u0129\4\0\2\u0129\3\0"+
    "\1\u0129\1\0\1\101\1\u0129\6\0\1\u0129\1\0\1\u0129"+
    "\26\0\5\u0129\13\0\1\u012a\1\100\1\101\2\0\3\u012a"+
    "\1\106\1\107\1\110\13\0\1\101\1\110\6\0\1\106"+
    "\1\0\1\106\26\0\3\u012a\1\100\1\u012a\13\0\1\u012b"+
    "\1\100\1\101\2\0\3\u012b\1\106\1\107\1\110\13\0"+
    "\1\101\1\110\6\0\1\106\1\0\1\106\26\0\3\u012b"+
    "\1\100\1\u012b\13\0\2\u012c\1\101\1\0\5\u012c\1\0"+
    "\1\u012c\4\0\2\u012c\3\0\1\u012c\1\0\1\101\1\u012c"+
    "\6\0\1\u012c\1\0\1\u012c\26\0\5\u012c\13\0\1\u012d"+
    "\1\100\1\101\2\0\3\u012d\1\106\1\107\1\110\13\0"+
    "\1\101\1\110\6\0\1\106\1\0\1\106\26\0\3\u012d"+
    "\1\100\1\u012d\13\0\1\u012e\1\100\1\101\2\0\3\u012e"+
    "\1\106\1\107\1\110\13\0\1\101\1\110\6\0\1\106"+
    "\1\0\1\106\26\0\3\u012e\1\100\1\u012e\13\0\2\u012f"+
    "\1\101\1\0\5\u012f\1\0\1\u012f\4\0\2\u012f\3\0"+
    "\1\u012f\1\0\1\101\1\u012f\6\0\1\u012f\1\0\1\u012f"+
    "\26\0\5\u012f\13\0\1\u0130\1\100\1\101\2\0\3\u0130"+
    "\1\106\1\107\1\110\13\0\1\101\1\110\6\0\1\106"+
    "\1\0\1\106\26\0\3\u0130\1\100\1\u0130\13\0\1\u0131"+
    "\1\100\1\101\2\0\3\u0131\1\106\1\107\1\110\13\0"+
    "\1\101\1\110\6\0\1\106\1\0\1\106\26\0\3\u0131"+
    "\1\100\1\u0131\13\0\2\u0132\1\101\1\0\5\u0132\1\0"+
    "\1\u0132\4\0\2\u0132\3\0\1\u0132\1\0\1\101\1\u0132"+
    "\6\0\1\u0132\1\0\1\u0132\26\0\5\u0132\13\0\1\u0133"+
    "\1\100\1\101\2\0\3\u0133\1\106\1\107\1\110\13\0"+
    "\1\101\1\110\6\0\1\106\1\0\1\106\26\0\3\u0133"+
    "\1\100\1\u0133\15\0\1\101\23\0\1\101\60\0\1\u0134"+
    "\1\100\1\101\2\0\3\u0134\1\106\1\107\1\110\13\0"+
    "\1\101\1\110\6\0\1\106\1\0\1\106\26\0\3\u0134"+
    "\1\100\1\u0134\13\0\1\u0135\1\100\1\101\2\0\3\u0135"+
    "\1\106\1\107\1\110\13\0\1\101\1\110\6\0\1\106"+
    "\1\0\1\106\26\0\3\u0135\1\100\1\u0135\13\0\1\u0136"+
    "\1\100\1\101\2\0\3\u0136\1\106\1\107\1\110\13\0"+
    "\1\101\1\110\6\0\1\106\1\0\1\106\26\0\3\u0136"+
    "\1\100\1\u0136\13\0\1\u0137\1\100\1\101\2\0\3\u0137"+
    "\1\106\1\107\1\110\13\0\1\101\1\110\6\0\1\106"+
    "\1\0\1\106\26\0\3\u0137\1\100\1\u0137\13\0\2\100"+
    "\1\101\2\0\3\100\1\106\1\107\1\110\13\0\1\101"+
    "\1\110\6\0\1\106\1\0\1\106\26\0\5\100\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18815];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\1\11\7\1\2\11\20\1\10\11"+
    "\2\1\1\11\5\1\2\11\3\1\1\11\3\1\1\11"+
    "\3\1\1\11\2\1\1\11\1\0\3\1\1\11\1\1"+
    "\2\0\46\1\1\11\2\1\11\11\12\1\1\11\1\1"+
    "\1\11\5\1\2\0\46\1\1\11\1\0\1\11\1\0"+
    "\10\11\3\1\1\0\33\1\1\0\24\1\1\0\15\1"+
    "\1\0\12\1\1\0\6\1\1\0\5\1\2\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[311];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	StringBuilder string = new StringBuilder();

	public JavaToken symbol(int type) {
		return new JavaToken(type, yytext());
	}
	
	public JavaToken symbol(int type, char c) {
		return new JavaToken(type, c);
	}
	
	public JavaToken symbol(int type, String s) {
		return new JavaToken(type, s);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaTokenizer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2894) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public JavaToken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return symbol(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
            }
          case 48: break;
          case 2: 
            { return symbol(WHITESPACE);
            }
          case 49: break;
          case 3: 
            { return symbol(OPERATOR);
            }
          case 50: break;
          case 4: 
            { return symbol(IDENTIFIER);
            }
          case 51: break;
          case 5: 
            { return symbol(INTEGER_LITERAL);
            }
          case 52: break;
          case 6: 
            { return symbol(DOT);
            }
          case 53: break;
          case 7: 
            { yybegin(STRING); string.setLength(0);
            }
          case 54: break;
          case 8: 
            { yybegin(CHARLITERAL);
            }
          case 55: break;
          case 9: 
            { return symbol(LPAREN);
            }
          case 56: break;
          case 10: 
            { return symbol(RPAREN);
            }
          case 57: break;
          case 11: 
            { return symbol(LBRACE);
            }
          case 58: break;
          case 12: 
            { return symbol(RBRACE);
            }
          case 59: break;
          case 13: 
            { return symbol(LBRACK);
            }
          case 60: break;
          case 14: 
            { return symbol(RBRACK);
            }
          case 61: break;
          case 15: 
            { return symbol(SEMICOLON);
            }
          case 62: break;
          case 16: 
            { return symbol(COMMA);
            }
          case 63: break;
          case 17: 
            { string.append( yytext() );
            }
          case 64: break;
          case 18: 
            { throw new RuntimeException("Unterminated string at end of line");
            }
          case 65: break;
          case 19: 
            { yybegin(YYINITIAL); return symbol(STRING_LITERAL, string.toString());
            }
          case 66: break;
          case 20: 
            { throw new RuntimeException("Unterminated character literal at end of line");
            }
          case 67: break;
          case 21: 
            { return symbol(COMMENT_MULTI);
            }
          case 68: break;
          case 22: 
            { return symbol(COMMENT_EOL);
            }
          case 69: break;
          case 23: 
            { yybegin(COMMENT); string.setLength(0); return symbol(COMMENT_MULTI);
            }
          case 70: break;
          case 24: 
            { return symbol(FLOATING_POINT_LITERAL);
            }
          case 71: break;
          case 25: 
            { return symbol(KEYWORD);
            }
          case 72: break;
          case 26: 
            { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
            }
          case 73: break;
          case 27: 
            { char val = (char) Integer.parseInt(yytext().substring(1),8);
                        				   string.append( val );
            }
          case 74: break;
          case 28: 
            { string.append( '\"' );
            }
          case 75: break;
          case 29: 
            { string.append( '\'' );
            }
          case 76: break;
          case 30: 
            { string.append( '\\' );
            }
          case 77: break;
          case 31: 
            { string.append( '\b' );
            }
          case 78: break;
          case 32: 
            { string.append( '\t' );
            }
          case 79: break;
          case 33: 
            { string.append( '\r' );
            }
          case 80: break;
          case 34: 
            { string.append( '\n' );
            }
          case 81: break;
          case 35: 
            { string.append( '\f' );
            }
          case 82: break;
          case 36: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, yytext().charAt(0));
            }
          case 83: break;
          case 37: 
            { yybegin(YYINITIAL); return symbol(COMMENT_MULTI);
            }
          case 84: break;
          case 38: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL);
            }
          case 85: break;
          case 39: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\"');
            }
          case 86: break;
          case 40: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\'');
            }
          case 87: break;
          case 41: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\\');
            }
          case 88: break;
          case 42: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\b');
            }
          case 89: break;
          case 43: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\t');
            }
          case 90: break;
          case 44: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\r');
            }
          case 91: break;
          case 45: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\n');
            }
          case 92: break;
          case 46: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\f');
            }
          case 93: break;
          case 47: 
            { return symbol(BOOLEAN_LITERAL);
            }
          case 94: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
