/* The following code was generated by JFlex 1.6.1 */

package ru.tesei7.textEditor.editor.syntax;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Ilya/git/syntax-text-editor/textEditor/src/main/jflex/ru/tesei7/textEditor/editor/syntax/java.jflex</tt>
 */
public class JavaTokenizer implements TokenTypes, Tokenizer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;
  public static final int COMMENT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\73"+
    "\1\26\1\0\1\6\1\73\1\75\1\27\1\60\1\61\1\5\1\77"+
    "\1\67\1\25\1\23\1\4\1\11\1\17\2\16\4\20\2\12\1\74"+
    "\1\66\1\72\1\70\1\71\1\74\1\10\1\15\1\21\1\15\1\22"+
    "\1\24\1\22\5\6\1\13\13\6\1\14\2\6\1\64\1\100\1\65"+
    "\1\73\1\6\1\0\1\30\1\31\1\35\1\47\1\40\1\51\1\54"+
    "\1\44\1\45\1\6\1\42\1\37\1\52\1\41\1\36\1\53\1\6"+
    "\1\34\1\32\1\33\1\46\1\55\1\56\1\50\1\43\1\57\1\62"+
    "\1\76\1\63\1\74\6\7\1\7\32\7\2\0\4\6\4\0\1\6"+
    "\2\0\1\7\7\0\1\6\4\0\1\6\5\0\27\6\1\0\37\6"+
    "\1\0\u01ca\6\4\0\14\6\16\0\5\6\7\0\1\6\1\0\1\6"+
    "\21\0\160\7\5\6\1\0\2\6\2\0\4\6\10\0\1\6\1\0"+
    "\3\6\1\0\1\6\1\0\24\6\1\0\123\6\1\0\213\6\1\0"+
    "\5\7\2\0\236\6\11\0\46\6\2\0\1\6\7\0\47\6\7\0"+
    "\1\6\1\0\55\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0"+
    "\1\7\10\0\33\6\5\0\3\6\15\0\5\7\6\0\1\6\4\0"+
    "\13\7\5\0\53\6\37\7\4\0\2\6\1\7\143\6\1\0\1\6"+
    "\10\7\1\0\6\7\2\6\2\7\1\0\4\7\2\6\12\7\3\6"+
    "\2\0\1\6\17\0\1\7\1\6\1\7\36\6\33\7\2\0\131\6"+
    "\13\7\1\6\16\0\12\7\41\6\11\7\2\6\4\0\1\6\5\0"+
    "\26\6\4\7\1\6\11\7\1\6\3\7\1\6\5\7\22\0\31\6"+
    "\3\7\104\0\1\6\1\0\13\6\67\0\33\7\1\0\4\7\66\6"+
    "\3\7\1\6\22\7\1\6\7\7\12\6\2\7\2\0\12\7\1\0"+
    "\7\6\1\0\7\6\1\0\3\7\1\0\10\6\2\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6"+
    "\7\7\2\0\2\7\2\0\3\7\1\6\10\0\1\7\4\0\2\6"+
    "\1\0\3\6\2\7\2\0\12\7\4\6\7\0\1\6\5\0\3\7"+
    "\1\0\6\6\4\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0\2\7"+
    "\2\0\3\7\3\0\1\7\7\0\4\6\1\0\1\6\7\0\14\7"+
    "\3\6\1\7\13\0\3\7\1\0\11\6\1\0\3\6\1\0\26\6"+
    "\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6\10\7"+
    "\1\0\3\7\1\0\3\7\2\0\1\6\17\0\2\6\2\7\2\0"+
    "\12\7\1\0\1\6\17\0\3\7\1\0\10\6\2\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6"+
    "\7\7\2\0\2\7\2\0\3\7\10\0\2\7\4\0\2\6\1\0"+
    "\3\6\2\7\2\0\12\7\1\0\1\6\20\0\1\7\1\6\1\0"+
    "\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0"+
    "\2\6\3\0\2\6\3\0\3\6\3\0\14\6\4\0\5\7\3\0"+
    "\3\7\1\0\4\7\2\0\1\6\6\0\1\7\16\0\12\7\11\0"+
    "\1\6\7\0\3\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0"+
    "\12\6\1\0\5\6\3\0\1\6\7\7\1\0\3\7\1\0\4\7"+
    "\7\0\2\7\1\0\2\6\6\0\2\6\2\7\2\0\12\7\22\0"+
    "\2\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0"+
    "\5\6\2\0\1\7\1\6\7\7\1\0\3\7\1\0\4\7\7\0"+
    "\2\7\7\0\1\6\1\0\2\6\2\7\2\0\12\7\1\0\2\6"+
    "\17\0\2\7\1\0\10\6\1\0\3\6\1\0\51\6\2\0\1\6"+
    "\7\7\1\0\3\7\1\0\4\7\1\6\10\0\1\7\10\0\2\6"+
    "\2\7\2\0\12\7\12\0\6\6\2\0\2\7\1\0\22\6\3\0"+
    "\30\6\1\0\11\6\1\0\1\6\2\0\7\6\3\0\1\7\4\0"+
    "\6\7\1\0\1\7\1\0\10\7\22\0\2\7\15\0\60\6\1\7"+
    "\2\6\7\7\4\0\10\6\10\7\1\0\12\7\47\0\2\6\1\0"+
    "\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0"+
    "\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0"+
    "\4\6\1\7\2\6\6\7\1\0\2\7\1\6\2\0\5\6\1\0"+
    "\1\6\1\0\6\7\2\0\12\7\2\0\4\6\40\0\1\6\27\0"+
    "\2\7\6\0\12\7\13\0\1\7\1\0\1\7\1\0\1\7\4\0"+
    "\2\7\10\6\1\0\44\6\4\0\24\7\1\0\2\7\5\6\13\7"+
    "\1\0\44\7\11\0\1\7\71\0\53\6\24\7\1\6\12\7\6\0"+
    "\6\6\4\7\4\6\3\7\1\6\3\7\2\6\7\7\3\6\4\7"+
    "\15\6\14\7\1\6\17\7\2\0\46\6\1\0\1\6\5\0\1\6"+
    "\2\0\53\6\1\0\u014d\6\1\0\4\6\2\0\7\6\1\0\1\6"+
    "\1\0\4\6\2\0\51\6\1\0\4\6\2\0\41\6\1\0\4\6"+
    "\2\0\7\6\1\0\1\6\1\0\4\6\2\0\17\6\1\0\71\6"+
    "\1\0\4\6\2\0\103\6\2\0\3\7\40\0\20\6\20\0\125\6"+
    "\14\0\u026c\6\2\0\21\6\1\0\32\6\5\0\113\6\3\0\3\6"+
    "\17\0\15\6\1\0\4\6\3\7\13\0\22\6\3\7\13\0\22\6"+
    "\2\7\14\0\15\6\1\0\3\6\1\0\2\7\14\0\64\6\40\7"+
    "\3\0\1\6\3\0\2\6\1\7\2\0\12\7\41\0\3\7\2\0"+
    "\12\7\6\0\130\6\10\0\51\6\1\7\1\6\5\0\106\6\12\0"+
    "\35\6\3\0\14\7\4\0\14\7\12\0\12\7\36\6\2\0\5\6"+
    "\13\0\54\6\4\0\21\7\7\6\2\7\6\0\12\7\46\0\27\6"+
    "\5\7\4\0\65\6\12\7\1\0\35\7\2\0\13\7\6\0\12\7"+
    "\15\0\1\6\130\0\5\7\57\6\21\7\7\6\4\0\12\7\21\0"+
    "\11\7\14\0\3\7\36\6\15\7\2\6\12\7\54\6\16\7\14\0"+
    "\44\6\24\7\10\0\12\7\3\0\3\6\12\7\44\6\122\0\3\7"+
    "\1\0\25\7\4\6\1\7\4\6\3\7\2\6\11\0\300\6\47\7"+
    "\25\0\4\7\u0116\6\2\0\6\6\2\0\46\6\2\0\6\6\2\0"+
    "\10\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\37\6\2\0"+
    "\65\6\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6\3\0"+
    "\4\6\2\0\6\6\4\0\15\6\5\0\3\6\1\0\7\6\16\0"+
    "\5\7\30\0\1\0\1\0\5\7\20\0\2\6\23\0\1\6\13\0"+
    "\5\7\5\0\6\7\1\0\1\6\15\0\1\6\20\0\15\6\3\0"+
    "\33\6\25\0\15\7\4\0\1\7\3\0\14\7\21\0\1\6\4\0"+
    "\1\6\2\0\12\6\1\0\1\6\3\0\5\6\6\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\13\6\2\0\4\6\5\0"+
    "\5\6\4\0\1\6\21\0\51\6\u0a77\0\57\6\1\0\57\6\1\0"+
    "\205\6\6\0\4\6\3\7\2\6\14\0\46\6\1\0\1\6\5\0"+
    "\1\6\2\0\70\6\7\0\1\6\17\0\1\7\27\6\11\0\7\6"+
    "\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6"+
    "\1\0\7\6\1\0\7\6\1\0\40\7\57\0\1\6\u01d5\0\3\6"+
    "\31\0\11\6\6\7\1\0\5\6\2\0\5\6\4\0\126\6\2\0"+
    "\2\7\2\0\3\6\1\0\132\6\1\0\4\6\5\0\51\6\3\0"+
    "\136\6\21\0\33\6\65\0\20\6\u0200\0\u19b6\6\112\0\u51cd\6\63\0"+
    "\u048d\6\103\0\56\6\2\0\u010d\6\3\0\20\6\12\7\2\6\24\0"+
    "\57\6\1\7\4\0\12\7\1\0\31\6\7\0\1\7\120\6\2\7"+
    "\45\0\11\6\2\0\147\6\2\0\4\6\1\0\4\6\14\0\13\6"+
    "\115\0\12\6\1\7\3\6\1\7\4\6\1\7\27\6\5\7\20\0"+
    "\1\6\7\0\64\6\14\0\2\7\62\6\21\7\13\0\12\7\6\0"+
    "\22\7\6\6\3\0\1\6\4\0\12\7\34\6\10\7\2\0\27\6"+
    "\15\7\14\0\35\6\3\0\4\7\57\6\16\7\16\0\1\6\12\7"+
    "\46\0\51\6\16\7\11\0\3\6\1\7\10\6\2\7\2\0\12\7"+
    "\6\0\27\6\3\0\1\6\1\7\4\0\60\6\1\7\1\6\3\7"+
    "\2\6\2\7\5\6\2\7\1\6\1\7\1\6\30\0\3\6\2\0"+
    "\13\6\5\7\2\0\3\6\2\7\12\0\6\6\2\0\6\6\2\0"+
    "\6\6\11\0\7\6\1\0\7\6\221\0\43\6\10\7\1\0\2\7"+
    "\2\0\12\7\6\0\u2ba4\6\14\0\27\6\4\0\61\6\u2104\0\u016e\6"+
    "\2\0\152\6\46\0\7\6\14\0\5\6\5\0\1\6\1\7\12\6"+
    "\1\0\15\6\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6"+
    "\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6"+
    "\3\0\20\7\20\0\7\7\14\0\2\6\30\0\3\6\31\0\1\6"+
    "\6\0\5\6\1\0\207\6\2\0\1\7\4\0\1\6\13\0\12\7"+
    "\7\0\32\6\4\0\1\6\1\0\32\6\13\0\131\6\3\0\6\6"+
    "\2\0\6\6\2\0\6\6\2\0\3\6\3\0\2\6\3\0\2\6"+
    "\22\0\3\7\4\0\14\6\1\0\32\6\1\0\23\6\1\0\2\6"+
    "\1\0\17\6\2\0\16\6\42\0\173\6\105\0\65\6\210\0\1\7"+
    "\202\0\35\6\3\0\61\6\57\0\37\6\21\0\33\6\65\0\36\6"+
    "\2\0\44\6\4\0\10\6\1\0\5\6\52\0\236\6\2\0\12\7"+
    "\u0356\0\6\6\2\0\1\6\1\0\54\6\1\0\2\6\3\0\1\6"+
    "\2\0\27\6\252\0\26\6\12\0\32\6\106\0\70\6\6\0\2\6"+
    "\100\0\1\6\3\7\1\0\2\7\5\0\4\7\4\6\1\0\3\6"+
    "\1\0\33\6\4\0\3\7\4\0\1\7\40\0\35\6\203\0\66\6"+
    "\12\0\26\6\12\0\23\6\215\0\111\6\u03b7\0\3\7\65\6\17\7"+
    "\37\0\12\7\20\0\3\7\55\6\13\7\2\0\1\7\22\0\31\6"+
    "\7\0\12\7\6\0\3\7\44\6\16\7\1\0\12\7\100\0\3\7"+
    "\60\6\16\7\4\6\13\0\12\7\u04a6\0\53\6\15\7\10\0\12\7"+
    "\u0936\0\u036f\6\221\0\143\6\u0b9d\0\u042f\6\u33d1\0\u0239\6\u04c7\0\105\6"+
    "\13\0\1\6\56\7\20\0\4\7\15\6\u4060\0\2\6\u2163\0\5\7"+
    "\3\0\26\7\2\0\7\7\36\0\4\7\224\0\3\7\u01bb\0\125\6"+
    "\1\0\107\6\1\0\2\6\2\0\1\6\2\0\2\6\2\0\4\6"+
    "\1\0\14\6\1\0\1\6\1\0\7\6\1\0\101\6\1\0\4\6"+
    "\2\0\10\6\1\0\7\6\1\0\34\6\1\0\4\6\1\0\5\6"+
    "\1\0\1\6\3\0\7\6\1\0\u0154\6\2\0\31\6\1\0\31\6"+
    "\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6"+
    "\1\0\31\6\1\0\37\6\1\0\31\6\1\0\10\6\2\0\62\7"+
    "\u1600\0\4\6\1\0\33\6\1\0\2\6\1\0\1\6\2\0\1\6"+
    "\1\0\12\6\1\0\4\6\1\0\1\6\1\0\1\6\6\0\1\6"+
    "\4\0\1\6\1\0\1\6\1\0\1\6\1\0\3\6\1\0\2\6"+
    "\1\0\1\6\2\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\2\6\1\0\1\6\2\0\4\6\1\0\7\6"+
    "\1\0\4\6\1\0\4\6\1\0\1\6\1\0\12\6\1\0\21\6"+
    "\5\0\3\6\1\0\5\6\1\0\21\6\u1144\0\ua6d7\6\51\0\u1035\6"+
    "\13\0\336\6\u3fe2\0\u021e\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\7\36\0\140\7\200\0\360\7\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\2\3\1\4\1\1\2\5\1\6"+
    "\1\3\1\7\1\10\20\4\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\6\3\1\21\1\22\1\21"+
    "\1\23\1\24\1\23\5\25\1\26\1\27\2\30\1\5"+
    "\1\31\1\5\1\0\3\5\1\0\2\31\1\0\27\4"+
    "\1\32\1\4\1\32\13\4\1\3\1\21\1\23\1\33"+
    "\1\30\5\5\1\31\1\0\27\4\1\32\16\4\1\30"+
    "\4\5\10\4\1\34\17\4\1\30\4\5\6\4\1\32"+
    "\7\4\1\32\2\4\1\30\4\5\12\4\1\30\4\5"+
    "\7\4\1\30\4\5\3\4\1\30\4\5\2\4\1\32"+
    "\4\5\1\0\3\5\1\0\3\5\1\0\3\5\1\0"+
    "\3\5\1\0\3\5\1\0\3\5\1\0\1\5\1\31"+
    "\1\5\1\0\1\31\1\5\1\31\1\5\1\31\1\5"+
    "\1\31\1\5\1\31\14\5\37\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[339];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0104\0\u0186"+
    "\0\u01c7\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u0104"+
    "\0\u0104\0\u038e\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514"+
    "\0\u0555\0\u0596\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c"+
    "\0\u075d\0\u0104\0\u0104\0\u0104\0\u0104\0\u0104\0\u0104\0\u0104"+
    "\0\u0104\0\u079e\0\u07df\0\u0104\0\u0820\0\u0861\0\u08a2\0\u08e3"+
    "\0\u0104\0\u0924\0\u0965\0\u0104\0\u09a6\0\u09e7\0\u0a28\0\u0104"+
    "\0\u0a69\0\u0aaa\0\u0aeb\0\u0104\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef"+
    "\0\u0104\0\u0c30\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34\0\u0104\0\u0d75"+
    "\0\u0db6\0\u0df7\0\u0e38\0\u0e79\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d"+
    "\0\u0fbe\0\u0fff\0\u1040\0\u1081\0\u10c2\0\u1103\0\u1144\0\u1185"+
    "\0\u11c6\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b\0\u134c\0\u138d"+
    "\0\u0208\0\u13ce\0\u140f\0\u1450\0\u1491\0\u14d2\0\u1513\0\u1554"+
    "\0\u1595\0\u15d6\0\u1617\0\u1658\0\u1699\0\u16da\0\u171b\0\u0104"+
    "\0\u0104\0\u0104\0\u175c\0\u179d\0\u17de\0\u181f\0\u1860\0\u18a1"+
    "\0\u18e2\0\u1923\0\u1964\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9"+
    "\0\u1aea\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1"+
    "\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37\0\u1e78\0\u1eb9"+
    "\0\u1efa\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f\0\u2080\0\u20c1"+
    "\0\u2102\0\u2143\0\u2184\0\u21c5\0\u2206\0\u2247\0\u2288\0\u22c9"+
    "\0\u230a\0\u234b\0\u238c\0\u23cd\0\u240e\0\u244f\0\u2490\0\u24d1"+
    "\0\u2512\0\u2553\0\u2594\0\u25d5\0\u2616\0\u0208\0\u2657\0\u2698"+
    "\0\u26d9\0\u271a\0\u275b\0\u279c\0\u27dd\0\u281e\0\u285f\0\u28a0"+
    "\0\u28e1\0\u2922\0\u2963\0\u29a4\0\u29e5\0\u2a26\0\u2a67\0\u2aa8"+
    "\0\u2ae9\0\u2b2a\0\u2b6b\0\u2bac\0\u2bed\0\u2c2e\0\u2c6f\0\u2cb0"+
    "\0\u1cb1\0\u2cf1\0\u2d32\0\u2d73\0\u2db4\0\u2df5\0\u2e36\0\u2e77"+
    "\0\u2eb8\0\u2ef9\0\u2f3a\0\u2f7b\0\u2fbc\0\u2ffd\0\u303e\0\u307f"+
    "\0\u30c0\0\u3101\0\u3142\0\u3183\0\u31c4\0\u3205\0\u3246\0\u3287"+
    "\0\u32c8\0\u3309\0\u334a\0\u338b\0\u33cc\0\u340d\0\u344e\0\u348f"+
    "\0\u34d0\0\u3511\0\u3552\0\u3593\0\u35d4\0\u3615\0\u3656\0\u3697"+
    "\0\u36d8\0\u3719\0\u375a\0\u379b\0\u37dc\0\u381d\0\u385e\0\u389f"+
    "\0\u38e0\0\u3921\0\u3962\0\u39a3\0\u39e4\0\u0b2c\0\u3a25\0\u3a66"+
    "\0\u3aa7\0\u3ae8\0\u3b29\0\u3b6a\0\u3bab\0\u3bec\0\u3c2d\0\u3c6e"+
    "\0\u3caf\0\u3cf0\0\u3d31\0\u3d72\0\u3db3\0\u3df4\0\u3e35\0\u3e76"+
    "\0\u3eb7\0\u3ef8\0\u3f39\0\u3f7a\0\u3fbb\0\u3ffc\0\u403d\0\u407e"+
    "\0\u40bf\0\u4100\0\u4141\0\u4182\0\u4182\0\u41c3\0\u4204\0\u4245"+
    "\0\u4286\0\u42c7\0\u4308\0\u4349\0\u438a\0\u43cb\0\u440c\0\u444d"+
    "\0\u448e\0\u44cf\0\u4510\0\u4551\0\u4592\0\u45d3\0\u4614\0\u4655"+
    "\0\u4696\0\u46d7\0\u4718\0\u4759\0\u479a\0\u47db\0\u481c\0\u485d"+
    "\0\u489e\0\u48df\0\u4920\0\u4961\0\u49a2\0\u49e3\0\u4a24\0\u4a65"+
    "\0\u4aa6\0\u4ae7\0\u4b28\0\u4b69\0\u4baa\0\u4beb\0\u4c2c\0\u4c6d"+
    "\0\u4cae\0\u4cef\0\u4d30\0\u4d71\0\u4db2\0\u4df3\0\u4e34\0\u4e75"+
    "\0\u4eb6\0\u4ef7\0\u4f38";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[339];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\2\7\1\10\1\11\1\12\1\5\1\13"+
    "\1\14\1\15\3\12\3\15\2\12\1\16\1\12\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\12\1\30\1\31\1\32\3\12\1\33\1\12\1\34"+
    "\1\12\1\35\1\12\1\36\1\37\1\40\1\41\1\12"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\11\1\52\1\53\1\11\1\54\1\55\1\56\1\57"+
    "\1\5\1\60\2\5\23\60\1\61\51\60\1\62\1\63"+
    "\2\5\24\63\1\64\50\63\1\65\1\66\1\67\1\70"+
    "\2\66\1\71\72\66\1\72\103\0\1\7\102\0\1\73"+
    "\1\74\62\0\1\54\100\0\1\54\16\0\2\12\1\0"+
    "\12\12\1\0\1\12\3\0\30\12\27\0\1\75\4\0"+
    "\3\75\3\0\2\75\1\0\1\75\3\0\15\75\1\76"+
    "\12\75\32\0\1\77\1\100\1\101\1\102\1\0\1\103"+
    "\1\104\1\105\1\106\1\107\1\110\1\111\4\0\1\106"+
    "\5\0\1\101\1\111\6\0\1\107\1\102\1\107\40\0"+
    "\2\15\1\101\2\0\3\15\1\0\1\107\1\110\1\111"+
    "\12\0\1\101\1\111\6\0\1\107\1\0\1\107\40\0"+
    "\2\110\3\0\3\110\105\0\1\54\42\0\2\54\15\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\1\12\1\112"+
    "\26\12\27\0\2\12\1\0\12\12\1\0\1\12\3\0"+
    "\4\12\1\113\1\12\1\114\4\12\1\115\14\12\27\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\3\12\1\116"+
    "\7\12\1\117\1\120\1\12\1\121\7\12\1\122\1\12"+
    "\27\0\2\12\1\0\12\12\1\0\1\12\3\0\4\12"+
    "\1\123\7\12\1\124\13\12\27\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\10\12\1\125\17\12\27\0\2\12"+
    "\1\0\12\12\1\0\1\12\3\0\1\126\5\12\1\127"+
    "\1\130\4\12\1\131\13\12\27\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\6\12\1\132\21\12\27\0\2\12"+
    "\1\0\12\12\1\0\1\12\3\0\7\12\1\133\10\12"+
    "\1\134\7\12\27\0\2\12\1\0\12\12\1\0\1\12"+
    "\3\0\1\135\7\12\1\136\5\12\1\137\11\12\27\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\11\12\1\140"+
    "\7\12\1\141\1\142\5\12\27\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\6\12\1\143\1\12\1\144\17\12"+
    "\27\0\2\12\1\0\12\12\1\0\1\12\3\0\1\145"+
    "\5\12\1\146\1\147\5\12\1\150\12\12\27\0\2\12"+
    "\1\0\12\12\1\0\1\12\3\0\1\151\3\12\1\152"+
    "\11\12\1\153\11\12\27\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\6\12\1\154\21\12\27\0\2\12\1\0"+
    "\12\12\1\0\1\12\3\0\6\12\1\155\21\12\27\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\14\12\1\156"+
    "\13\12\111\0\1\54\1\157\77\0\1\54\1\0\1\11"+
    "\76\0\1\54\4\0\1\54\73\0\1\54\5\0\1\54"+
    "\72\0\1\54\6\0\1\54\1\0\1\60\2\0\23\60"+
    "\1\0\53\60\2\0\23\60\1\160\52\60\1\63\2\0"+
    "\24\63\1\0\52\63\2\0\24\63\1\161\51\63\1\66"+
    "\2\0\2\66\1\0\73\66\2\0\1\70\102\0\1\162"+
    "\74\0\1\66\2\0\2\66\1\5\73\66\101\73\6\0"+
    "\2\75\1\0\12\75\1\0\1\75\3\0\30\75\27\0"+
    "\2\75\1\0\12\75\1\0\1\75\3\0\11\75\1\163"+
    "\16\75\32\0\1\77\1\100\1\101\2\0\1\103\1\104"+
    "\1\105\1\0\1\107\1\110\1\111\12\0\1\101\1\111"+
    "\6\0\1\107\1\0\1\107\40\0\2\100\3\0\3\100"+
    "\1\0\1\107\1\110\1\111\13\0\1\111\6\0\1\107"+
    "\1\0\1\107\40\0\1\164\1\165\2\0\6\165\1\0"+
    "\1\165\3\0\2\165\3\0\1\165\2\0\1\165\6\0"+
    "\1\165\1\0\1\165\40\0\1\166\1\100\1\101\2\0"+
    "\3\166\1\0\1\107\1\110\1\111\12\0\1\101\1\111"+
    "\6\0\1\107\1\0\1\107\40\0\1\105\1\100\1\101"+
    "\2\0\3\105\1\0\1\107\1\110\1\111\12\0\1\101"+
    "\1\111\6\0\1\107\1\0\1\107\40\0\1\167\1\100"+
    "\1\101\2\0\3\167\1\0\1\107\1\110\1\111\12\0"+
    "\1\101\1\111\6\0\1\107\1\0\1\107\40\0\1\170"+
    "\5\0\1\170\72\0\2\110\3\0\3\110\1\0\1\107"+
    "\1\0\1\111\13\0\1\111\6\0\1\107\1\0\1\107"+
    "\40\0\2\171\3\0\3\171\4\0\1\172\51\0\1\172"+
    "\7\0\2\12\1\0\12\12\1\0\1\12\3\0\2\12"+
    "\1\173\25\12\27\0\2\12\1\0\12\12\1\0\1\12"+
    "\3\0\10\12\1\174\17\12\27\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\6\12\1\175\21\12\27\0\2\12"+
    "\1\0\12\12\1\0\1\12\3\0\3\12\1\176\24\12"+
    "\27\0\2\12\1\0\12\12\1\0\1\12\3\0\1\177"+
    "\3\12\1\200\23\12\27\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\11\12\1\201\16\12\27\0\2\12\1\0"+
    "\12\12\1\0\1\12\3\0\6\12\1\202\21\12\27\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\23\12\1\203"+
    "\4\12\27\0\2\12\1\0\12\12\1\0\1\12\3\0"+
    "\15\12\1\204\12\12\27\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\1\205\12\12\1\141\2\12\1\206\11\12"+
    "\27\0\2\12\1\0\12\12\1\0\1\12\3\0\4\12"+
    "\1\207\10\12\1\210\12\12\27\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\3\12\1\211\24\12\27\0\2\12"+
    "\1\0\12\12\1\0\1\12\3\0\2\12\1\176\1\212"+
    "\24\12\27\0\2\12\1\0\12\12\1\0\1\12\3\0"+
    "\11\12\1\213\16\12\27\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\1\214\27\12\27\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\1\146\27\12\27\0\2\12\1\0"+
    "\12\12\1\0\1\12\3\0\11\12\1\215\16\12\27\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\2\12\1\176"+
    "\25\12\27\0\2\12\1\0\12\12\1\0\1\12\3\0"+
    "\3\12\1\216\24\12\27\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\3\12\1\217\24\12\27\0\2\12\1\0"+
    "\12\12\1\0\1\12\3\0\26\12\1\141\1\12\27\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\7\12\1\220"+
    "\20\12\27\0\2\12\1\0\12\12\1\0\1\12\3\0"+
    "\2\12\1\221\1\222\24\12\27\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\23\12\1\223\4\12\27\0\2\12"+
    "\1\0\12\12\1\0\1\12\3\0\16\12\1\224\11\12"+
    "\27\0\2\12\1\0\12\12\1\0\1\12\3\0\21\12"+
    "\1\225\6\12\27\0\2\12\1\0\12\12\1\0\1\12"+
    "\3\0\7\12\1\226\20\12\27\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\4\12\1\141\23\12\27\0\2\12"+
    "\1\0\12\12\1\0\1\12\3\0\6\12\1\227\21\12"+
    "\27\0\2\12\1\0\12\12\1\0\1\12\3\0\11\12"+
    "\1\230\16\12\27\0\2\12\1\0\12\12\1\0\1\12"+
    "\3\0\5\12\1\231\22\12\27\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\6\12\1\232\6\12\1\233\12\12"+
    "\27\0\2\12\1\0\12\12\1\0\1\12\3\0\1\12"+
    "\1\234\26\12\27\0\2\12\1\0\12\12\1\0\1\12"+
    "\3\0\3\12\1\235\24\12\27\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\7\12\1\236\5\12\1\237\12\12"+
    "\27\0\2\12\1\0\12\12\1\0\1\12\3\0\15\12"+
    "\1\240\12\12\111\0\1\54\1\11\15\0\2\75\1\0"+
    "\12\75\1\0\1\75\3\0\3\75\1\241\24\75\32\0"+
    "\1\164\1\165\1\101\1\0\6\165\1\0\1\165\3\0"+
    "\2\165\3\0\1\165\1\0\1\101\1\165\6\0\1\165"+
    "\1\0\1\165\40\0\2\242\1\101\1\0\6\242\1\0"+
    "\1\242\3\0\2\242\3\0\1\242\1\0\1\101\1\242"+
    "\6\0\1\242\1\0\1\242\40\0\1\243\1\100\1\101"+
    "\2\0\3\243\1\0\1\107\1\110\1\111\12\0\1\101"+
    "\1\111\6\0\1\107\1\0\1\107\40\0\1\244\1\100"+
    "\1\101\2\0\3\244\1\0\1\107\1\110\1\111\12\0"+
    "\1\101\1\111\6\0\1\107\1\0\1\107\40\0\1\245"+
    "\1\0\1\101\3\0\1\245\17\0\1\101\52\0\2\171"+
    "\3\0\3\171\1\0\1\107\24\0\1\107\1\0\1\107"+
    "\40\0\2\171\3\0\3\171\66\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\3\12\1\246\24\12\27\0\2\12"+
    "\1\0\12\12\1\0\1\12\3\0\1\247\27\12\27\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\7\12\1\250"+
    "\20\12\27\0\2\12\1\0\12\12\1\0\1\12\3\0"+
    "\10\12\1\141\17\12\27\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\3\12\1\251\24\12\27\0\2\12\1\0"+
    "\12\12\1\0\1\12\3\0\15\12\1\252\12\12\27\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\5\12\1\253"+
    "\22\12\27\0\2\12\1\0\12\12\1\0\1\12\3\0"+
    "\4\12\1\254\23\12\27\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\10\12\1\146\17\12\27\0\2\12\1\0"+
    "\12\12\1\0\1\12\3\0\3\12\1\212\24\12\27\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\11\12\1\255"+
    "\16\12\27\0\2\12\1\0\12\12\1\0\1\12\3\0"+
    "\10\12\1\256\17\12\27\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\6\12\1\257\21\12\27\0\2\12\1\0"+
    "\12\12\1\0\1\12\3\0\2\12\1\141\25\12\27\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\16\12\1\260"+
    "\11\12\27\0\2\12\1\0\12\12\1\0\1\12\3\0"+
    "\5\12\1\261\22\12\27\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\2\12\1\254\1\262\24\12\27\0\2\12"+
    "\1\0\12\12\1\0\1\12\3\0\2\12\1\210\25\12"+
    "\27\0\2\12\1\0\12\12\1\0\1\12\3\0\24\12"+
    "\1\141\3\12\27\0\2\12\1\0\12\12\1\0\1\12"+
    "\3\0\10\12\1\263\17\12\27\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\15\12\1\264\12\12\27\0\2\12"+
    "\1\0\12\12\1\0\1\12\3\0\7\12\1\141\20\12"+
    "\27\0\2\12\1\0\12\12\1\0\1\12\3\0\3\12"+
    "\1\265\24\12\27\0\2\12\1\0\12\12\1\0\1\12"+
    "\3\0\10\12\1\266\17\12\27\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\6\12\1\202\1\267\20\12\27\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\1\12\1\240"+
    "\26\12\27\0\2\12\1\0\12\12\1\0\1\12\3\0"+
    "\1\270\27\12\27\0\2\12\1\0\12\12\1\0\1\12"+
    "\3\0\2\12\1\206\25\12\27\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\1\254\27\12\27\0\2\12\1\0"+
    "\12\12\1\0\1\12\3\0\1\271\27\12\27\0\2\12"+
    "\1\0\12\12\1\0\1\12\3\0\12\12\1\272\15\12"+
    "\27\0\2\12\1\0\12\12\1\0\1\12\3\0\3\12"+
    "\1\273\24\12\27\0\2\12\1\0\12\12\1\0\1\12"+
    "\3\0\25\12\1\274\2\12\27\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\7\12\1\251\20\12\27\0\2\12"+
    "\1\0\12\12\1\0\1\12\3\0\6\12\1\141\21\12"+
    "\27\0\2\12\1\0\12\12\1\0\1\12\3\0\1\275"+
    "\27\12\27\0\2\12\1\0\12\12\1\0\1\12\3\0"+
    "\17\12\1\141\10\12\27\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\7\12\1\176\20\12\27\0\2\75\1\0"+
    "\12\75\1\0\1\75\3\0\10\75\1\276\17\75\32\0"+
    "\2\277\1\101\1\0\6\277\1\0\1\277\3\0\2\277"+
    "\3\0\1\277\1\0\1\101\1\277\6\0\1\277\1\0"+
    "\1\277\40\0\1\300\1\100\1\101\2\0\3\300\1\0"+
    "\1\107\1\110\1\111\12\0\1\101\1\111\6\0\1\107"+
    "\1\0\1\107\40\0\1\301\1\100\1\101\2\0\3\301"+
    "\1\0\1\107\1\110\1\111\12\0\1\101\1\111\6\0"+
    "\1\107\1\0\1\107\40\0\1\302\1\0\1\101\3\0"+
    "\1\302\17\0\1\101\47\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\4\12\1\303\23\12\27\0\2\12\1\0"+
    "\12\12\1\0\1\12\3\0\12\12\1\141\15\12\27\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\10\12\1\304"+
    "\17\12\27\0\2\12\1\0\12\12\1\0\1\12\3\0"+
    "\15\12\1\305\12\12\27\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\5\12\1\306\22\12\27\0\2\12\1\0"+
    "\12\12\1\0\1\12\3\0\14\12\1\307\13\12\27\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\3\12\1\141"+
    "\24\12\27\0\2\12\1\0\12\12\1\0\1\12\3\0"+
    "\2\12\1\310\25\12\27\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\26\12\1\311\1\12\27\0\2\12\1\0"+
    "\12\12\1\0\1\12\3\0\4\12\1\312\23\12\27\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\14\12\1\141"+
    "\13\12\27\0\2\12\1\0\12\12\1\0\1\12\3\0"+
    "\15\12\1\313\12\12\27\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\11\12\1\314\16\12\27\0\2\12\1\0"+
    "\12\12\1\0\1\12\3\0\25\12\1\176\2\12\27\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\1\315\27\12"+
    "\27\0\2\12\1\0\12\12\1\0\1\12\3\0\4\12"+
    "\1\316\23\12\27\0\2\12\1\0\12\12\1\0\1\12"+
    "\3\0\10\12\1\317\17\12\27\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\16\12\1\320\11\12\27\0\2\12"+
    "\1\0\12\12\1\0\1\12\3\0\7\12\1\321\20\12"+
    "\27\0\2\12\1\0\12\12\1\0\1\12\3\0\1\322"+
    "\27\12\27\0\2\12\1\0\12\12\1\0\1\12\3\0"+
    "\10\12\1\323\17\12\27\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\1\115\27\12\27\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\3\12\1\156\24\12\27\0\2\75"+
    "\1\0\12\75\1\0\1\75\3\0\4\75\1\324\23\75"+
    "\32\0\2\325\1\101\1\0\6\325\1\0\1\325\3\0"+
    "\2\325\3\0\1\325\1\0\1\101\1\325\6\0\1\325"+
    "\1\0\1\325\40\0\1\326\1\100\1\101\2\0\3\326"+
    "\1\0\1\107\1\110\1\111\12\0\1\101\1\111\6\0"+
    "\1\107\1\0\1\107\40\0\1\327\1\100\1\101\2\0"+
    "\3\327\1\0\1\107\1\110\1\111\12\0\1\101\1\111"+
    "\6\0\1\107\1\0\1\107\40\0\1\330\1\0\1\101"+
    "\3\0\1\330\17\0\1\101\47\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\1\331\27\12\27\0\2\12\1\0"+
    "\12\12\1\0\1\12\3\0\1\312\27\12\27\0\2\12"+
    "\1\0\12\12\1\0\1\12\3\0\5\12\1\141\22\12"+
    "\27\0\2\12\1\0\12\12\1\0\1\12\3\0\3\12"+
    "\1\332\24\12\27\0\2\12\1\0\12\12\1\0\1\12"+
    "\3\0\4\12\1\333\23\12\27\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\15\12\1\334\12\12\27\0\2\12"+
    "\1\0\12\12\1\0\1\12\3\0\11\12\1\141\16\12"+
    "\27\0\2\12\1\0\12\12\1\0\1\12\3\0\11\12"+
    "\1\335\16\12\27\0\2\12\1\0\12\12\1\0\1\12"+
    "\3\0\17\12\1\210\10\12\27\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\11\12\1\336\16\12\27\0\2\12"+
    "\1\0\12\12\1\0\1\12\3\0\21\12\1\337\6\12"+
    "\27\0\2\12\1\0\12\12\1\0\1\12\3\0\22\12"+
    "\1\340\5\12\27\0\2\12\1\0\12\12\1\0\1\12"+
    "\3\0\7\12\1\254\20\12\27\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\7\12\1\341\20\12\27\0\2\12"+
    "\1\0\12\12\1\0\1\12\3\0\24\12\1\176\3\12"+
    "\27\0\2\12\1\0\12\12\1\0\1\12\3\0\5\12"+
    "\1\342\22\12\27\0\2\75\1\0\12\75\1\0\1\75"+
    "\3\0\21\75\1\343\6\75\32\0\2\344\1\101\1\0"+
    "\6\344\1\0\1\344\3\0\2\344\3\0\1\344\1\0"+
    "\1\101\1\344\6\0\1\344\1\0\1\344\40\0\1\345"+
    "\1\100\1\101\2\0\3\345\1\0\1\107\1\110\1\111"+
    "\12\0\1\101\1\111\6\0\1\107\1\0\1\107\40\0"+
    "\1\346\1\100\1\101\2\0\3\346\1\0\1\107\1\110"+
    "\1\111\12\0\1\101\1\111\6\0\1\107\1\0\1\107"+
    "\40\0\1\347\1\0\1\101\3\0\1\347\17\0\1\101"+
    "\47\0\2\12\1\0\12\12\1\0\1\12\3\0\5\12"+
    "\1\254\22\12\27\0\2\12\1\0\12\12\1\0\1\12"+
    "\3\0\21\12\1\350\6\12\27\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\6\12\1\351\21\12\27\0\2\12"+
    "\1\0\12\12\1\0\1\12\3\0\10\12\1\352\17\12"+
    "\27\0\2\12\1\0\12\12\1\0\1\12\3\0\16\12"+
    "\1\176\11\12\27\0\2\12\1\0\12\12\1\0\1\12"+
    "\3\0\5\12\1\353\22\12\27\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\1\354\27\12\27\0\2\12\1\0"+
    "\12\12\1\0\1\12\3\0\10\12\1\355\17\12\27\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\13\12\1\141"+
    "\14\12\27\0\2\12\1\0\12\12\1\0\1\12\3\0"+
    "\3\12\1\356\24\12\27\0\2\75\1\0\12\75\1\0"+
    "\1\75\3\0\1\357\27\75\32\0\2\360\1\101\1\0"+
    "\6\360\1\0\1\360\3\0\2\360\3\0\1\360\1\0"+
    "\1\101\1\360\6\0\1\360\1\0\1\360\40\0\1\361"+
    "\1\100\1\101\2\0\3\361\1\0\1\107\1\110\1\111"+
    "\12\0\1\101\1\111\6\0\1\107\1\0\1\107\40\0"+
    "\1\362\1\100\1\101\2\0\3\362\1\0\1\107\1\110"+
    "\1\111\12\0\1\101\1\111\6\0\1\107\1\0\1\107"+
    "\40\0\1\363\1\0\1\101\3\0\1\363\17\0\1\101"+
    "\47\0\2\12\1\0\12\12\1\0\1\12\3\0\23\12"+
    "\1\141\4\12\27\0\2\12\1\0\12\12\1\0\1\12"+
    "\3\0\11\12\1\364\16\12\27\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\11\12\1\254\16\12\27\0\2\12"+
    "\1\0\12\12\1\0\1\12\3\0\10\12\1\365\17\12"+
    "\27\0\2\12\1\0\12\12\1\0\1\12\3\0\5\12"+
    "\1\176\22\12\27\0\2\12\1\0\12\12\1\0\1\12"+
    "\3\0\11\12\1\366\16\12\27\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\10\12\1\237\17\12\27\0\2\75"+
    "\1\0\12\75\1\0\1\75\3\0\5\75\1\367\22\75"+
    "\32\0\2\370\1\101\1\0\6\370\1\0\1\370\3\0"+
    "\2\370\3\0\1\370\1\0\1\101\1\370\6\0\1\370"+
    "\1\0\1\370\40\0\1\371\1\100\1\101\2\0\3\371"+
    "\1\0\1\107\1\110\1\111\12\0\1\101\1\111\6\0"+
    "\1\107\1\0\1\107\40\0\1\372\1\100\1\101\2\0"+
    "\3\372\1\0\1\107\1\110\1\111\12\0\1\101\1\111"+
    "\6\0\1\107\1\0\1\107\40\0\1\373\1\0\1\101"+
    "\3\0\1\373\17\0\1\101\47\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\15\12\1\374\12\12\27\0\2\12"+
    "\1\0\12\12\1\0\1\12\3\0\6\12\1\375\21\12"+
    "\27\0\2\12\1\0\12\12\1\0\1\12\3\0\3\12"+
    "\1\210\24\12\27\0\2\75\1\0\12\75\1\0\1\75"+
    "\3\0\10\75\1\376\17\75\32\0\2\377\1\101\1\0"+
    "\6\377\1\0\1\377\3\0\2\377\3\0\1\377\1\0"+
    "\1\101\1\377\6\0\1\377\1\0\1\377\40\0\1\u0100"+
    "\1\100\1\101\2\0\3\u0100\1\0\1\107\1\110\1\111"+
    "\12\0\1\101\1\111\6\0\1\107\1\0\1\107\40\0"+
    "\1\u0101\1\100\1\101\2\0\3\u0101\1\0\1\107\1\110"+
    "\1\111\12\0\1\101\1\111\6\0\1\107\1\0\1\107"+
    "\40\0\1\u0102\1\0\1\101\3\0\1\u0102\17\0\1\101"+
    "\47\0\2\12\1\0\12\12\1\0\1\12\3\0\27\12"+
    "\1\356\27\0\2\12\1\0\12\12\1\0\1\12\3\0"+
    "\21\12\1\141\6\12\32\0\2\u0103\1\101\1\0\6\u0103"+
    "\1\0\1\u0103\3\0\2\u0103\3\0\1\u0103\1\0\1\101"+
    "\1\u0103\6\0\1\u0103\1\0\1\u0103\40\0\1\u0104\1\100"+
    "\1\101\2\0\3\u0104\1\0\1\107\1\110\1\111\12\0"+
    "\1\101\1\111\6\0\1\107\1\0\1\107\40\0\1\u0105"+
    "\1\100\1\101\2\0\3\u0105\1\0\1\107\1\110\1\111"+
    "\12\0\1\101\1\111\6\0\1\107\1\0\1\107\40\0"+
    "\1\u0106\1\0\1\101\3\0\1\u0106\17\0\1\101\52\0"+
    "\2\u0107\1\101\1\0\6\u0107\1\0\1\u0107\3\0\2\u0107"+
    "\3\0\1\u0107\1\0\1\101\1\u0107\6\0\1\u0107\1\0"+
    "\1\u0107\40\0\1\u0108\1\100\1\101\2\0\3\u0108\1\0"+
    "\1\107\1\110\1\111\12\0\1\101\1\111\6\0\1\107"+
    "\1\0\1\107\40\0\1\u0109\1\100\1\101\2\0\3\u0109"+
    "\1\0\1\107\1\110\1\111\12\0\1\101\1\111\6\0"+
    "\1\107\1\0\1\107\40\0\1\u010a\1\0\1\101\3\0"+
    "\1\u010a\17\0\1\101\52\0\2\u010b\1\101\1\0\6\u010b"+
    "\1\0\1\u010b\3\0\2\u010b\3\0\1\u010b\1\0\1\101"+
    "\1\u010b\6\0\1\u010b\1\0\1\u010b\40\0\1\u010c\1\100"+
    "\1\101\2\0\3\u010c\1\0\1\107\1\110\1\111\12\0"+
    "\1\101\1\111\6\0\1\107\1\0\1\107\40\0\1\u010d"+
    "\1\100\1\101\2\0\3\u010d\1\0\1\107\1\110\1\111"+
    "\12\0\1\101\1\111\6\0\1\107\1\0\1\107\40\0"+
    "\1\u010e\1\0\1\101\3\0\1\u010e\17\0\1\101\52\0"+
    "\2\u010f\1\101\1\0\6\u010f\1\0\1\u010f\3\0\2\u010f"+
    "\3\0\1\u010f\1\0\1\101\1\u010f\6\0\1\u010f\1\0"+
    "\1\u010f\40\0\1\u0110\1\100\1\101\2\0\3\u0110\1\0"+
    "\1\107\1\110\1\111\12\0\1\101\1\111\6\0\1\107"+
    "\1\0\1\107\40\0\1\u0111\1\100\1\101\2\0\3\u0111"+
    "\1\0\1\107\1\110\1\111\12\0\1\101\1\111\6\0"+
    "\1\107\1\0\1\107\40\0\1\u0112\1\0\1\101\3\0"+
    "\1\u0112\17\0\1\101\52\0\2\u0113\1\101\1\0\6\u0113"+
    "\1\0\1\u0113\3\0\2\u0113\3\0\1\u0113\1\0\1\101"+
    "\1\u0113\6\0\1\u0113\1\0\1\u0113\40\0\1\u0114\1\100"+
    "\1\101\2\0\3\u0114\1\0\1\107\1\110\1\111\12\0"+
    "\1\101\1\111\6\0\1\107\1\0\1\107\40\0\1\u0115"+
    "\1\100\1\101\2\0\3\u0115\1\0\1\107\1\110\1\111"+
    "\12\0\1\101\1\111\6\0\1\107\1\0\1\107\40\0"+
    "\1\u0116\1\0\1\101\3\0\1\u0116\17\0\1\101\52\0"+
    "\2\u0117\1\101\1\0\6\u0117\1\0\1\u0117\3\0\2\u0117"+
    "\3\0\1\u0117\1\0\1\101\1\u0117\6\0\1\u0117\1\0"+
    "\1\u0117\40\0\1\u0118\1\100\1\101\2\0\3\u0118\1\0"+
    "\1\107\1\110\1\111\12\0\1\101\1\111\6\0\1\107"+
    "\1\0\1\107\40\0\1\u0119\1\100\1\101\2\0\3\u0119"+
    "\1\0\1\107\1\110\1\111\12\0\1\101\1\111\6\0"+
    "\1\107\1\0\1\107\40\0\1\u011a\1\0\1\101\3\0"+
    "\1\u011a\17\0\1\101\52\0\2\u011b\1\101\1\0\6\u011b"+
    "\1\0\1\u011b\3\0\2\u011b\3\0\1\u011b\1\0\1\101"+
    "\1\u011b\6\0\1\u011b\1\0\1\u011b\40\0\1\u011c\1\100"+
    "\1\101\2\0\3\u011c\1\0\1\107\1\110\1\111\12\0"+
    "\1\101\1\111\6\0\1\107\1\0\1\107\40\0\1\u011d"+
    "\1\100\1\101\2\0\3\u011d\1\0\1\107\1\110\1\111"+
    "\12\0\1\101\1\111\6\0\1\107\1\0\1\107\40\0"+
    "\1\u011e\1\0\1\101\3\0\1\u011e\17\0\1\101\52\0"+
    "\2\u011f\1\101\1\0\6\u011f\1\0\1\u011f\3\0\2\u011f"+
    "\3\0\1\u011f\1\0\1\101\1\u011f\6\0\1\u011f\1\0"+
    "\1\u011f\40\0\1\u0120\1\100\1\101\2\0\3\u0120\1\0"+
    "\1\107\1\110\1\111\12\0\1\101\1\111\6\0\1\107"+
    "\1\0\1\107\40\0\1\u0121\1\0\1\101\3\0\1\u0121"+
    "\17\0\1\101\54\0\1\101\23\0\1\101\52\0\1\u0122"+
    "\1\100\1\101\2\0\3\u0122\1\0\1\107\1\110\1\111"+
    "\12\0\1\101\1\111\6\0\1\107\1\0\1\107\40\0"+
    "\1\u0123\1\0\1\101\3\0\1\u0123\17\0\1\101\52\0"+
    "\1\u0124\1\100\1\101\2\0\3\u0124\1\0\1\107\1\110"+
    "\1\111\12\0\1\101\1\111\6\0\1\107\1\0\1\107"+
    "\40\0\1\u0125\1\0\1\101\3\0\1\u0125\17\0\1\101"+
    "\52\0\1\u0126\1\100\1\101\2\0\3\u0126\1\0\1\107"+
    "\1\110\1\111\12\0\1\101\1\111\6\0\1\107\1\0"+
    "\1\107\40\0\1\u0127\1\0\1\101\3\0\1\u0127\17\0"+
    "\1\101\52\0\1\u0128\1\100\1\101\2\0\3\u0128\1\0"+
    "\1\107\1\110\1\111\12\0\1\101\1\111\6\0\1\107"+
    "\1\0\1\107\40\0\1\u0129\1\0\1\101\3\0\1\u0129"+
    "\17\0\1\101\52\0\2\100\1\101\2\0\3\100\1\0"+
    "\1\107\1\110\1\111\12\0\1\101\1\111\6\0\1\107"+
    "\1\0\1\107\40\0\1\u012a\1\0\1\101\3\0\1\u012a"+
    "\17\0\1\101\52\0\1\u012b\1\0\1\101\3\0\1\u012b"+
    "\17\0\1\101\52\0\1\u012c\1\0\1\101\3\0\1\u012c"+
    "\17\0\1\101\52\0\1\u012d\1\0\1\101\3\0\1\u012d"+
    "\17\0\1\101\52\0\1\u012e\1\0\1\101\3\0\1\u012e"+
    "\17\0\1\101\52\0\1\u012f\1\0\1\101\3\0\1\u012f"+
    "\17\0\1\101\52\0\1\u0130\1\0\1\101\3\0\1\u0130"+
    "\17\0\1\101\52\0\1\u0131\1\0\1\101\3\0\1\u0131"+
    "\17\0\1\101\52\0\1\u0132\1\0\1\101\3\0\1\u0132"+
    "\17\0\1\101\52\0\1\u0133\1\0\1\101\3\0\1\u0133"+
    "\17\0\1\101\52\0\1\u0134\1\0\1\101\3\0\1\u0134"+
    "\17\0\1\101\52\0\1\u0135\1\0\1\101\3\0\1\u0135"+
    "\17\0\1\101\52\0\1\u0136\1\0\1\101\3\0\1\u0136"+
    "\17\0\1\101\52\0\1\u0137\1\0\1\101\3\0\1\u0137"+
    "\17\0\1\101\52\0\1\u0138\1\0\1\101\3\0\1\u0138"+
    "\17\0\1\101\52\0\1\u0139\1\0\1\101\3\0\1\u0139"+
    "\17\0\1\101\52\0\1\u013a\1\0\1\101\3\0\1\u013a"+
    "\17\0\1\101\52\0\1\u013b\1\0\1\101\3\0\1\u013b"+
    "\17\0\1\101\52\0\1\u013c\1\0\1\101\3\0\1\u013c"+
    "\17\0\1\101\52\0\1\u013d\1\0\1\101\3\0\1\u013d"+
    "\17\0\1\101\52\0\1\u013e\1\0\1\101\3\0\1\u013e"+
    "\17\0\1\101\52\0\1\u013f\1\0\1\101\3\0\1\u013f"+
    "\17\0\1\101\52\0\1\u0140\1\0\1\101\3\0\1\u0140"+
    "\17\0\1\101\52\0\1\u0141\1\0\1\101\3\0\1\u0141"+
    "\17\0\1\101\52\0\1\u0142\1\0\1\101\3\0\1\u0142"+
    "\17\0\1\101\52\0\1\u0143\1\0\1\101\3\0\1\u0143"+
    "\17\0\1\101\52\0\1\u0144\1\0\1\101\3\0\1\u0144"+
    "\17\0\1\101\52\0\1\u0145\1\0\1\101\3\0\1\u0145"+
    "\17\0\1\101\52\0\1\u0146\1\0\1\101\3\0\1\u0146"+
    "\17\0\1\101\52\0\1\u0147\1\0\1\101\3\0\1\u0147"+
    "\17\0\1\101\52\0\1\u0148\1\0\1\101\3\0\1\u0148"+
    "\17\0\1\101\52\0\1\u0149\1\0\1\101\3\0\1\u0149"+
    "\17\0\1\101\52\0\1\u014a\1\0\1\101\3\0\1\u014a"+
    "\17\0\1\101\52\0\1\u014b\1\0\1\101\3\0\1\u014b"+
    "\17\0\1\101\52\0\1\u014c\1\0\1\101\3\0\1\u014c"+
    "\17\0\1\101\52\0\1\u014d\1\0\1\101\3\0\1\u014d"+
    "\17\0\1\101\52\0\1\u014e\1\0\1\101\3\0\1\u014e"+
    "\17\0\1\101\52\0\1\u014f\1\0\1\101\3\0\1\u014f"+
    "\17\0\1\101\52\0\1\u0150\1\0\1\101\3\0\1\u0150"+
    "\17\0\1\101\52\0\1\u0151\1\0\1\101\3\0\1\u0151"+
    "\17\0\1\101\52\0\1\u0152\1\0\1\101\3\0\1\u0152"+
    "\17\0\1\101\52\0\1\u0153\1\0\1\101\3\0\1\u0153"+
    "\17\0\1\101\52\0\1\u011f\1\0\1\101\3\0\1\u011f"+
    "\17\0\1\101\41\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20345];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\1\11\10\1\2\11\20\1\10\11"+
    "\2\1\1\11\4\1\1\11\2\1\1\11\3\1\1\11"+
    "\3\1\1\11\4\1\1\11\1\0\3\1\1\0\1\11"+
    "\1\1\1\0\46\1\3\11\7\1\1\0\210\1\1\0"+
    "\3\1\1\0\3\1\1\0\3\1\1\0\3\1\1\0"+
    "\3\1\1\0\3\1\1\0\3\1\1\0\25\1\37\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[339];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	public Token token(int type) {
		return new TokenImpl(type, yychar, yytext().length());
	}
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaTokenizer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2888) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return token(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return token(OTHER);
            }
          case 29: break;
          case 2: 
            { return token(WHITESPACE);
            }
          case 30: break;
          case 3: 
            { return token(OPERATOR);
            }
          case 31: break;
          case 4: 
            { return token(IDENTIFIER);
            }
          case 32: break;
          case 5: 
            { return token(INTEGER_LITERAL);
            }
          case 33: break;
          case 6: 
            { return token(DOT);
            }
          case 34: break;
          case 7: 
            { yybegin(STRING); return token(STRING_LITERAL);
            }
          case 35: break;
          case 8: 
            { yybegin(CHARLITERAL); return token(CHARACTER_LITERAL);
            }
          case 36: break;
          case 9: 
            { return token(LPAREN);
            }
          case 37: break;
          case 10: 
            { return token(RPAREN);
            }
          case 38: break;
          case 11: 
            { return token(LBRACE);
            }
          case 39: break;
          case 12: 
            { return token(RBRACE);
            }
          case 40: break;
          case 13: 
            { return token(LBRACK);
            }
          case 41: break;
          case 14: 
            { return token(RBRACK);
            }
          case 42: break;
          case 15: 
            { return token(SEMICOLON);
            }
          case 43: break;
          case 16: 
            { return token(COMMA);
            }
          case 44: break;
          case 17: 
            { return token(STRING_LITERAL);
            }
          case 45: break;
          case 18: 
            { yybegin(YYINITIAL); return token(STRING_LITERAL);
            }
          case 46: break;
          case 19: 
            { return token(CHARACTER_LITERAL);
            }
          case 47: break;
          case 20: 
            { yybegin(YYINITIAL); return token(CHARACTER_LITERAL);
            }
          case 48: break;
          case 21: 
            { return token(COMMENT_MULTI);
            }
          case 49: break;
          case 22: 
            { return token(COMMENT_EOL);
            }
          case 50: break;
          case 23: 
            { yybegin(COMMENT); return token(COMMENT_MULTI);
            }
          case 51: break;
          case 24: 
            { return token(ANNOTATION);
            }
          case 52: break;
          case 25: 
            { return token(FLOATING_POINT_LITERAL);
            }
          case 53: break;
          case 26: 
            { return token(KEYWORD);
            }
          case 54: break;
          case 27: 
            { yybegin(YYINITIAL); return token(COMMENT_MULTI);
            }
          case 55: break;
          case 28: 
            { return token(BOOLEAN_LITERAL);
            }
          case 56: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
