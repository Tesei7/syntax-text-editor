/* The following code was generated by JFlex 1.6.1 */

package ru.tesei7.textEditor.editor.syntax;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Ilya/git/syntax-text-editor/textEditor/src/main/jflex/ru/tesei7/textEditor/editor/syntax/java.jflex</tt>
 */
public class JavaTokenizer implements TokenTypes, Tokenizer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;
  public static final int COMMENT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\73"+
    "\1\26\1\0\1\6\1\73\1\75\1\27\1\60\1\61\1\5\1\77"+
    "\1\67\1\25\1\23\1\4\1\11\1\17\1\100\1\16\1\101\1\20"+
    "\1\104\1\102\1\103\1\12\1\74\1\66\1\72\1\70\1\71\1\74"+
    "\1\10\1\15\1\21\1\15\1\22\1\24\1\22\5\6\1\13\13\6"+
    "\1\14\2\6\1\64\1\105\1\65\1\73\1\6\1\0\1\30\1\31"+
    "\1\35\1\47\1\40\1\51\1\54\1\44\1\45\1\6\1\42\1\37"+
    "\1\52\1\41\1\36\1\53\1\6\1\34\1\32\1\33\1\46\1\55"+
    "\1\56\1\50\1\43\1\57\1\62\1\76\1\63\1\74\6\7\1\7"+
    "\32\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0"+
    "\1\6\5\0\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6\16\0"+
    "\5\6\7\0\1\6\1\0\1\6\21\0\160\7\5\6\1\0\2\6"+
    "\2\0\4\6\10\0\1\6\1\0\3\6\1\0\1\6\1\0\24\6"+
    "\1\0\123\6\1\0\213\6\1\0\5\7\2\0\236\6\11\0\46\6"+
    "\2\0\1\6\7\0\47\6\7\0\1\6\1\0\55\7\1\0\1\7"+
    "\1\0\2\7\1\0\2\7\1\0\1\7\10\0\33\6\5\0\3\6"+
    "\15\0\5\7\6\0\1\6\4\0\13\7\5\0\53\6\37\7\4\0"+
    "\2\6\1\7\143\6\1\0\1\6\10\7\1\0\6\7\2\6\2\7"+
    "\1\0\4\7\2\6\12\7\3\6\2\0\1\6\17\0\1\7\1\6"+
    "\1\7\36\6\33\7\2\0\131\6\13\7\1\6\16\0\12\7\41\6"+
    "\11\7\2\6\4\0\1\6\5\0\26\6\4\7\1\6\11\7\1\6"+
    "\3\7\1\6\5\7\22\0\31\6\3\7\104\0\1\6\1\0\13\6"+
    "\67\0\33\7\1\0\4\7\66\6\3\7\1\6\22\7\1\6\7\7"+
    "\12\6\2\7\2\0\12\7\1\0\7\6\1\0\7\6\1\0\3\7"+
    "\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\1\6"+
    "\3\0\4\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7"+
    "\1\6\10\0\1\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7"+
    "\4\6\7\0\1\6\5\0\3\7\1\0\6\6\4\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0"+
    "\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0\1\7\7\0"+
    "\4\6\1\0\1\6\7\0\14\7\3\6\1\7\13\0\3\7\1\0"+
    "\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6\1\0"+
    "\5\6\2\0\1\7\1\6\10\7\1\0\3\7\1\0\3\7\2\0"+
    "\1\6\17\0\2\6\2\7\2\0\12\7\1\0\1\6\17\0\3\7"+
    "\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6"+
    "\1\0\5\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7"+
    "\10\0\2\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7\1\0"+
    "\1\6\20\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6"+
    "\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6"+
    "\3\0\14\6\4\0\5\7\3\0\3\7\1\0\4\7\2\0\1\6"+
    "\6\0\1\7\16\0\12\7\11\0\1\6\7\0\3\7\1\0\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\3\0\1\6"+
    "\7\7\1\0\3\7\1\0\4\7\7\0\2\7\1\0\2\6\6\0"+
    "\2\6\2\7\2\0\12\7\22\0\2\7\1\0\10\6\1\0\3\6"+
    "\1\0\27\6\1\0\12\6\1\0\5\6\2\0\1\7\1\6\7\7"+
    "\1\0\3\7\1\0\4\7\7\0\2\7\7\0\1\6\1\0\2\6"+
    "\2\7\2\0\12\7\1\0\2\6\17\0\2\7\1\0\10\6\1\0"+
    "\3\6\1\0\51\6\2\0\1\6\7\7\1\0\3\7\1\0\4\7"+
    "\1\6\10\0\1\7\10\0\2\6\2\7\2\0\12\7\12\0\6\6"+
    "\2\0\2\7\1\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6"+
    "\2\0\7\6\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7"+
    "\22\0\2\7\15\0\60\6\1\7\2\6\7\7\4\0\10\6\10\7"+
    "\1\0\12\7\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6"+
    "\2\0\1\6\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6"+
    "\1\0\1\6\2\0\2\6\1\0\4\6\1\7\2\6\6\7\1\0"+
    "\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0\12\7"+
    "\2\0\4\6\40\0\1\6\27\0\2\7\6\0\12\7\13\0\1\7"+
    "\1\0\1\7\1\0\1\7\4\0\2\7\10\6\1\0\44\6\4\0"+
    "\24\7\1\0\2\7\5\6\13\7\1\0\44\7\11\0\1\7\71\0"+
    "\53\6\24\7\1\6\12\7\6\0\6\6\4\7\4\6\3\7\1\6"+
    "\3\7\2\6\7\7\3\6\4\7\15\6\14\7\1\6\17\7\2\0"+
    "\46\6\1\0\1\6\5\0\1\6\2\0\53\6\1\0\u014d\6\1\0"+
    "\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\51\6\1\0"+
    "\4\6\2\0\41\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0"+
    "\4\6\2\0\17\6\1\0\71\6\1\0\4\6\2\0\103\6\2\0"+
    "\3\7\40\0\20\6\20\0\125\6\14\0\u026c\6\2\0\21\6\1\0"+
    "\32\6\5\0\113\6\3\0\3\6\17\0\15\6\1\0\4\6\3\7"+
    "\13\0\22\6\3\7\13\0\22\6\2\7\14\0\15\6\1\0\3\6"+
    "\1\0\2\7\14\0\64\6\40\7\3\0\1\6\3\0\2\6\1\7"+
    "\2\0\12\7\41\0\3\7\2\0\12\7\6\0\130\6\10\0\51\6"+
    "\1\7\1\6\5\0\106\6\12\0\35\6\3\0\14\7\4\0\14\7"+
    "\12\0\12\7\36\6\2\0\5\6\13\0\54\6\4\0\21\7\7\6"+
    "\2\7\6\0\12\7\46\0\27\6\5\7\4\0\65\6\12\7\1\0"+
    "\35\7\2\0\13\7\6\0\12\7\15\0\1\6\130\0\5\7\57\6"+
    "\21\7\7\6\4\0\12\7\21\0\11\7\14\0\3\7\36\6\15\7"+
    "\2\6\12\7\54\6\16\7\14\0\44\6\24\7\10\0\12\7\3\0"+
    "\3\6\12\7\44\6\122\0\3\7\1\0\25\7\4\6\1\7\4\6"+
    "\3\7\2\6\11\0\300\6\47\7\25\0\4\7\u0116\6\2\0\6\6"+
    "\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6\1\0\1\6"+
    "\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6\4\0\15\6"+
    "\5\0\3\6\1\0\7\6\16\0\5\7\30\0\1\0\1\0\5\7"+
    "\20\0\2\6\23\0\1\6\13\0\5\7\5\0\6\7\1\0\1\6"+
    "\15\0\1\6\20\0\15\6\3\0\33\6\25\0\15\7\4\0\1\7"+
    "\3\0\14\7\21\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6"+
    "\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\1\0\13\6\2\0\4\6\5\0\5\6\4\0\1\6\21\0\51\6"+
    "\u0a77\0\57\6\1\0\57\6\1\0\205\6\6\0\4\6\3\7\2\6"+
    "\14\0\46\6\1\0\1\6\5\0\1\6\2\0\70\6\7\0\1\6"+
    "\17\0\1\7\27\6\11\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\40\7\57\0\1\6\u01d5\0\3\6\31\0\11\6\6\7\1\0\5\6"+
    "\2\0\5\6\4\0\126\6\2\0\2\7\2\0\3\6\1\0\132\6"+
    "\1\0\4\6\5\0\51\6\3\0\136\6\21\0\33\6\65\0\20\6"+
    "\u0200\0\u19b6\6\112\0\u51cd\6\63\0\u048d\6\103\0\56\6\2\0\u010d\6"+
    "\3\0\20\6\12\7\2\6\24\0\57\6\1\7\4\0\12\7\1\0"+
    "\31\6\7\0\1\7\120\6\2\7\45\0\11\6\2\0\147\6\2\0"+
    "\4\6\1\0\4\6\14\0\13\6\115\0\12\6\1\7\3\6\1\7"+
    "\4\6\1\7\27\6\5\7\20\0\1\6\7\0\64\6\14\0\2\7"+
    "\62\6\21\7\13\0\12\7\6\0\22\7\6\6\3\0\1\6\4\0"+
    "\12\7\34\6\10\7\2\0\27\6\15\7\14\0\35\6\3\0\4\7"+
    "\57\6\16\7\16\0\1\6\12\7\46\0\51\6\16\7\11\0\3\6"+
    "\1\7\10\6\2\7\2\0\12\7\6\0\27\6\3\0\1\6\1\7"+
    "\4\0\60\6\1\7\1\6\3\7\2\6\2\7\5\6\2\7\1\6"+
    "\1\7\1\6\30\0\3\6\2\0\13\6\5\7\2\0\3\6\2\7"+
    "\12\0\6\6\2\0\6\6\2\0\6\6\11\0\7\6\1\0\7\6"+
    "\221\0\43\6\10\7\1\0\2\7\2\0\12\7\6\0\u2ba4\6\14\0"+
    "\27\6\4\0\61\6\u2104\0\u016e\6\2\0\152\6\46\0\7\6\14\0"+
    "\5\6\5\0\1\6\1\7\12\6\1\0\15\6\1\0\5\6\1\0"+
    "\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0"+
    "\100\6\2\0\66\6\50\0\15\6\3\0\20\7\20\0\7\7\14\0"+
    "\2\6\30\0\3\6\31\0\1\6\6\0\5\6\1\0\207\6\2\0"+
    "\1\7\4\0\1\6\13\0\12\7\7\0\32\6\4\0\1\6\1\0"+
    "\32\6\13\0\131\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0"+
    "\3\6\3\0\2\6\3\0\2\6\22\0\3\7\4\0\14\6\1\0"+
    "\32\6\1\0\23\6\1\0\2\6\1\0\17\6\2\0\16\6\42\0"+
    "\173\6\105\0\65\6\210\0\1\7\202\0\35\6\3\0\61\6\57\0"+
    "\37\6\21\0\33\6\65\0\36\6\2\0\44\6\4\0\10\6\1\0"+
    "\5\6\52\0\236\6\2\0\12\7\u0356\0\6\6\2\0\1\6\1\0"+
    "\54\6\1\0\2\6\3\0\1\6\2\0\27\6\252\0\26\6\12\0"+
    "\32\6\106\0\70\6\6\0\2\6\100\0\1\6\3\7\1\0\2\7"+
    "\5\0\4\7\4\6\1\0\3\6\1\0\33\6\4\0\3\7\4\0"+
    "\1\7\40\0\35\6\203\0\66\6\12\0\26\6\12\0\23\6\215\0"+
    "\111\6\u03b7\0\3\7\65\6\17\7\37\0\12\7\20\0\3\7\55\6"+
    "\13\7\2\0\1\7\22\0\31\6\7\0\12\7\6\0\3\7\44\6"+
    "\16\7\1\0\12\7\100\0\3\7\60\6\16\7\4\6\13\0\12\7"+
    "\u04a6\0\53\6\15\7\10\0\12\7\u0936\0\u036f\6\221\0\143\6\u0b9d\0"+
    "\u042f\6\u33d1\0\u0239\6\u04c7\0\105\6\13\0\1\6\56\7\20\0\4\7"+
    "\15\6\u4060\0\2\6\u2163\0\5\7\3\0\26\7\2\0\7\7\36\0"+
    "\4\7\224\0\3\7\u01bb\0\125\6\1\0\107\6\1\0\2\6\2\0"+
    "\1\6\2\0\2\6\2\0\4\6\1\0\14\6\1\0\1\6\1\0"+
    "\7\6\1\0\101\6\1\0\4\6\2\0\10\6\1\0\7\6\1\0"+
    "\34\6\1\0\4\6\1\0\5\6\1\0\1\6\3\0\7\6\1\0"+
    "\u0154\6\2\0\31\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0"+
    "\37\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0"+
    "\31\6\1\0\10\6\2\0\62\7\u1600\0\4\6\1\0\33\6\1\0"+
    "\2\6\1\0\1\6\2\0\1\6\1\0\12\6\1\0\4\6\1\0"+
    "\1\6\1\0\1\6\6\0\1\6\4\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\3\6\1\0\2\6\1\0\1\6\2\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\2\6\1\0"+
    "\1\6\2\0\4\6\1\0\7\6\1\0\4\6\1\0\4\6\1\0"+
    "\1\6\1\0\12\6\1\0\21\6\5\0\3\6\1\0\5\6\1\0"+
    "\21\6\u1144\0\ua6d7\6\51\0\u1035\6\13\0\336\6\u3fe2\0\u021e\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\7\36\0\140\7\200\0\360\7\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\2\3\1\4\1\1\2\5\1\6"+
    "\1\3\1\7\1\10\20\4\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\6\3\1\21\2\22\1\23"+
    "\1\21\1\24\1\25\1\24\5\26\1\27\1\30\2\31"+
    "\1\5\1\32\1\5\1\0\3\5\1\0\2\32\2\0"+
    "\27\4\1\33\1\4\1\33\13\4\1\3\1\21\1\24"+
    "\1\34\2\27\1\31\5\5\1\32\2\0\27\4\1\33"+
    "\16\4\1\31\4\5\1\0\10\4\1\35\17\4\1\31"+
    "\4\5\1\0\6\4\1\33\7\4\1\33\2\4\1\31"+
    "\4\5\1\0\12\4\1\31\4\5\1\0\7\4\1\31"+
    "\4\5\1\0\3\4\1\31\4\5\1\0\2\4\1\33"+
    "\4\5\2\0\3\5\1\0\3\5\1\0\3\5\1\0"+
    "\3\5\1\0\3\5\1\0\3\5\1\0\1\5\1\32"+
    "\1\5\1\0\1\32\1\5\1\32\1\5\1\32\1\5"+
    "\1\32\1\5\1\32\14\5\37\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[352];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u0118\0\u01a4"+
    "\0\u01ea\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\u0118"+
    "\0\u0118\0\u03d4\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578"+
    "\0\u05be\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8"+
    "\0\u07ee\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118"+
    "\0\u0118\0\u0834\0\u087a\0\u0118\0\u08c0\0\u0906\0\u094c\0\u0992"+
    "\0\u09d8\0\u0118\0\u0118\0\u0a1e\0\u0a64\0\u0118\0\u0aaa\0\u0af0"+
    "\0\u0b36\0\u0118\0\u0b7c\0\u0bc2\0\u0c08\0\u0118\0\u0c4e\0\u0c94"+
    "\0\u0cda\0\u0d20\0\u0118\0\u0d66\0\u0dac\0\u0df2\0\u0e38\0\u0e7e"+
    "\0\u0118\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc\0\u1022\0\u1068"+
    "\0\u10ae\0\u10f4\0\u113a\0\u1180\0\u11c6\0\u120c\0\u1252\0\u1298"+
    "\0\u12de\0\u1324\0\u136a\0\u13b0\0\u13f6\0\u143c\0\u1482\0\u14c8"+
    "\0\u150e\0\u1554\0\u159a\0\u0230\0\u15e0\0\u1626\0\u166c\0\u16b2"+
    "\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u1810\0\u1856\0\u189c\0\u18e2"+
    "\0\u1928\0\u196e\0\u0118\0\u0118\0\u0118\0\u19b4\0\u0118\0\u19fa"+
    "\0\u1a40\0\u1a86\0\u1acc\0\u1b12\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a"+
    "\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88\0\u1dce\0\u1e14\0\u1e5a"+
    "\0\u1ea0\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe\0\u2044\0\u208a"+
    "\0\u20d0\0\u2116\0\u215c\0\u21a2\0\u21e8\0\u222e\0\u2274\0\u22ba"+
    "\0\u2300\0\u2346\0\u238c\0\u23d2\0\u2418\0\u245e\0\u24a4\0\u24ea"+
    "\0\u2530\0\u2576\0\u25bc\0\u2602\0\u2648\0\u268e\0\u26d4\0\u271a"+
    "\0\u2760\0\u27a6\0\u27ec\0\u2832\0\u2878\0\u28be\0\u2904\0\u294a"+
    "\0\u2990\0\u29d6\0\u2a1c\0\u2a62\0\u0230\0\u2aa8\0\u2aee\0\u2b34"+
    "\0\u2b7a\0\u2bc0\0\u2c06\0\u2c4c\0\u2c92\0\u2cd8\0\u2d1e\0\u2d64"+
    "\0\u2daa\0\u2df0\0\u2e36\0\u2e7c\0\u2ec2\0\u2f08\0\u2f4e\0\u2f94"+
    "\0\u2fda\0\u3020\0\u3066\0\u30ac\0\u30f2\0\u3138\0\u317e\0\u31c4"+
    "\0\u1ffe\0\u320a\0\u3250\0\u3296\0\u32dc\0\u3322\0\u3368\0\u33ae"+
    "\0\u33f4\0\u343a\0\u3480\0\u34c6\0\u350c\0\u3552\0\u3598\0\u35de"+
    "\0\u3624\0\u366a\0\u36b0\0\u36f6\0\u373c\0\u3782\0\u37c8\0\u380e"+
    "\0\u3854\0\u389a\0\u38e0\0\u3926\0\u396c\0\u39b2\0\u39f8\0\u3a3e"+
    "\0\u3a84\0\u3aca\0\u3b10\0\u3b56\0\u3b9c\0\u3be2\0\u3c28\0\u3c6e"+
    "\0\u3cb4\0\u3cfa\0\u3d40\0\u3d86\0\u3dcc\0\u3e12\0\u3e58\0\u3e9e"+
    "\0\u3ee4\0\u3f2a\0\u3f70\0\u3fb6\0\u3ffc\0\u4042\0\u4088\0\u40ce"+
    "\0\u4114\0\u0c4e\0\u415a\0\u41a0\0\u41e6\0\u422c\0\u4272\0\u42b8"+
    "\0\u42fe\0\u4344\0\u438a\0\u43d0\0\u4416\0\u445c\0\u44a2\0\u44e8"+
    "\0\u452e\0\u4574\0\u45ba\0\u4600\0\u4646\0\u468c\0\u46d2\0\u4718"+
    "\0\u475e\0\u47a4\0\u47ea\0\u4830\0\u4876\0\u48bc\0\u4902\0\u4948"+
    "\0\u498e\0\u498e\0\u49d4\0\u4a1a\0\u4a60\0\u4aa6\0\u4aec\0\u4b32"+
    "\0\u4b78\0\u4bbe\0\u4c04\0\u4c4a\0\u4c90\0\u4cd6\0\u4d1c\0\u4d62"+
    "\0\u4da8\0\u4dee\0\u4e34\0\u4e7a\0\u4ec0\0\u4f06\0\u4f4c\0\u4f92"+
    "\0\u4fd8\0\u501e\0\u5064\0\u50aa\0\u50f0\0\u5136\0\u517c\0\u51c2"+
    "\0\u5208\0\u524e\0\u5294\0\u52da\0\u5320\0\u5366\0\u53ac\0\u53f2"+
    "\0\u5438\0\u547e\0\u54c4\0\u550a\0\u5550\0\u5596\0\u55dc\0\u5622"+
    "\0\u5668\0\u56ae\0\u56f4\0\u573a\0\u5780\0\u57c6\0\u580c\0\u5852";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[352];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\2\7\1\10\1\11\1\12\1\5\1\13"+
    "\1\14\1\15\3\12\3\15\2\12\1\16\1\12\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\12\1\30\1\31\1\32\3\12\1\33\1\12\1\34"+
    "\1\12\1\35\1\12\1\36\1\37\1\40\1\41\1\12"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\11\1\52\1\53\1\11\1\54\1\55\1\56\1\57"+
    "\5\15\1\5\1\60\1\61\1\62\23\60\1\63\56\60"+
    "\1\64\1\65\1\61\1\62\24\65\1\66\55\65\1\67"+
    "\1\70\1\71\1\72\2\70\1\73\77\70\1\74\110\0"+
    "\1\7\107\0\1\75\1\76\62\0\1\54\105\0\1\54"+
    "\23\0\2\12\1\0\12\12\1\0\1\12\3\0\30\12"+
    "\20\0\5\12\7\0\1\77\4\0\3\77\3\0\2\77"+
    "\1\0\1\77\3\0\15\77\1\100\12\77\37\0\1\101"+
    "\1\102\1\103\1\104\1\0\1\105\1\106\1\107\1\110"+
    "\1\111\1\112\1\113\4\0\1\110\5\0\1\103\1\113"+
    "\6\0\1\111\1\104\1\111\26\0\1\105\2\107\1\102"+
    "\1\107\12\0\2\15\1\103\2\0\3\15\1\0\1\111"+
    "\1\112\1\113\12\0\1\103\1\113\6\0\1\111\1\0"+
    "\1\111\26\0\5\15\12\0\2\112\3\0\3\112\57\0"+
    "\5\112\26\0\1\54\42\0\2\54\6\0\1\114\13\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\1\12\1\115"+
    "\26\12\20\0\5\12\7\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\4\12\1\116\1\12\1\117\4\12\1\120"+
    "\14\12\20\0\5\12\7\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\3\12\1\121\7\12\1\122\1\123\1\12"+
    "\1\124\7\12\1\125\1\12\20\0\5\12\7\0\2\12"+
    "\1\0\12\12\1\0\1\12\3\0\4\12\1\126\7\12"+
    "\1\127\13\12\20\0\5\12\7\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\10\12\1\130\17\12\20\0\5\12"+
    "\7\0\2\12\1\0\12\12\1\0\1\12\3\0\1\131"+
    "\5\12\1\132\1\133\4\12\1\134\13\12\20\0\5\12"+
    "\7\0\2\12\1\0\12\12\1\0\1\12\3\0\6\12"+
    "\1\135\21\12\20\0\5\12\7\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\7\12\1\136\10\12\1\137\7\12"+
    "\20\0\5\12\7\0\2\12\1\0\12\12\1\0\1\12"+
    "\3\0\1\140\7\12\1\141\5\12\1\142\11\12\20\0"+
    "\5\12\7\0\2\12\1\0\12\12\1\0\1\12\3\0"+
    "\11\12\1\143\7\12\1\144\1\145\5\12\20\0\5\12"+
    "\7\0\2\12\1\0\12\12\1\0\1\12\3\0\6\12"+
    "\1\146\1\12\1\147\17\12\20\0\5\12\7\0\2\12"+
    "\1\0\12\12\1\0\1\12\3\0\1\150\5\12\1\151"+
    "\1\152\5\12\1\153\12\12\20\0\5\12\7\0\2\12"+
    "\1\0\12\12\1\0\1\12\3\0\1\154\3\12\1\155"+
    "\11\12\1\156\11\12\20\0\5\12\7\0\2\12\1\0"+
    "\12\12\1\0\1\12\3\0\6\12\1\157\21\12\20\0"+
    "\5\12\7\0\2\12\1\0\12\12\1\0\1\12\3\0"+
    "\6\12\1\160\21\12\20\0\5\12\7\0\2\12\1\0"+
    "\12\12\1\0\1\12\3\0\14\12\1\161\13\12\20\0"+
    "\5\12\71\0\1\54\1\162\104\0\1\54\1\0\1\11"+
    "\103\0\1\54\4\0\1\54\100\0\1\54\5\0\1\54"+
    "\77\0\1\54\6\0\1\54\6\0\1\60\2\0\23\60"+
    "\1\0\57\60\2\0\1\62\103\0\1\60\2\0\23\60"+
    "\1\163\57\60\1\65\2\0\24\65\1\0\57\65\2\0"+
    "\24\65\1\164\56\65\1\70\2\0\2\70\1\0\100\70"+
    "\2\0\1\72\107\0\1\165\101\0\1\70\2\0\2\70"+
    "\1\5\100\70\1\75\1\166\1\167\103\75\6\0\2\77"+
    "\1\0\12\77\1\0\1\77\3\0\30\77\20\0\5\77"+
    "\7\0\2\77\1\0\12\77\1\0\1\77\3\0\11\77"+
    "\1\170\16\77\20\0\5\77\12\0\1\101\1\102\1\103"+
    "\2\0\1\105\1\106\1\107\1\0\1\111\1\112\1\113"+
    "\12\0\1\103\1\113\6\0\1\111\1\0\1\111\26\0"+
    "\1\105\2\107\1\102\1\107\12\0\2\102\3\0\3\102"+
    "\1\0\1\111\1\112\1\113\13\0\1\113\6\0\1\111"+
    "\1\0\1\111\26\0\5\102\12\0\1\171\1\172\2\0"+
    "\6\172\1\0\1\172\3\0\2\172\3\0\1\172\2\0"+
    "\1\172\6\0\1\172\1\0\1\172\26\0\5\172\12\0"+
    "\1\173\1\102\1\103\2\0\3\173\1\0\1\111\1\112"+
    "\1\113\12\0\1\103\1\113\6\0\1\111\1\0\1\111"+
    "\26\0\3\173\1\102\1\173\12\0\1\107\1\102\1\103"+
    "\2\0\3\107\1\0\1\111\1\112\1\113\12\0\1\103"+
    "\1\113\6\0\1\111\1\0\1\111\26\0\3\107\1\102"+
    "\1\107\12\0\1\174\1\102\1\103\2\0\3\174\1\0"+
    "\1\111\1\112\1\113\12\0\1\103\1\113\6\0\1\111"+
    "\1\0\1\111\26\0\3\174\1\102\1\174\12\0\1\175"+
    "\5\0\1\175\77\0\2\112\3\0\3\112\1\0\1\111"+
    "\1\0\1\113\13\0\1\113\6\0\1\111\1\0\1\111"+
    "\26\0\5\112\12\0\2\176\3\0\3\176\4\0\1\177"+
    "\51\0\1\177\5\176\20\0\1\200\74\0\2\12\1\0"+
    "\12\12\1\0\1\12\3\0\2\12\1\201\25\12\20\0"+
    "\5\12\7\0\2\12\1\0\12\12\1\0\1\12\3\0"+
    "\10\12\1\202\17\12\20\0\5\12\7\0\2\12\1\0"+
    "\12\12\1\0\1\12\3\0\6\12\1\203\21\12\20\0"+
    "\5\12\7\0\2\12\1\0\12\12\1\0\1\12\3\0"+
    "\3\12\1\204\24\12\20\0\5\12\7\0\2\12\1\0"+
    "\12\12\1\0\1\12\3\0\1\205\3\12\1\206\23\12"+
    "\20\0\5\12\7\0\2\12\1\0\12\12\1\0\1\12"+
    "\3\0\11\12\1\207\16\12\20\0\5\12\7\0\2\12"+
    "\1\0\12\12\1\0\1\12\3\0\6\12\1\210\21\12"+
    "\20\0\5\12\7\0\2\12\1\0\12\12\1\0\1\12"+
    "\3\0\23\12\1\211\4\12\20\0\5\12\7\0\2\12"+
    "\1\0\12\12\1\0\1\12\3\0\15\12\1\212\12\12"+
    "\20\0\5\12\7\0\2\12\1\0\12\12\1\0\1\12"+
    "\3\0\1\213\12\12\1\144\2\12\1\214\11\12\20\0"+
    "\5\12\7\0\2\12\1\0\12\12\1\0\1\12\3\0"+
    "\4\12\1\215\10\12\1\216\12\12\20\0\5\12\7\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\3\12\1\217"+
    "\24\12\20\0\5\12\7\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\2\12\1\204\1\220\24\12\20\0\5\12"+
    "\7\0\2\12\1\0\12\12\1\0\1\12\3\0\11\12"+
    "\1\221\16\12\20\0\5\12\7\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\1\222\27\12\20\0\5\12\7\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\1\151\27\12"+
    "\20\0\5\12\7\0\2\12\1\0\12\12\1\0\1\12"+
    "\3\0\11\12\1\223\16\12\20\0\5\12\7\0\2\12"+
    "\1\0\12\12\1\0\1\12\3\0\2\12\1\204\25\12"+
    "\20\0\5\12\7\0\2\12\1\0\12\12\1\0\1\12"+
    "\3\0\3\12\1\224\24\12\20\0\5\12\7\0\2\12"+
    "\1\0\12\12\1\0\1\12\3\0\3\12\1\225\24\12"+
    "\20\0\5\12\7\0\2\12\1\0\12\12\1\0\1\12"+
    "\3\0\26\12\1\144\1\12\20\0\5\12\7\0\2\12"+
    "\1\0\12\12\1\0\1\12\3\0\7\12\1\226\20\12"+
    "\20\0\5\12\7\0\2\12\1\0\12\12\1\0\1\12"+
    "\3\0\2\12\1\227\1\230\24\12\20\0\5\12\7\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\23\12\1\231"+
    "\4\12\20\0\5\12\7\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\16\12\1\232\11\12\20\0\5\12\7\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\21\12\1\233"+
    "\6\12\20\0\5\12\7\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\7\12\1\234\20\12\20\0\5\12\7\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\4\12\1\144"+
    "\23\12\20\0\5\12\7\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\6\12\1\235\21\12\20\0\5\12\7\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\11\12\1\236"+
    "\16\12\20\0\5\12\7\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\5\12\1\237\22\12\20\0\5\12\7\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\6\12\1\240"+
    "\6\12\1\241\12\12\20\0\5\12\7\0\2\12\1\0"+
    "\12\12\1\0\1\12\3\0\1\12\1\242\26\12\20\0"+
    "\5\12\7\0\2\12\1\0\12\12\1\0\1\12\3\0"+
    "\3\12\1\243\24\12\20\0\5\12\7\0\2\12\1\0"+
    "\12\12\1\0\1\12\3\0\7\12\1\244\5\12\1\245"+
    "\12\12\20\0\5\12\7\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\15\12\1\246\12\12\20\0\5\12\71\0"+
    "\1\54\1\11\16\0\1\167\111\0\2\77\1\0\12\77"+
    "\1\0\1\77\3\0\3\77\1\247\24\77\20\0\5\77"+
    "\12\0\1\171\1\172\1\103\1\0\6\172\1\0\1\172"+
    "\3\0\2\172\3\0\1\172\1\0\1\103\1\172\6\0"+
    "\1\172\1\0\1\172\26\0\5\172\12\0\2\250\1\103"+
    "\1\0\6\250\1\0\1\250\3\0\2\250\3\0\1\250"+
    "\1\0\1\103\1\250\6\0\1\250\1\0\1\250\26\0"+
    "\5\250\12\0\1\251\1\102\1\103\2\0\3\251\1\0"+
    "\1\111\1\112\1\113\12\0\1\103\1\113\6\0\1\111"+
    "\1\0\1\111\26\0\3\251\1\102\1\251\12\0\1\252"+
    "\1\102\1\103\2\0\3\252\1\0\1\111\1\112\1\113"+
    "\12\0\1\103\1\113\6\0\1\111\1\0\1\111\26\0"+
    "\3\252\1\102\1\252\12\0\1\253\1\0\1\103\3\0"+
    "\1\253\17\0\1\103\57\0\2\176\3\0\3\176\1\0"+
    "\1\111\24\0\1\111\1\0\1\111\26\0\5\176\12\0"+
    "\2\176\3\0\3\176\57\0\5\176\102\0\1\254\12\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\3\12\1\255"+
    "\24\12\20\0\5\12\7\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\1\256\27\12\20\0\5\12\7\0\2\12"+
    "\1\0\12\12\1\0\1\12\3\0\7\12\1\257\20\12"+
    "\20\0\5\12\7\0\2\12\1\0\12\12\1\0\1\12"+
    "\3\0\10\12\1\144\17\12\20\0\5\12\7\0\2\12"+
    "\1\0\12\12\1\0\1\12\3\0\3\12\1\260\24\12"+
    "\20\0\5\12\7\0\2\12\1\0\12\12\1\0\1\12"+
    "\3\0\15\12\1\261\12\12\20\0\5\12\7\0\2\12"+
    "\1\0\12\12\1\0\1\12\3\0\5\12\1\262\22\12"+
    "\20\0\5\12\7\0\2\12\1\0\12\12\1\0\1\12"+
    "\3\0\4\12\1\263\23\12\20\0\5\12\7\0\2\12"+
    "\1\0\12\12\1\0\1\12\3\0\10\12\1\151\17\12"+
    "\20\0\5\12\7\0\2\12\1\0\12\12\1\0\1\12"+
    "\3\0\3\12\1\220\24\12\20\0\5\12\7\0\2\12"+
    "\1\0\12\12\1\0\1\12\3\0\11\12\1\264\16\12"+
    "\20\0\5\12\7\0\2\12\1\0\12\12\1\0\1\12"+
    "\3\0\10\12\1\265\17\12\20\0\5\12\7\0\2\12"+
    "\1\0\12\12\1\0\1\12\3\0\6\12\1\266\21\12"+
    "\20\0\5\12\7\0\2\12\1\0\12\12\1\0\1\12"+
    "\3\0\2\12\1\144\25\12\20\0\5\12\7\0\2\12"+
    "\1\0\12\12\1\0\1\12\3\0\16\12\1\267\11\12"+
    "\20\0\5\12\7\0\2\12\1\0\12\12\1\0\1\12"+
    "\3\0\5\12\1\270\22\12\20\0\5\12\7\0\2\12"+
    "\1\0\12\12\1\0\1\12\3\0\2\12\1\263\1\271"+
    "\24\12\20\0\5\12\7\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\2\12\1\216\25\12\20\0\5\12\7\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\24\12\1\144"+
    "\3\12\20\0\5\12\7\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\10\12\1\272\17\12\20\0\5\12\7\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\15\12\1\273"+
    "\12\12\20\0\5\12\7\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\7\12\1\144\20\12\20\0\5\12\7\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\3\12\1\274"+
    "\24\12\20\0\5\12\7\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\10\12\1\275\17\12\20\0\5\12\7\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\6\12\1\210"+
    "\1\276\20\12\20\0\5\12\7\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\1\12\1\246\26\12\20\0\5\12"+
    "\7\0\2\12\1\0\12\12\1\0\1\12\3\0\1\277"+
    "\27\12\20\0\5\12\7\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\2\12\1\214\25\12\20\0\5\12\7\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\1\263\27\12"+
    "\20\0\5\12\7\0\2\12\1\0\12\12\1\0\1\12"+
    "\3\0\1\300\27\12\20\0\5\12\7\0\2\12\1\0"+
    "\12\12\1\0\1\12\3\0\12\12\1\301\15\12\20\0"+
    "\5\12\7\0\2\12\1\0\12\12\1\0\1\12\3\0"+
    "\3\12\1\302\24\12\20\0\5\12\7\0\2\12\1\0"+
    "\12\12\1\0\1\12\3\0\25\12\1\303\2\12\20\0"+
    "\5\12\7\0\2\12\1\0\12\12\1\0\1\12\3\0"+
    "\7\12\1\260\20\12\20\0\5\12\7\0\2\12\1\0"+
    "\12\12\1\0\1\12\3\0\6\12\1\144\21\12\20\0"+
    "\5\12\7\0\2\12\1\0\12\12\1\0\1\12\3\0"+
    "\1\304\27\12\20\0\5\12\7\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\17\12\1\144\10\12\20\0\5\12"+
    "\7\0\2\12\1\0\12\12\1\0\1\12\3\0\7\12"+
    "\1\204\20\12\20\0\5\12\7\0\2\77\1\0\12\77"+
    "\1\0\1\77\3\0\10\77\1\305\17\77\20\0\5\77"+
    "\12\0\2\306\1\103\1\0\6\306\1\0\1\306\3\0"+
    "\2\306\3\0\1\306\1\0\1\103\1\306\6\0\1\306"+
    "\1\0\1\306\26\0\5\306\12\0\1\307\1\102\1\103"+
    "\2\0\3\307\1\0\1\111\1\112\1\113\12\0\1\103"+
    "\1\113\6\0\1\111\1\0\1\111\26\0\3\307\1\102"+
    "\1\307\12\0\1\310\1\102\1\103\2\0\3\310\1\0"+
    "\1\111\1\112\1\113\12\0\1\103\1\113\6\0\1\111"+
    "\1\0\1\111\26\0\3\310\1\102\1\310\12\0\1\311"+
    "\1\0\1\103\3\0\1\311\17\0\1\103\150\0\1\312"+
    "\11\0\2\12\1\0\12\12\1\0\1\12\3\0\4\12"+
    "\1\313\23\12\20\0\5\12\7\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\12\12\1\144\15\12\20\0\5\12"+
    "\7\0\2\12\1\0\12\12\1\0\1\12\3\0\10\12"+
    "\1\314\17\12\20\0\5\12\7\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\15\12\1\315\12\12\20\0\5\12"+
    "\7\0\2\12\1\0\12\12\1\0\1\12\3\0\5\12"+
    "\1\316\22\12\20\0\5\12\7\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\14\12\1\317\13\12\20\0\5\12"+
    "\7\0\2\12\1\0\12\12\1\0\1\12\3\0\3\12"+
    "\1\144\24\12\20\0\5\12\7\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\2\12\1\320\25\12\20\0\5\12"+
    "\7\0\2\12\1\0\12\12\1\0\1\12\3\0\26\12"+
    "\1\321\1\12\20\0\5\12\7\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\4\12\1\322\23\12\20\0\5\12"+
    "\7\0\2\12\1\0\12\12\1\0\1\12\3\0\14\12"+
    "\1\144\13\12\20\0\5\12\7\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\15\12\1\323\12\12\20\0\5\12"+
    "\7\0\2\12\1\0\12\12\1\0\1\12\3\0\11\12"+
    "\1\324\16\12\20\0\5\12\7\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\25\12\1\204\2\12\20\0\5\12"+
    "\7\0\2\12\1\0\12\12\1\0\1\12\3\0\1\325"+
    "\27\12\20\0\5\12\7\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\4\12\1\326\23\12\20\0\5\12\7\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\10\12\1\327"+
    "\17\12\20\0\5\12\7\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\16\12\1\330\11\12\20\0\5\12\7\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\7\12\1\331"+
    "\20\12\20\0\5\12\7\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\1\332\27\12\20\0\5\12\7\0\2\12"+
    "\1\0\12\12\1\0\1\12\3\0\10\12\1\333\17\12"+
    "\20\0\5\12\7\0\2\12\1\0\12\12\1\0\1\12"+
    "\3\0\1\120\27\12\20\0\5\12\7\0\2\12\1\0"+
    "\12\12\1\0\1\12\3\0\3\12\1\161\24\12\20\0"+
    "\5\12\7\0\2\77\1\0\12\77\1\0\1\77\3\0"+
    "\4\77\1\334\23\77\20\0\5\77\12\0\2\335\1\103"+
    "\1\0\6\335\1\0\1\335\3\0\2\335\3\0\1\335"+
    "\1\0\1\103\1\335\6\0\1\335\1\0\1\335\26\0"+
    "\5\335\12\0\1\336\1\102\1\103\2\0\3\336\1\0"+
    "\1\111\1\112\1\113\12\0\1\103\1\113\6\0\1\111"+
    "\1\0\1\111\26\0\3\336\1\102\1\336\12\0\1\337"+
    "\1\102\1\103\2\0\3\337\1\0\1\111\1\112\1\113"+
    "\12\0\1\103\1\113\6\0\1\111\1\0\1\111\26\0"+
    "\3\337\1\102\1\337\12\0\1\340\1\0\1\103\3\0"+
    "\1\340\17\0\1\103\147\0\1\341\12\0\2\12\1\0"+
    "\12\12\1\0\1\12\3\0\1\342\27\12\20\0\5\12"+
    "\7\0\2\12\1\0\12\12\1\0\1\12\3\0\1\322"+
    "\27\12\20\0\5\12\7\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\5\12\1\144\22\12\20\0\5\12\7\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\3\12\1\343"+
    "\24\12\20\0\5\12\7\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\4\12\1\344\23\12\20\0\5\12\7\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\15\12\1\345"+
    "\12\12\20\0\5\12\7\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\11\12\1\144\16\12\20\0\5\12\7\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\11\12\1\346"+
    "\16\12\20\0\5\12\7\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\17\12\1\216\10\12\20\0\5\12\7\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\11\12\1\347"+
    "\16\12\20\0\5\12\7\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\21\12\1\350\6\12\20\0\5\12\7\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\22\12\1\351"+
    "\5\12\20\0\5\12\7\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\7\12\1\263\20\12\20\0\5\12\7\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\7\12\1\352"+
    "\20\12\20\0\5\12\7\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\24\12\1\204\3\12\20\0\5\12\7\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\5\12\1\353"+
    "\22\12\20\0\5\12\7\0\2\77\1\0\12\77\1\0"+
    "\1\77\3\0\21\77\1\354\6\77\20\0\5\77\12\0"+
    "\2\355\1\103\1\0\6\355\1\0\1\355\3\0\2\355"+
    "\3\0\1\355\1\0\1\103\1\355\6\0\1\355\1\0"+
    "\1\355\26\0\5\355\12\0\1\356\1\102\1\103\2\0"+
    "\3\356\1\0\1\111\1\112\1\113\12\0\1\103\1\113"+
    "\6\0\1\111\1\0\1\111\26\0\3\356\1\102\1\356"+
    "\12\0\1\357\1\102\1\103\2\0\3\357\1\0\1\111"+
    "\1\112\1\113\12\0\1\103\1\113\6\0\1\111\1\0"+
    "\1\111\26\0\3\357\1\102\1\357\12\0\1\360\1\0"+
    "\1\103\3\0\1\360\17\0\1\103\151\0\1\361\10\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\5\12\1\263"+
    "\22\12\20\0\5\12\7\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\21\12\1\362\6\12\20\0\5\12\7\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\6\12\1\363"+
    "\21\12\20\0\5\12\7\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\10\12\1\364\17\12\20\0\5\12\7\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\16\12\1\204"+
    "\11\12\20\0\5\12\7\0\2\12\1\0\12\12\1\0"+
    "\1\12\3\0\5\12\1\365\22\12\20\0\5\12\7\0"+
    "\2\12\1\0\12\12\1\0\1\12\3\0\1\366\27\12"+
    "\20\0\5\12\7\0\2\12\1\0\12\12\1\0\1\12"+
    "\3\0\10\12\1\367\17\12\20\0\5\12\7\0\2\12"+
    "\1\0\12\12\1\0\1\12\3\0\13\12\1\144\14\12"+
    "\20\0\5\12\7\0\2\12\1\0\12\12\1\0\1\12"+
    "\3\0\3\12\1\370\24\12\20\0\5\12\7\0\2\77"+
    "\1\0\12\77\1\0\1\77\3\0\1\371\27\77\20\0"+
    "\5\77\12\0\2\372\1\103\1\0\6\372\1\0\1\372"+
    "\3\0\2\372\3\0\1\372\1\0\1\103\1\372\6\0"+
    "\1\372\1\0\1\372\26\0\5\372\12\0\1\373\1\102"+
    "\1\103\2\0\3\373\1\0\1\111\1\112\1\113\12\0"+
    "\1\103\1\113\6\0\1\111\1\0\1\111\26\0\3\373"+
    "\1\102\1\373\12\0\1\374\1\102\1\103\2\0\3\374"+
    "\1\0\1\111\1\112\1\113\12\0\1\103\1\113\6\0"+
    "\1\111\1\0\1\111\26\0\3\374\1\102\1\374\12\0"+
    "\1\375\1\0\1\103\3\0\1\375\17\0\1\103\64\0"+
    "\1\376\75\0\2\12\1\0\12\12\1\0\1\12\3\0"+
    "\23\12\1\144\4\12\20\0\5\12\7\0\2\12\1\0"+
    "\12\12\1\0\1\12\3\0\11\12\1\377\16\12\20\0"+
    "\5\12\7\0\2\12\1\0\12\12\1\0\1\12\3\0"+
    "\11\12\1\263\16\12\20\0\5\12\7\0\2\12\1\0"+
    "\12\12\1\0\1\12\3\0\10\12\1\u0100\17\12\20\0"+
    "\5\12\7\0\2\12\1\0\12\12\1\0\1\12\3\0"+
    "\5\12\1\204\22\12\20\0\5\12\7\0\2\12\1\0"+
    "\12\12\1\0\1\12\3\0\11\12\1\u0101\16\12\20\0"+
    "\5\12\7\0\2\12\1\0\12\12\1\0\1\12\3\0"+
    "\10\12\1\245\17\12\20\0\5\12\7\0\2\77\1\0"+
    "\12\77\1\0\1\77\3\0\5\77\1\u0102\22\77\20\0"+
    "\5\77\12\0\2\u0103\1\103\1\0\6\u0103\1\0\1\u0103"+
    "\3\0\2\u0103\3\0\1\u0103\1\0\1\103\1\u0103\6\0"+
    "\1\u0103\1\0\1\u0103\26\0\5\u0103\12\0\1\u0104\1\102"+
    "\1\103\2\0\3\u0104\1\0\1\111\1\112\1\113\12\0"+
    "\1\103\1\113\6\0\1\111\1\0\1\111\26\0\3\u0104"+
    "\1\102\1\u0104\12\0\1\u0105\1\102\1\103\2\0\3\u0105"+
    "\1\0\1\111\1\112\1\113\12\0\1\103\1\113\6\0"+
    "\1\111\1\0\1\111\26\0\3\u0105\1\102\1\u0105\12\0"+
    "\1\u0106\1\0\1\103\3\0\1\u0106\17\0\1\103\152\0"+
    "\1\u0107\7\0\2\12\1\0\12\12\1\0\1\12\3\0"+
    "\15\12\1\u0108\12\12\20\0\5\12\7\0\2\12\1\0"+
    "\12\12\1\0\1\12\3\0\6\12\1\u0109\21\12\20\0"+
    "\5\12\7\0\2\12\1\0\12\12\1\0\1\12\3\0"+
    "\3\12\1\216\24\12\20\0\5\12\7\0\2\77\1\0"+
    "\12\77\1\0\1\77\3\0\10\77\1\u010a\17\77\20\0"+
    "\5\77\12\0\2\u010b\1\103\1\0\6\u010b\1\0\1\u010b"+
    "\3\0\2\u010b\3\0\1\u010b\1\0\1\103\1\u010b\6\0"+
    "\1\u010b\1\0\1\u010b\26\0\5\u010b\12\0\1\u010c\1\102"+
    "\1\103\2\0\3\u010c\1\0\1\111\1\112\1\113\12\0"+
    "\1\103\1\113\6\0\1\111\1\0\1\111\26\0\3\u010c"+
    "\1\102\1\u010c\12\0\1\u010d\1\102\1\103\2\0\3\u010d"+
    "\1\0\1\111\1\112\1\113\12\0\1\103\1\113\6\0"+
    "\1\111\1\0\1\111\26\0\3\u010d\1\102\1\u010d\12\0"+
    "\1\u010e\1\0\1\103\3\0\1\u010e\17\0\1\103\147\0"+
    "\1\u010f\12\0\2\12\1\0\12\12\1\0\1\12\3\0"+
    "\27\12\1\370\20\0\5\12\7\0\2\12\1\0\12\12"+
    "\1\0\1\12\3\0\21\12\1\144\6\12\20\0\5\12"+
    "\12\0\2\u0110\1\103\1\0\6\u0110\1\0\1\u0110\3\0"+
    "\2\u0110\3\0\1\u0110\1\0\1\103\1\u0110\6\0\1\u0110"+
    "\1\0\1\u0110\26\0\5\u0110\12\0\1\u0111\1\102\1\103"+
    "\2\0\3\u0111\1\0\1\111\1\112\1\113\12\0\1\103"+
    "\1\113\6\0\1\111\1\0\1\111\26\0\3\u0111\1\102"+
    "\1\u0111\12\0\1\u0112\1\102\1\103\2\0\3\u0112\1\0"+
    "\1\111\1\112\1\113\12\0\1\103\1\113\6\0\1\111"+
    "\1\0\1\111\26\0\3\u0112\1\102\1\u0112\12\0\1\u0113"+
    "\1\0\1\103\3\0\1\u0113\17\0\1\103\151\0\1\103"+
    "\13\0\2\u0114\1\103\1\0\6\u0114\1\0\1\u0114\3\0"+
    "\2\u0114\3\0\1\u0114\1\0\1\103\1\u0114\6\0\1\u0114"+
    "\1\0\1\u0114\26\0\5\u0114\12\0\1\u0115\1\102\1\103"+
    "\2\0\3\u0115\1\0\1\111\1\112\1\113\12\0\1\103"+
    "\1\113\6\0\1\111\1\0\1\111\26\0\3\u0115\1\102"+
    "\1\u0115\12\0\1\u0116\1\102\1\103\2\0\3\u0116\1\0"+
    "\1\111\1\112\1\113\12\0\1\103\1\113\6\0\1\111"+
    "\1\0\1\111\26\0\3\u0116\1\102\1\u0116\12\0\1\u0117"+
    "\1\0\1\103\3\0\1\u0117\17\0\1\103\57\0\2\u0118"+
    "\1\103\1\0\6\u0118\1\0\1\u0118\3\0\2\u0118\3\0"+
    "\1\u0118\1\0\1\103\1\u0118\6\0\1\u0118\1\0\1\u0118"+
    "\26\0\5\u0118\12\0\1\u0119\1\102\1\103\2\0\3\u0119"+
    "\1\0\1\111\1\112\1\113\12\0\1\103\1\113\6\0"+
    "\1\111\1\0\1\111\26\0\3\u0119\1\102\1\u0119\12\0"+
    "\1\u011a\1\102\1\103\2\0\3\u011a\1\0\1\111\1\112"+
    "\1\113\12\0\1\103\1\113\6\0\1\111\1\0\1\111"+
    "\26\0\3\u011a\1\102\1\u011a\12\0\1\u011b\1\0\1\103"+
    "\3\0\1\u011b\17\0\1\103\57\0\2\u011c\1\103\1\0"+
    "\6\u011c\1\0\1\u011c\3\0\2\u011c\3\0\1\u011c\1\0"+
    "\1\103\1\u011c\6\0\1\u011c\1\0\1\u011c\26\0\5\u011c"+
    "\12\0\1\u011d\1\102\1\103\2\0\3\u011d\1\0\1\111"+
    "\1\112\1\113\12\0\1\103\1\113\6\0\1\111\1\0"+
    "\1\111\26\0\3\u011d\1\102\1\u011d\12\0\1\u011e\1\102"+
    "\1\103\2\0\3\u011e\1\0\1\111\1\112\1\113\12\0"+
    "\1\103\1\113\6\0\1\111\1\0\1\111\26\0\3\u011e"+
    "\1\102\1\u011e\12\0\1\u011f\1\0\1\103\3\0\1\u011f"+
    "\17\0\1\103\57\0\2\u0120\1\103\1\0\6\u0120\1\0"+
    "\1\u0120\3\0\2\u0120\3\0\1\u0120\1\0\1\103\1\u0120"+
    "\6\0\1\u0120\1\0\1\u0120\26\0\5\u0120\12\0\1\u0121"+
    "\1\102\1\103\2\0\3\u0121\1\0\1\111\1\112\1\113"+
    "\12\0\1\103\1\113\6\0\1\111\1\0\1\111\26\0"+
    "\3\u0121\1\102\1\u0121\12\0\1\u0122\1\102\1\103\2\0"+
    "\3\u0122\1\0\1\111\1\112\1\113\12\0\1\103\1\113"+
    "\6\0\1\111\1\0\1\111\26\0\3\u0122\1\102\1\u0122"+
    "\12\0\1\u0123\1\0\1\103\3\0\1\u0123\17\0\1\103"+
    "\57\0\2\u0124\1\103\1\0\6\u0124\1\0\1\u0124\3\0"+
    "\2\u0124\3\0\1\u0124\1\0\1\103\1\u0124\6\0\1\u0124"+
    "\1\0\1\u0124\26\0\5\u0124\12\0\1\u0125\1\102\1\103"+
    "\2\0\3\u0125\1\0\1\111\1\112\1\113\12\0\1\103"+
    "\1\113\6\0\1\111\1\0\1\111\26\0\3\u0125\1\102"+
    "\1\u0125\12\0\1\u0126\1\102\1\103\2\0\3\u0126\1\0"+
    "\1\111\1\112\1\113\12\0\1\103\1\113\6\0\1\111"+
    "\1\0\1\111\26\0\3\u0126\1\102\1\u0126\12\0\1\u0127"+
    "\1\0\1\103\3\0\1\u0127\17\0\1\103\57\0\2\u0128"+
    "\1\103\1\0\6\u0128\1\0\1\u0128\3\0\2\u0128\3\0"+
    "\1\u0128\1\0\1\103\1\u0128\6\0\1\u0128\1\0\1\u0128"+
    "\26\0\5\u0128\12\0\1\u0129\1\102\1\103\2\0\3\u0129"+
    "\1\0\1\111\1\112\1\113\12\0\1\103\1\113\6\0"+
    "\1\111\1\0\1\111\26\0\3\u0129\1\102\1\u0129\12\0"+
    "\1\u012a\1\102\1\103\2\0\3\u012a\1\0\1\111\1\112"+
    "\1\113\12\0\1\103\1\113\6\0\1\111\1\0\1\111"+
    "\26\0\3\u012a\1\102\1\u012a\12\0\1\u012b\1\0\1\103"+
    "\3\0\1\u012b\17\0\1\103\57\0\2\u012c\1\103\1\0"+
    "\6\u012c\1\0\1\u012c\3\0\2\u012c\3\0\1\u012c\1\0"+
    "\1\103\1\u012c\6\0\1\u012c\1\0\1\u012c\26\0\5\u012c"+
    "\12\0\1\u012d\1\102\1\103\2\0\3\u012d\1\0\1\111"+
    "\1\112\1\113\12\0\1\103\1\113\6\0\1\111\1\0"+
    "\1\111\26\0\3\u012d\1\102\1\u012d\12\0\1\u012e\1\0"+
    "\1\103\3\0\1\u012e\17\0\1\103\61\0\1\103\23\0"+
    "\1\103\57\0\1\u012f\1\102\1\103\2\0\3\u012f\1\0"+
    "\1\111\1\112\1\113\12\0\1\103\1\113\6\0\1\111"+
    "\1\0\1\111\26\0\3\u012f\1\102\1\u012f\12\0\1\u0130"+
    "\1\0\1\103\3\0\1\u0130\17\0\1\103\57\0\1\u0131"+
    "\1\102\1\103\2\0\3\u0131\1\0\1\111\1\112\1\113"+
    "\12\0\1\103\1\113\6\0\1\111\1\0\1\111\26\0"+
    "\3\u0131\1\102\1\u0131\12\0\1\u0132\1\0\1\103\3\0"+
    "\1\u0132\17\0\1\103\57\0\1\u0133\1\102\1\103\2\0"+
    "\3\u0133\1\0\1\111\1\112\1\113\12\0\1\103\1\113"+
    "\6\0\1\111\1\0\1\111\26\0\3\u0133\1\102\1\u0133"+
    "\12\0\1\u0134\1\0\1\103\3\0\1\u0134\17\0\1\103"+
    "\57\0\1\u0135\1\102\1\103\2\0\3\u0135\1\0\1\111"+
    "\1\112\1\113\12\0\1\103\1\113\6\0\1\111\1\0"+
    "\1\111\26\0\3\u0135\1\102\1\u0135\12\0\1\u0136\1\0"+
    "\1\103\3\0\1\u0136\17\0\1\103\57\0\2\102\1\103"+
    "\2\0\3\102\1\0\1\111\1\112\1\113\12\0\1\103"+
    "\1\113\6\0\1\111\1\0\1\111\26\0\5\102\12\0"+
    "\1\u0137\1\0\1\103\3\0\1\u0137\17\0\1\103\57\0"+
    "\1\u0138\1\0\1\103\3\0\1\u0138\17\0\1\103\57\0"+
    "\1\u0139\1\0\1\103\3\0\1\u0139\17\0\1\103\57\0"+
    "\1\u013a\1\0\1\103\3\0\1\u013a\17\0\1\103\57\0"+
    "\1\u013b\1\0\1\103\3\0\1\u013b\17\0\1\103\57\0"+
    "\1\u013c\1\0\1\103\3\0\1\u013c\17\0\1\103\57\0"+
    "\1\u013d\1\0\1\103\3\0\1\u013d\17\0\1\103\57\0"+
    "\1\u013e\1\0\1\103\3\0\1\u013e\17\0\1\103\57\0"+
    "\1\u013f\1\0\1\103\3\0\1\u013f\17\0\1\103\57\0"+
    "\1\u0140\1\0\1\103\3\0\1\u0140\17\0\1\103\57\0"+
    "\1\u0141\1\0\1\103\3\0\1\u0141\17\0\1\103\57\0"+
    "\1\u0142\1\0\1\103\3\0\1\u0142\17\0\1\103\57\0"+
    "\1\u0143\1\0\1\103\3\0\1\u0143\17\0\1\103\57\0"+
    "\1\u0144\1\0\1\103\3\0\1\u0144\17\0\1\103\57\0"+
    "\1\u0145\1\0\1\103\3\0\1\u0145\17\0\1\103\57\0"+
    "\1\u0146\1\0\1\103\3\0\1\u0146\17\0\1\103\57\0"+
    "\1\u0147\1\0\1\103\3\0\1\u0147\17\0\1\103\57\0"+
    "\1\u0148\1\0\1\103\3\0\1\u0148\17\0\1\103\57\0"+
    "\1\u0149\1\0\1\103\3\0\1\u0149\17\0\1\103\57\0"+
    "\1\u014a\1\0\1\103\3\0\1\u014a\17\0\1\103\57\0"+
    "\1\u014b\1\0\1\103\3\0\1\u014b\17\0\1\103\57\0"+
    "\1\u014c\1\0\1\103\3\0\1\u014c\17\0\1\103\57\0"+
    "\1\u014d\1\0\1\103\3\0\1\u014d\17\0\1\103\57\0"+
    "\1\u014e\1\0\1\103\3\0\1\u014e\17\0\1\103\57\0"+
    "\1\u014f\1\0\1\103\3\0\1\u014f\17\0\1\103\57\0"+
    "\1\u0150\1\0\1\103\3\0\1\u0150\17\0\1\103\57\0"+
    "\1\u0151\1\0\1\103\3\0\1\u0151\17\0\1\103\57\0"+
    "\1\u0152\1\0\1\103\3\0\1\u0152\17\0\1\103\57\0"+
    "\1\u0153\1\0\1\103\3\0\1\u0153\17\0\1\103\57\0"+
    "\1\u0154\1\0\1\103\3\0\1\u0154\17\0\1\103\57\0"+
    "\1\u0155\1\0\1\103\3\0\1\u0155\17\0\1\103\57\0"+
    "\1\u0156\1\0\1\103\3\0\1\u0156\17\0\1\103\57\0"+
    "\1\u0157\1\0\1\103\3\0\1\u0157\17\0\1\103\57\0"+
    "\1\u0158\1\0\1\103\3\0\1\u0158\17\0\1\103\57\0"+
    "\1\u0159\1\0\1\103\3\0\1\u0159\17\0\1\103\57\0"+
    "\1\u015a\1\0\1\103\3\0\1\u015a\17\0\1\103\57\0"+
    "\1\u015b\1\0\1\103\3\0\1\u015b\17\0\1\103\57\0"+
    "\1\u015c\1\0\1\103\3\0\1\u015c\17\0\1\103\57\0"+
    "\1\u015d\1\0\1\103\3\0\1\u015d\17\0\1\103\57\0"+
    "\1\u015e\1\0\1\103\3\0\1\u015e\17\0\1\103\57\0"+
    "\1\u015f\1\0\1\103\3\0\1\u015f\17\0\1\103\57\0"+
    "\1\u0160\1\0\1\103\3\0\1\u0160\17\0\1\103\57\0"+
    "\1\u012c\1\0\1\103\3\0\1\u012c\17\0\1\103\46\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22680];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\1\11\10\1\2\11\20\1\10\11"+
    "\2\1\1\11\5\1\2\11\2\1\1\11\3\1\1\11"+
    "\3\1\1\11\4\1\1\11\1\0\3\1\1\0\1\11"+
    "\1\1\2\0\46\1\3\11\1\1\1\11\7\1\2\0"+
    "\53\1\1\0\35\1\1\0\26\1\1\0\17\1\1\0"+
    "\14\1\1\0\10\1\1\0\7\1\2\0\3\1\1\0"+
    "\3\1\1\0\3\1\1\0\3\1\1\0\3\1\1\0"+
    "\3\1\1\0\3\1\1\0\25\1\37\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[352];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	public Token token(int type) {
		return new TokenImpl(type, yychar, yytext().length());
	}
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaTokenizer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2898) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return token(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return token(OTHER);
            }
          case 30: break;
          case 2: 
            { return token(WHITESPACE);
            }
          case 31: break;
          case 3: 
            { return token(OPERATOR);
            }
          case 32: break;
          case 4: 
            { return token(IDENTIFIER);
            }
          case 33: break;
          case 5: 
            { return token(INTEGER_LITERAL);
            }
          case 34: break;
          case 6: 
            { return token(DOT);
            }
          case 35: break;
          case 7: 
            { yybegin(STRING); return token(STRING_LITERAL);
            }
          case 36: break;
          case 8: 
            { yybegin(CHARLITERAL); return token(CHARACTER_LITERAL);
            }
          case 37: break;
          case 9: 
            { return token(LPAREN);
            }
          case 38: break;
          case 10: 
            { return token(RPAREN);
            }
          case 39: break;
          case 11: 
            { return token(LBRACE);
            }
          case 40: break;
          case 12: 
            { return token(RBRACE);
            }
          case 41: break;
          case 13: 
            { return token(LBRACK);
            }
          case 42: break;
          case 14: 
            { return token(RBRACK);
            }
          case 43: break;
          case 15: 
            { return token(SEMICOLON);
            }
          case 44: break;
          case 16: 
            { return token(COMMA);
            }
          case 45: break;
          case 17: 
            { return token(STRING_LITERAL);
            }
          case 46: break;
          case 18: 
            { yybegin(YYINITIAL);
            }
          case 47: break;
          case 19: 
            { yybegin(YYINITIAL); return token(STRING_LITERAL);
            }
          case 48: break;
          case 20: 
            { return token(CHARACTER_LITERAL);
            }
          case 49: break;
          case 21: 
            { yybegin(YYINITIAL); return token(CHARACTER_LITERAL);
            }
          case 50: break;
          case 22: 
            { return token(COMMENT_MULTI);
            }
          case 51: break;
          case 23: 
            { return token(COMMENT_EOL);
            }
          case 52: break;
          case 24: 
            { yybegin(COMMENT); return token(COMMENT_MULTI);
            }
          case 53: break;
          case 25: 
            { return token(ANNOTATION);
            }
          case 54: break;
          case 26: 
            { return token(FLOATING_POINT_LITERAL);
            }
          case 55: break;
          case 27: 
            { return token(KEYWORD);
            }
          case 56: break;
          case 28: 
            { yybegin(YYINITIAL); return token(COMMENT_MULTI);
            }
          case 57: break;
          case 29: 
            { return token(BOOLEAN_LITERAL);
            }
          case 58: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
