/* The following code was generated by JFlex 1.6.1 */

package ru.tesei7.textEditor.editor.syntax;

import ru.tesei7.textEditor.editor.syntax.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Ilya/git/syntax-text-editor/textEditor/src/main/jflex/java.jflex</tt>
 */
public class JavaTokenizer implements TokenTypes, Tokenizer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;
  public static final int COMMENT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\72"+
    "\1\25\1\0\1\6\1\72\1\74\1\26\1\57\1\60\1\5\1\76"+
    "\1\66\1\24\1\22\1\4\1\11\1\17\1\77\1\16\1\100\1\20"+
    "\1\103\1\101\1\102\1\12\1\73\1\65\1\71\1\67\1\70\1\73"+
    "\1\10\3\15\1\21\1\23\1\21\5\6\1\13\13\6\1\14\2\6"+
    "\1\63\1\104\1\64\1\72\1\6\1\0\1\27\1\30\1\34\1\46"+
    "\1\37\1\50\1\53\1\43\1\44\1\6\1\41\1\36\1\51\1\40"+
    "\1\35\1\52\1\6\1\33\1\31\1\32\1\45\1\54\1\55\1\47"+
    "\1\42\1\56\1\61\1\75\1\62\1\73\6\7\1\7\32\7\2\0"+
    "\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0"+
    "\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6\16\0\5\6\7\0"+
    "\1\6\1\0\1\6\21\0\160\7\5\6\1\0\2\6\2\0\4\6"+
    "\10\0\1\6\1\0\3\6\1\0\1\6\1\0\24\6\1\0\123\6"+
    "\1\0\213\6\1\0\5\7\2\0\236\6\11\0\46\6\2\0\1\6"+
    "\7\0\47\6\7\0\1\6\1\0\55\7\1\0\1\7\1\0\2\7"+
    "\1\0\2\7\1\0\1\7\10\0\33\6\5\0\3\6\15\0\5\7"+
    "\6\0\1\6\4\0\13\7\5\0\53\6\37\7\4\0\2\6\1\7"+
    "\143\6\1\0\1\6\10\7\1\0\6\7\2\6\2\7\1\0\4\7"+
    "\2\6\12\7\3\6\2\0\1\6\17\0\1\7\1\6\1\7\36\6"+
    "\33\7\2\0\131\6\13\7\1\6\16\0\12\7\41\6\11\7\2\6"+
    "\4\0\1\6\5\0\26\6\4\7\1\6\11\7\1\6\3\7\1\6"+
    "\5\7\22\0\31\6\3\7\104\0\1\6\1\0\13\6\67\0\33\7"+
    "\1\0\4\7\66\6\3\7\1\6\22\7\1\6\7\7\12\6\2\7"+
    "\2\0\12\7\1\0\7\6\1\0\7\6\1\0\3\7\1\0\10\6"+
    "\2\0\2\6\2\0\26\6\1\0\7\6\1\0\1\6\3\0\4\6"+
    "\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7\1\6\10\0"+
    "\1\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7\4\6\7\0"+
    "\1\6\5\0\3\7\1\0\6\6\4\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0\1\7\1\0"+
    "\5\7\4\0\2\7\2\0\3\7\3\0\1\7\7\0\4\6\1\0"+
    "\1\6\7\0\14\7\3\6\1\7\13\0\3\7\1\0\11\6\1\0"+
    "\3\6\1\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0"+
    "\1\7\1\6\10\7\1\0\3\7\1\0\3\7\2\0\1\6\17\0"+
    "\2\6\2\7\2\0\12\7\1\0\1\6\17\0\3\7\1\0\10\6"+
    "\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6"+
    "\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7\10\0\2\7"+
    "\4\0\2\6\1\0\3\6\2\7\2\0\12\7\1\0\1\6\20\0"+
    "\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6"+
    "\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0\14\6"+
    "\4\0\5\7\3\0\3\7\1\0\4\7\2\0\1\6\6\0\1\7"+
    "\16\0\12\7\11\0\1\6\7\0\3\7\1\0\10\6\1\0\3\6"+
    "\1\0\27\6\1\0\12\6\1\0\5\6\3\0\1\6\7\7\1\0"+
    "\3\7\1\0\4\7\7\0\2\7\1\0\2\6\6\0\2\6\2\7"+
    "\2\0\12\7\22\0\2\7\1\0\10\6\1\0\3\6\1\0\27\6"+
    "\1\0\12\6\1\0\5\6\2\0\1\7\1\6\7\7\1\0\3\7"+
    "\1\0\4\7\7\0\2\7\7\0\1\6\1\0\2\6\2\7\2\0"+
    "\12\7\1\0\2\6\17\0\2\7\1\0\10\6\1\0\3\6\1\0"+
    "\51\6\2\0\1\6\7\7\1\0\3\7\1\0\4\7\1\6\10\0"+
    "\1\7\10\0\2\6\2\7\2\0\12\7\12\0\6\6\2\0\2\7"+
    "\1\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6"+
    "\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7\22\0\2\7"+
    "\15\0\60\6\1\7\2\6\7\7\4\0\10\6\10\7\1\0\12\7"+
    "\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6"+
    "\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6"+
    "\2\0\2\6\1\0\4\6\1\7\2\6\6\7\1\0\2\7\1\6"+
    "\2\0\5\6\1\0\1\6\1\0\6\7\2\0\12\7\2\0\4\6"+
    "\40\0\1\6\27\0\2\7\6\0\12\7\13\0\1\7\1\0\1\7"+
    "\1\0\1\7\4\0\2\7\10\6\1\0\44\6\4\0\24\7\1\0"+
    "\2\7\5\6\13\7\1\0\44\7\11\0\1\7\71\0\53\6\24\7"+
    "\1\6\12\7\6\0\6\6\4\7\4\6\3\7\1\6\3\7\2\6"+
    "\7\7\3\6\4\7\15\6\14\7\1\6\17\7\2\0\46\6\1\0"+
    "\1\6\5\0\1\6\2\0\53\6\1\0\u014d\6\1\0\4\6\2\0"+
    "\7\6\1\0\1\6\1\0\4\6\2\0\51\6\1\0\4\6\2\0"+
    "\41\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0"+
    "\17\6\1\0\71\6\1\0\4\6\2\0\103\6\2\0\3\7\40\0"+
    "\20\6\20\0\125\6\14\0\u026c\6\2\0\21\6\1\0\32\6\5\0"+
    "\113\6\3\0\3\6\17\0\15\6\1\0\4\6\3\7\13\0\22\6"+
    "\3\7\13\0\22\6\2\7\14\0\15\6\1\0\3\6\1\0\2\7"+
    "\14\0\64\6\40\7\3\0\1\6\3\0\2\6\1\7\2\0\12\7"+
    "\41\0\3\7\2\0\12\7\6\0\130\6\10\0\51\6\1\7\1\6"+
    "\5\0\106\6\12\0\35\6\3\0\14\7\4\0\14\7\12\0\12\7"+
    "\36\6\2\0\5\6\13\0\54\6\4\0\21\7\7\6\2\7\6\0"+
    "\12\7\46\0\27\6\5\7\4\0\65\6\12\7\1\0\35\7\2\0"+
    "\13\7\6\0\12\7\15\0\1\6\130\0\5\7\57\6\21\7\7\6"+
    "\4\0\12\7\21\0\11\7\14\0\3\7\36\6\15\7\2\6\12\7"+
    "\54\6\16\7\14\0\44\6\24\7\10\0\12\7\3\0\3\6\12\7"+
    "\44\6\122\0\3\7\1\0\25\7\4\6\1\7\4\6\3\7\2\6"+
    "\11\0\300\6\47\7\25\0\4\7\u0116\6\2\0\6\6\2\0\46\6"+
    "\2\0\6\6\2\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\37\6\2\0\65\6\1\0\7\6\1\0\1\6\3\0\3\6"+
    "\1\0\7\6\3\0\4\6\2\0\6\6\4\0\15\6\5\0\3\6"+
    "\1\0\7\6\16\0\5\7\30\0\1\0\1\0\5\7\20\0\2\6"+
    "\23\0\1\6\13\0\5\7\5\0\6\7\1\0\1\6\15\0\1\6"+
    "\20\0\15\6\3\0\33\6\25\0\15\7\4\0\1\7\3\0\14\7"+
    "\21\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6\3\0\5\6"+
    "\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0\13\6"+
    "\2\0\4\6\5\0\5\6\4\0\1\6\21\0\51\6\u0a77\0\57\6"+
    "\1\0\57\6\1\0\205\6\6\0\4\6\3\7\2\6\14\0\46\6"+
    "\1\0\1\6\5\0\1\6\2\0\70\6\7\0\1\6\17\0\1\7"+
    "\27\6\11\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\40\7\57\0"+
    "\1\6\u01d5\0\3\6\31\0\11\6\6\7\1\0\5\6\2\0\5\6"+
    "\4\0\126\6\2\0\2\7\2\0\3\6\1\0\132\6\1\0\4\6"+
    "\5\0\51\6\3\0\136\6\21\0\33\6\65\0\20\6\u0200\0\u19b6\6"+
    "\112\0\u51cd\6\63\0\u048d\6\103\0\56\6\2\0\u010d\6\3\0\20\6"+
    "\12\7\2\6\24\0\57\6\1\7\4\0\12\7\1\0\31\6\7\0"+
    "\1\7\120\6\2\7\45\0\11\6\2\0\147\6\2\0\4\6\1\0"+
    "\4\6\14\0\13\6\115\0\12\6\1\7\3\6\1\7\4\6\1\7"+
    "\27\6\5\7\20\0\1\6\7\0\64\6\14\0\2\7\62\6\21\7"+
    "\13\0\12\7\6\0\22\7\6\6\3\0\1\6\4\0\12\7\34\6"+
    "\10\7\2\0\27\6\15\7\14\0\35\6\3\0\4\7\57\6\16\7"+
    "\16\0\1\6\12\7\46\0\51\6\16\7\11\0\3\6\1\7\10\6"+
    "\2\7\2\0\12\7\6\0\27\6\3\0\1\6\1\7\4\0\60\6"+
    "\1\7\1\6\3\7\2\6\2\7\5\6\2\7\1\6\1\7\1\6"+
    "\30\0\3\6\2\0\13\6\5\7\2\0\3\6\2\7\12\0\6\6"+
    "\2\0\6\6\2\0\6\6\11\0\7\6\1\0\7\6\221\0\43\6"+
    "\10\7\1\0\2\7\2\0\12\7\6\0\u2ba4\6\14\0\27\6\4\0"+
    "\61\6\u2104\0\u016e\6\2\0\152\6\46\0\7\6\14\0\5\6\5\0"+
    "\1\6\1\7\12\6\1\0\15\6\1\0\5\6\1\0\1\6\1\0"+
    "\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0"+
    "\66\6\50\0\15\6\3\0\20\7\20\0\7\7\14\0\2\6\30\0"+
    "\3\6\31\0\1\6\6\0\5\6\1\0\207\6\2\0\1\7\4\0"+
    "\1\6\13\0\12\7\7\0\32\6\4\0\1\6\1\0\32\6\13\0"+
    "\131\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6\3\0"+
    "\2\6\3\0\2\6\22\0\3\7\4\0\14\6\1\0\32\6\1\0"+
    "\23\6\1\0\2\6\1\0\17\6\2\0\16\6\42\0\173\6\105\0"+
    "\65\6\210\0\1\7\202\0\35\6\3\0\61\6\57\0\37\6\21\0"+
    "\33\6\65\0\36\6\2\0\44\6\4\0\10\6\1\0\5\6\52\0"+
    "\236\6\2\0\12\7\u0356\0\6\6\2\0\1\6\1\0\54\6\1\0"+
    "\2\6\3\0\1\6\2\0\27\6\252\0\26\6\12\0\32\6\106\0"+
    "\70\6\6\0\2\6\100\0\1\6\3\7\1\0\2\7\5\0\4\7"+
    "\4\6\1\0\3\6\1\0\33\6\4\0\3\7\4\0\1\7\40\0"+
    "\35\6\203\0\66\6\12\0\26\6\12\0\23\6\215\0\111\6\u03b7\0"+
    "\3\7\65\6\17\7\37\0\12\7\20\0\3\7\55\6\13\7\2\0"+
    "\1\7\22\0\31\6\7\0\12\7\6\0\3\7\44\6\16\7\1\0"+
    "\12\7\100\0\3\7\60\6\16\7\4\6\13\0\12\7\u04a6\0\53\6"+
    "\15\7\10\0\12\7\u0936\0\u036f\6\221\0\143\6\u0b9d\0\u042f\6\u33d1\0"+
    "\u0239\6\u04c7\0\105\6\13\0\1\6\56\7\20\0\4\7\15\6\u4060\0"+
    "\2\6\u2163\0\5\7\3\0\26\7\2\0\7\7\36\0\4\7\224\0"+
    "\3\7\u01bb\0\125\6\1\0\107\6\1\0\2\6\2\0\1\6\2\0"+
    "\2\6\2\0\4\6\1\0\14\6\1\0\1\6\1\0\7\6\1\0"+
    "\101\6\1\0\4\6\2\0\10\6\1\0\7\6\1\0\34\6\1\0"+
    "\4\6\1\0\5\6\1\0\1\6\3\0\7\6\1\0\u0154\6\2\0"+
    "\31\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0"+
    "\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0"+
    "\10\6\2\0\62\7\u1600\0\4\6\1\0\33\6\1\0\2\6\1\0"+
    "\1\6\2\0\1\6\1\0\12\6\1\0\4\6\1\0\1\6\1\0"+
    "\1\6\6\0\1\6\4\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\3\6\1\0\2\6\1\0\1\6\2\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\2\6\1\0\1\6\2\0"+
    "\4\6\1\0\7\6\1\0\4\6\1\0\4\6\1\0\1\6\1\0"+
    "\12\6\1\0\21\6\5\0\3\6\1\0\5\6\1\0\21\6\u1144\0"+
    "\ua6d7\6\51\0\u1035\6\13\0\336\6\u3fe2\0\u021e\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\7\36\0\140\7\200\0\360\7\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\2\3\1\4\1\1\2\5\1\6"+
    "\1\3\1\7\1\10\20\4\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\6\3\1\21\2\22\1\23"+
    "\1\21\1\24\1\25\1\24\5\26\1\27\1\30\2\31"+
    "\1\5\1\32\1\5\1\0\3\5\2\32\2\0\27\4"+
    "\1\33\1\4\1\33\13\4\1\3\1\21\1\24\1\34"+
    "\2\27\1\31\4\5\1\32\2\0\27\4\1\33\16\4"+
    "\1\31\3\5\1\0\10\4\1\35\17\4\1\31\3\5"+
    "\1\0\6\4\1\33\7\4\1\33\2\4\1\31\3\5"+
    "\1\0\12\4\1\31\3\5\1\0\7\4\1\31\3\5"+
    "\1\0\3\4\1\31\3\5\1\0\2\4\1\33\3\5"+
    "\2\0\2\5\1\0\2\5\1\0\2\5\1\0\2\5"+
    "\1\0\2\5\1\0\2\5\1\0\1\5\1\32\1\0"+
    "\5\32";

  private static int [] zzUnpackAction() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u0114\0\u019e"+
    "\0\u01e3\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u0114"+
    "\0\u0114\0\u03c6\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564"+
    "\0\u05a9\0\u05ee\0\u0633\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c"+
    "\0\u07d1\0\u0114\0\u0114\0\u0114\0\u0114\0\u0114\0\u0114\0\u0114"+
    "\0\u0114\0\u0816\0\u085b\0\u0114\0\u08a0\0\u08e5\0\u092a\0\u096f"+
    "\0\u09b4\0\u0114\0\u0114\0\u09f9\0\u0a3e\0\u0114\0\u0a83\0\u0ac8"+
    "\0\u0b0d\0\u0114\0\u0b52\0\u0b97\0\u0bdc\0\u0114\0\u0c21\0\u0c66"+
    "\0\u0cab\0\u0cf0\0\u0114\0\u0d35\0\u0d7a\0\u0dbf\0\u0e04\0\u0114"+
    "\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7\0\u102c"+
    "\0\u1071\0\u10b6\0\u10fb\0\u1140\0\u1185\0\u11ca\0\u120f\0\u1254"+
    "\0\u1299\0\u12de\0\u1323\0\u1368\0\u13ad\0\u13f2\0\u1437\0\u147c"+
    "\0\u14c1\0\u1506\0\u0228\0\u154b\0\u1590\0\u15d5\0\u161a\0\u165f"+
    "\0\u16a4\0\u16e9\0\u172e\0\u1773\0\u17b8\0\u17fd\0\u1842\0\u1887"+
    "\0\u18cc\0\u0114\0\u0114\0\u0114\0\u1911\0\u0114\0\u1956\0\u199b"+
    "\0\u19e0\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e\0\u1bc3"+
    "\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c\0\u1d61\0\u1da6\0\u1deb"+
    "\0\u1e30\0\u1e75\0\u1eba\0\u1eff\0\u1f44\0\u1f89\0\u1fce\0\u2013"+
    "\0\u2058\0\u209d\0\u20e2\0\u2127\0\u216c\0\u21b1\0\u21f6\0\u223b"+
    "\0\u2280\0\u22c5\0\u230a\0\u234f\0\u2394\0\u23d9\0\u241e\0\u2463"+
    "\0\u24a8\0\u24ed\0\u2532\0\u2577\0\u25bc\0\u2601\0\u2646\0\u268b"+
    "\0\u26d0\0\u2715\0\u275a\0\u279f\0\u27e4\0\u2829\0\u286e\0\u28b3"+
    "\0\u28f8\0\u0228\0\u293d\0\u2982\0\u29c7\0\u2a0c\0\u2a51\0\u2a96"+
    "\0\u2adb\0\u2b20\0\u2b65\0\u2baa\0\u2bef\0\u2c34\0\u2c79\0\u2cbe"+
    "\0\u2d03\0\u2d48\0\u2d8d\0\u2dd2\0\u2e17\0\u2e5c\0\u2ea1\0\u2ee6"+
    "\0\u2f2b\0\u2f70\0\u2fb5\0\u2ffa\0\u1eff\0\u303f\0\u3084\0\u30c9"+
    "\0\u310e\0\u3153\0\u3198\0\u31dd\0\u3222\0\u3267\0\u32ac\0\u32f1"+
    "\0\u3336\0\u337b\0\u33c0\0\u3405\0\u344a\0\u348f\0\u34d4\0\u3519"+
    "\0\u355e\0\u35a3\0\u35e8\0\u362d\0\u3672\0\u36b7\0\u36fc\0\u3741"+
    "\0\u3786\0\u37cb\0\u3810\0\u3855\0\u389a\0\u38df\0\u3924\0\u3969"+
    "\0\u39ae\0\u39f3\0\u3a38\0\u3a7d\0\u3ac2\0\u3b07\0\u3b4c\0\u3b91"+
    "\0\u3bd6\0\u3c1b\0\u3c60\0\u3ca5\0\u3cea\0\u3d2f\0\u3d74\0\u3db9"+
    "\0\u3dfe\0\u0c21\0\u3e43\0\u3e88\0\u3ecd\0\u3f12\0\u3f57\0\u3f9c"+
    "\0\u3fe1\0\u4026\0\u406b\0\u40b0\0\u40f5\0\u413a\0\u417f\0\u41c4"+
    "\0\u4209\0\u424e\0\u4293\0\u42d8\0\u431d\0\u4362\0\u43a7\0\u43ec"+
    "\0\u4431\0\u4476\0\u4476\0\u44bb\0\u4500\0\u4545\0\u458a\0\u45cf"+
    "\0\u4614";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\2\7\1\10\1\11\1\12\1\5\1\13"+
    "\1\14\1\15\3\12\3\15\1\12\1\16\1\12\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\12\1\30\1\31\1\32\3\12\1\33\1\12\1\34"+
    "\1\12\1\35\1\12\1\36\1\37\1\40\1\41\1\12"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\11\1\52\1\53\1\11\1\54\1\55\1\56\1\57"+
    "\5\15\1\5\1\60\1\61\1\62\22\60\1\63\56\60"+
    "\1\64\1\65\1\61\1\62\23\65\1\66\55\65\1\67"+
    "\1\70\1\71\1\72\2\70\1\73\76\70\1\74\107\0"+
    "\1\7\106\0\1\75\1\76\61\0\1\54\104\0\1\54"+
    "\23\0\2\12\1\0\11\12\1\0\1\12\3\0\30\12"+
    "\20\0\5\12\7\0\1\77\4\0\3\77\3\0\1\77"+
    "\1\0\1\77\3\0\15\77\1\100\12\77\37\0\1\101"+
    "\1\102\1\103\1\104\1\0\1\105\1\106\1\107\1\110"+
    "\1\111\1\112\12\0\1\103\1\112\6\0\1\110\1\104"+
    "\1\110\26\0\1\105\2\107\1\102\1\107\12\0\2\15"+
    "\1\103\2\0\3\15\1\110\1\111\1\112\12\0\1\103"+
    "\1\112\6\0\1\110\1\0\1\110\26\0\5\15\12\0"+
    "\2\111\3\0\3\111\56\0\5\111\25\0\1\54\42\0"+
    "\1\54\7\0\1\113\13\0\2\12\1\0\11\12\1\0"+
    "\1\12\3\0\1\12\1\114\26\12\20\0\5\12\7\0"+
    "\2\12\1\0\11\12\1\0\1\12\3\0\4\12\1\115"+
    "\1\12\1\116\4\12\1\117\14\12\20\0\5\12\7\0"+
    "\2\12\1\0\11\12\1\0\1\12\3\0\3\12\1\120"+
    "\7\12\1\121\1\122\1\12\1\123\7\12\1\124\1\12"+
    "\20\0\5\12\7\0\2\12\1\0\11\12\1\0\1\12"+
    "\3\0\4\12\1\125\7\12\1\126\13\12\20\0\5\12"+
    "\7\0\2\12\1\0\11\12\1\0\1\12\3\0\10\12"+
    "\1\127\17\12\20\0\5\12\7\0\2\12\1\0\11\12"+
    "\1\0\1\12\3\0\1\130\5\12\1\131\1\132\4\12"+
    "\1\133\13\12\20\0\5\12\7\0\2\12\1\0\11\12"+
    "\1\0\1\12\3\0\6\12\1\134\21\12\20\0\5\12"+
    "\7\0\2\12\1\0\11\12\1\0\1\12\3\0\7\12"+
    "\1\135\10\12\1\136\7\12\20\0\5\12\7\0\2\12"+
    "\1\0\11\12\1\0\1\12\3\0\1\137\7\12\1\140"+
    "\5\12\1\141\11\12\20\0\5\12\7\0\2\12\1\0"+
    "\11\12\1\0\1\12\3\0\11\12\1\142\7\12\1\143"+
    "\1\144\5\12\20\0\5\12\7\0\2\12\1\0\11\12"+
    "\1\0\1\12\3\0\6\12\1\145\1\12\1\146\17\12"+
    "\20\0\5\12\7\0\2\12\1\0\11\12\1\0\1\12"+
    "\3\0\1\147\5\12\1\150\1\151\5\12\1\152\12\12"+
    "\20\0\5\12\7\0\2\12\1\0\11\12\1\0\1\12"+
    "\3\0\1\153\3\12\1\154\11\12\1\155\11\12\20\0"+
    "\5\12\7\0\2\12\1\0\11\12\1\0\1\12\3\0"+
    "\6\12\1\156\21\12\20\0\5\12\7\0\2\12\1\0"+
    "\11\12\1\0\1\12\3\0\6\12\1\157\21\12\20\0"+
    "\5\12\7\0\2\12\1\0\11\12\1\0\1\12\3\0"+
    "\14\12\1\160\13\12\20\0\5\12\70\0\1\54\1\161"+
    "\103\0\1\54\1\0\1\11\102\0\1\54\4\0\1\54"+
    "\77\0\1\54\5\0\1\54\76\0\1\54\6\0\1\54"+
    "\6\0\1\60\2\0\22\60\1\0\57\60\2\0\1\62"+
    "\102\0\1\60\2\0\22\60\1\162\57\60\1\65\2\0"+
    "\23\65\1\0\57\65\2\0\23\65\1\163\56\65\1\70"+
    "\2\0\2\70\1\0\77\70\2\0\1\72\106\0\1\164"+
    "\100\0\1\70\2\0\2\70\1\5\77\70\1\75\1\165"+
    "\1\166\102\75\6\0\2\77\1\0\11\77\1\0\1\77"+
    "\3\0\30\77\20\0\5\77\7\0\2\77\1\0\11\77"+
    "\1\0\1\77\3\0\11\77\1\167\16\77\20\0\5\77"+
    "\12\0\1\101\1\102\1\103\2\0\1\105\1\106\1\107"+
    "\1\110\1\111\1\112\12\0\1\103\1\112\6\0\1\110"+
    "\1\0\1\110\26\0\1\105\2\107\1\102\1\107\12\0"+
    "\2\102\3\0\3\102\1\110\1\111\1\112\13\0\1\112"+
    "\6\0\1\110\1\0\1\110\26\0\5\102\12\0\1\170"+
    "\1\171\2\0\5\171\1\0\1\171\3\0\2\171\3\0"+
    "\1\171\2\0\1\171\6\0\1\171\1\0\1\171\26\0"+
    "\5\171\12\0\1\172\1\102\1\103\2\0\3\172\1\110"+
    "\1\111\1\112\12\0\1\103\1\112\6\0\1\110\1\0"+
    "\1\110\26\0\3\172\1\102\1\172\12\0\1\107\1\102"+
    "\1\103\2\0\3\107\1\110\1\111\1\112\12\0\1\103"+
    "\1\112\6\0\1\110\1\0\1\110\26\0\3\107\1\102"+
    "\1\107\12\0\1\173\1\102\1\103\2\0\3\173\1\110"+
    "\1\111\1\112\12\0\1\103\1\112\6\0\1\110\1\0"+
    "\1\110\26\0\3\173\1\102\1\173\12\0\2\111\3\0"+
    "\3\111\1\110\1\0\1\112\13\0\1\112\6\0\1\110"+
    "\1\0\1\110\26\0\5\111\12\0\2\174\3\0\3\174"+
    "\3\0\1\175\51\0\1\175\5\174\20\0\1\176\73\0"+
    "\2\12\1\0\11\12\1\0\1\12\3\0\2\12\1\177"+
    "\25\12\20\0\5\12\7\0\2\12\1\0\11\12\1\0"+
    "\1\12\3\0\10\12\1\200\17\12\20\0\5\12\7\0"+
    "\2\12\1\0\11\12\1\0\1\12\3\0\6\12\1\201"+
    "\21\12\20\0\5\12\7\0\2\12\1\0\11\12\1\0"+
    "\1\12\3\0\3\12\1\202\24\12\20\0\5\12\7\0"+
    "\2\12\1\0\11\12\1\0\1\12\3\0\1\203\3\12"+
    "\1\204\23\12\20\0\5\12\7\0\2\12\1\0\11\12"+
    "\1\0\1\12\3\0\11\12\1\205\16\12\20\0\5\12"+
    "\7\0\2\12\1\0\11\12\1\0\1\12\3\0\6\12"+
    "\1\206\21\12\20\0\5\12\7\0\2\12\1\0\11\12"+
    "\1\0\1\12\3\0\23\12\1\207\4\12\20\0\5\12"+
    "\7\0\2\12\1\0\11\12\1\0\1\12\3\0\15\12"+
    "\1\210\12\12\20\0\5\12\7\0\2\12\1\0\11\12"+
    "\1\0\1\12\3\0\1\211\12\12\1\143\2\12\1\212"+
    "\11\12\20\0\5\12\7\0\2\12\1\0\11\12\1\0"+
    "\1\12\3\0\4\12\1\213\10\12\1\214\12\12\20\0"+
    "\5\12\7\0\2\12\1\0\11\12\1\0\1\12\3\0"+
    "\3\12\1\215\24\12\20\0\5\12\7\0\2\12\1\0"+
    "\11\12\1\0\1\12\3\0\2\12\1\202\1\216\24\12"+
    "\20\0\5\12\7\0\2\12\1\0\11\12\1\0\1\12"+
    "\3\0\11\12\1\217\16\12\20\0\5\12\7\0\2\12"+
    "\1\0\11\12\1\0\1\12\3\0\1\220\27\12\20\0"+
    "\5\12\7\0\2\12\1\0\11\12\1\0\1\12\3\0"+
    "\1\150\27\12\20\0\5\12\7\0\2\12\1\0\11\12"+
    "\1\0\1\12\3\0\11\12\1\221\16\12\20\0\5\12"+
    "\7\0\2\12\1\0\11\12\1\0\1\12\3\0\2\12"+
    "\1\202\25\12\20\0\5\12\7\0\2\12\1\0\11\12"+
    "\1\0\1\12\3\0\3\12\1\222\24\12\20\0\5\12"+
    "\7\0\2\12\1\0\11\12\1\0\1\12\3\0\3\12"+
    "\1\223\24\12\20\0\5\12\7\0\2\12\1\0\11\12"+
    "\1\0\1\12\3\0\26\12\1\143\1\12\20\0\5\12"+
    "\7\0\2\12\1\0\11\12\1\0\1\12\3\0\7\12"+
    "\1\224\20\12\20\0\5\12\7\0\2\12\1\0\11\12"+
    "\1\0\1\12\3\0\2\12\1\225\1\226\24\12\20\0"+
    "\5\12\7\0\2\12\1\0\11\12\1\0\1\12\3\0"+
    "\23\12\1\227\4\12\20\0\5\12\7\0\2\12\1\0"+
    "\11\12\1\0\1\12\3\0\16\12\1\230\11\12\20\0"+
    "\5\12\7\0\2\12\1\0\11\12\1\0\1\12\3\0"+
    "\21\12\1\231\6\12\20\0\5\12\7\0\2\12\1\0"+
    "\11\12\1\0\1\12\3\0\7\12\1\232\20\12\20\0"+
    "\5\12\7\0\2\12\1\0\11\12\1\0\1\12\3\0"+
    "\4\12\1\143\23\12\20\0\5\12\7\0\2\12\1\0"+
    "\11\12\1\0\1\12\3\0\6\12\1\233\21\12\20\0"+
    "\5\12\7\0\2\12\1\0\11\12\1\0\1\12\3\0"+
    "\11\12\1\234\16\12\20\0\5\12\7\0\2\12\1\0"+
    "\11\12\1\0\1\12\3\0\5\12\1\235\22\12\20\0"+
    "\5\12\7\0\2\12\1\0\11\12\1\0\1\12\3\0"+
    "\6\12\1\236\6\12\1\237\12\12\20\0\5\12\7\0"+
    "\2\12\1\0\11\12\1\0\1\12\3\0\1\12\1\240"+
    "\26\12\20\0\5\12\7\0\2\12\1\0\11\12\1\0"+
    "\1\12\3\0\3\12\1\241\24\12\20\0\5\12\7\0"+
    "\2\12\1\0\11\12\1\0\1\12\3\0\7\12\1\242"+
    "\5\12\1\243\12\12\20\0\5\12\7\0\2\12\1\0"+
    "\11\12\1\0\1\12\3\0\15\12\1\244\12\12\20\0"+
    "\5\12\70\0\1\54\1\11\16\0\1\166\110\0\2\77"+
    "\1\0\11\77\1\0\1\77\3\0\3\77\1\245\24\77"+
    "\20\0\5\77\12\0\1\170\1\171\1\103\1\0\5\171"+
    "\1\0\1\171\3\0\2\171\3\0\1\171\1\0\1\103"+
    "\1\171\6\0\1\171\1\0\1\171\26\0\5\171\12\0"+
    "\2\246\1\103\1\0\5\246\1\0\1\246\3\0\2\246"+
    "\3\0\1\246\1\0\1\103\1\246\6\0\1\246\1\0"+
    "\1\246\26\0\5\246\12\0\1\247\1\102\1\103\2\0"+
    "\3\247\1\110\1\111\1\112\12\0\1\103\1\112\6\0"+
    "\1\110\1\0\1\110\26\0\3\247\1\102\1\247\12\0"+
    "\1\250\1\102\1\103\2\0\3\250\1\110\1\111\1\112"+
    "\12\0\1\103\1\112\6\0\1\110\1\0\1\110\26\0"+
    "\3\250\1\102\1\250\12\0\2\174\3\0\3\174\1\110"+
    "\24\0\1\110\1\0\1\110\26\0\5\174\12\0\2\174"+
    "\3\0\3\174\56\0\5\174\101\0\1\251\12\0\2\12"+
    "\1\0\11\12\1\0\1\12\3\0\3\12\1\252\24\12"+
    "\20\0\5\12\7\0\2\12\1\0\11\12\1\0\1\12"+
    "\3\0\1\253\27\12\20\0\5\12\7\0\2\12\1\0"+
    "\11\12\1\0\1\12\3\0\7\12\1\254\20\12\20\0"+
    "\5\12\7\0\2\12\1\0\11\12\1\0\1\12\3\0"+
    "\10\12\1\143\17\12\20\0\5\12\7\0\2\12\1\0"+
    "\11\12\1\0\1\12\3\0\3\12\1\255\24\12\20\0"+
    "\5\12\7\0\2\12\1\0\11\12\1\0\1\12\3\0"+
    "\15\12\1\256\12\12\20\0\5\12\7\0\2\12\1\0"+
    "\11\12\1\0\1\12\3\0\5\12\1\257\22\12\20\0"+
    "\5\12\7\0\2\12\1\0\11\12\1\0\1\12\3\0"+
    "\4\12\1\260\23\12\20\0\5\12\7\0\2\12\1\0"+
    "\11\12\1\0\1\12\3\0\10\12\1\150\17\12\20\0"+
    "\5\12\7\0\2\12\1\0\11\12\1\0\1\12\3\0"+
    "\3\12\1\216\24\12\20\0\5\12\7\0\2\12\1\0"+
    "\11\12\1\0\1\12\3\0\11\12\1\261\16\12\20\0"+
    "\5\12\7\0\2\12\1\0\11\12\1\0\1\12\3\0"+
    "\10\12\1\262\17\12\20\0\5\12\7\0\2\12\1\0"+
    "\11\12\1\0\1\12\3\0\6\12\1\263\21\12\20\0"+
    "\5\12\7\0\2\12\1\0\11\12\1\0\1\12\3\0"+
    "\2\12\1\143\25\12\20\0\5\12\7\0\2\12\1\0"+
    "\11\12\1\0\1\12\3\0\16\12\1\264\11\12\20\0"+
    "\5\12\7\0\2\12\1\0\11\12\1\0\1\12\3\0"+
    "\5\12\1\265\22\12\20\0\5\12\7\0\2\12\1\0"+
    "\11\12\1\0\1\12\3\0\2\12\1\260\1\266\24\12"+
    "\20\0\5\12\7\0\2\12\1\0\11\12\1\0\1\12"+
    "\3\0\2\12\1\214\25\12\20\0\5\12\7\0\2\12"+
    "\1\0\11\12\1\0\1\12\3\0\24\12\1\143\3\12"+
    "\20\0\5\12\7\0\2\12\1\0\11\12\1\0\1\12"+
    "\3\0\10\12\1\267\17\12\20\0\5\12\7\0\2\12"+
    "\1\0\11\12\1\0\1\12\3\0\15\12\1\270\12\12"+
    "\20\0\5\12\7\0\2\12\1\0\11\12\1\0\1\12"+
    "\3\0\7\12\1\143\20\12\20\0\5\12\7\0\2\12"+
    "\1\0\11\12\1\0\1\12\3\0\3\12\1\271\24\12"+
    "\20\0\5\12\7\0\2\12\1\0\11\12\1\0\1\12"+
    "\3\0\10\12\1\272\17\12\20\0\5\12\7\0\2\12"+
    "\1\0\11\12\1\0\1\12\3\0\6\12\1\206\1\273"+
    "\20\12\20\0\5\12\7\0\2\12\1\0\11\12\1\0"+
    "\1\12\3\0\1\12\1\244\26\12\20\0\5\12\7\0"+
    "\2\12\1\0\11\12\1\0\1\12\3\0\1\274\27\12"+
    "\20\0\5\12\7\0\2\12\1\0\11\12\1\0\1\12"+
    "\3\0\2\12\1\212\25\12\20\0\5\12\7\0\2\12"+
    "\1\0\11\12\1\0\1\12\3\0\1\260\27\12\20\0"+
    "\5\12\7\0\2\12\1\0\11\12\1\0\1\12\3\0"+
    "\1\275\27\12\20\0\5\12\7\0\2\12\1\0\11\12"+
    "\1\0\1\12\3\0\12\12\1\276\15\12\20\0\5\12"+
    "\7\0\2\12\1\0\11\12\1\0\1\12\3\0\3\12"+
    "\1\277\24\12\20\0\5\12\7\0\2\12\1\0\11\12"+
    "\1\0\1\12\3\0\25\12\1\300\2\12\20\0\5\12"+
    "\7\0\2\12\1\0\11\12\1\0\1\12\3\0\7\12"+
    "\1\255\20\12\20\0\5\12\7\0\2\12\1\0\11\12"+
    "\1\0\1\12\3\0\6\12\1\143\21\12\20\0\5\12"+
    "\7\0\2\12\1\0\11\12\1\0\1\12\3\0\1\301"+
    "\27\12\20\0\5\12\7\0\2\12\1\0\11\12\1\0"+
    "\1\12\3\0\17\12\1\143\10\12\20\0\5\12\7\0"+
    "\2\12\1\0\11\12\1\0\1\12\3\0\7\12\1\202"+
    "\20\12\20\0\5\12\7\0\2\77\1\0\11\77\1\0"+
    "\1\77\3\0\10\77\1\302\17\77\20\0\5\77\12\0"+
    "\2\303\1\103\1\0\5\303\1\0\1\303\3\0\2\303"+
    "\3\0\1\303\1\0\1\103\1\303\6\0\1\303\1\0"+
    "\1\303\26\0\5\303\12\0\1\304\1\102\1\103\2\0"+
    "\3\304\1\110\1\111\1\112\12\0\1\103\1\112\6\0"+
    "\1\110\1\0\1\110\26\0\3\304\1\102\1\304\12\0"+
    "\1\305\1\102\1\103\2\0\3\305\1\110\1\111\1\112"+
    "\12\0\1\103\1\112\6\0\1\110\1\0\1\110\26\0"+
    "\3\305\1\102\1\305\102\0\1\306\11\0\2\12\1\0"+
    "\11\12\1\0\1\12\3\0\4\12\1\307\23\12\20\0"+
    "\5\12\7\0\2\12\1\0\11\12\1\0\1\12\3\0"+
    "\12\12\1\143\15\12\20\0\5\12\7\0\2\12\1\0"+
    "\11\12\1\0\1\12\3\0\10\12\1\310\17\12\20\0"+
    "\5\12\7\0\2\12\1\0\11\12\1\0\1\12\3\0"+
    "\15\12\1\311\12\12\20\0\5\12\7\0\2\12\1\0"+
    "\11\12\1\0\1\12\3\0\5\12\1\312\22\12\20\0"+
    "\5\12\7\0\2\12\1\0\11\12\1\0\1\12\3\0"+
    "\14\12\1\313\13\12\20\0\5\12\7\0\2\12\1\0"+
    "\11\12\1\0\1\12\3\0\3\12\1\143\24\12\20\0"+
    "\5\12\7\0\2\12\1\0\11\12\1\0\1\12\3\0"+
    "\2\12\1\314\25\12\20\0\5\12\7\0\2\12\1\0"+
    "\11\12\1\0\1\12\3\0\26\12\1\315\1\12\20\0"+
    "\5\12\7\0\2\12\1\0\11\12\1\0\1\12\3\0"+
    "\4\12\1\316\23\12\20\0\5\12\7\0\2\12\1\0"+
    "\11\12\1\0\1\12\3\0\14\12\1\143\13\12\20\0"+
    "\5\12\7\0\2\12\1\0\11\12\1\0\1\12\3\0"+
    "\15\12\1\317\12\12\20\0\5\12\7\0\2\12\1\0"+
    "\11\12\1\0\1\12\3\0\11\12\1\320\16\12\20\0"+
    "\5\12\7\0\2\12\1\0\11\12\1\0\1\12\3\0"+
    "\25\12\1\202\2\12\20\0\5\12\7\0\2\12\1\0"+
    "\11\12\1\0\1\12\3\0\1\321\27\12\20\0\5\12"+
    "\7\0\2\12\1\0\11\12\1\0\1\12\3\0\4\12"+
    "\1\322\23\12\20\0\5\12\7\0\2\12\1\0\11\12"+
    "\1\0\1\12\3\0\10\12\1\323\17\12\20\0\5\12"+
    "\7\0\2\12\1\0\11\12\1\0\1\12\3\0\16\12"+
    "\1\324\11\12\20\0\5\12\7\0\2\12\1\0\11\12"+
    "\1\0\1\12\3\0\7\12\1\325\20\12\20\0\5\12"+
    "\7\0\2\12\1\0\11\12\1\0\1\12\3\0\1\326"+
    "\27\12\20\0\5\12\7\0\2\12\1\0\11\12\1\0"+
    "\1\12\3\0\10\12\1\327\17\12\20\0\5\12\7\0"+
    "\2\12\1\0\11\12\1\0\1\12\3\0\1\117\27\12"+
    "\20\0\5\12\7\0\2\12\1\0\11\12\1\0\1\12"+
    "\3\0\3\12\1\160\24\12\20\0\5\12\7\0\2\77"+
    "\1\0\11\77\1\0\1\77\3\0\4\77\1\330\23\77"+
    "\20\0\5\77\12\0\2\331\1\103\1\0\5\331\1\0"+
    "\1\331\3\0\2\331\3\0\1\331\1\0\1\103\1\331"+
    "\6\0\1\331\1\0\1\331\26\0\5\331\12\0\1\332"+
    "\1\102\1\103\2\0\3\332\1\110\1\111\1\112\12\0"+
    "\1\103\1\112\6\0\1\110\1\0\1\110\26\0\3\332"+
    "\1\102\1\332\12\0\1\333\1\102\1\103\2\0\3\333"+
    "\1\110\1\111\1\112\12\0\1\103\1\112\6\0\1\110"+
    "\1\0\1\110\26\0\3\333\1\102\1\333\101\0\1\334"+
    "\12\0\2\12\1\0\11\12\1\0\1\12\3\0\1\335"+
    "\27\12\20\0\5\12\7\0\2\12\1\0\11\12\1\0"+
    "\1\12\3\0\1\316\27\12\20\0\5\12\7\0\2\12"+
    "\1\0\11\12\1\0\1\12\3\0\5\12\1\143\22\12"+
    "\20\0\5\12\7\0\2\12\1\0\11\12\1\0\1\12"+
    "\3\0\3\12\1\336\24\12\20\0\5\12\7\0\2\12"+
    "\1\0\11\12\1\0\1\12\3\0\4\12\1\337\23\12"+
    "\20\0\5\12\7\0\2\12\1\0\11\12\1\0\1\12"+
    "\3\0\15\12\1\340\12\12\20\0\5\12\7\0\2\12"+
    "\1\0\11\12\1\0\1\12\3\0\11\12\1\143\16\12"+
    "\20\0\5\12\7\0\2\12\1\0\11\12\1\0\1\12"+
    "\3\0\11\12\1\341\16\12\20\0\5\12\7\0\2\12"+
    "\1\0\11\12\1\0\1\12\3\0\17\12\1\214\10\12"+
    "\20\0\5\12\7\0\2\12\1\0\11\12\1\0\1\12"+
    "\3\0\11\12\1\342\16\12\20\0\5\12\7\0\2\12"+
    "\1\0\11\12\1\0\1\12\3\0\21\12\1\343\6\12"+
    "\20\0\5\12\7\0\2\12\1\0\11\12\1\0\1\12"+
    "\3\0\22\12\1\344\5\12\20\0\5\12\7\0\2\12"+
    "\1\0\11\12\1\0\1\12\3\0\7\12\1\260\20\12"+
    "\20\0\5\12\7\0\2\12\1\0\11\12\1\0\1\12"+
    "\3\0\7\12\1\345\20\12\20\0\5\12\7\0\2\12"+
    "\1\0\11\12\1\0\1\12\3\0\24\12\1\202\3\12"+
    "\20\0\5\12\7\0\2\12\1\0\11\12\1\0\1\12"+
    "\3\0\5\12\1\346\22\12\20\0\5\12\7\0\2\77"+
    "\1\0\11\77\1\0\1\77\3\0\21\77\1\347\6\77"+
    "\20\0\5\77\12\0\2\350\1\103\1\0\5\350\1\0"+
    "\1\350\3\0\2\350\3\0\1\350\1\0\1\103\1\350"+
    "\6\0\1\350\1\0\1\350\26\0\5\350\12\0\1\351"+
    "\1\102\1\103\2\0\3\351\1\110\1\111\1\112\12\0"+
    "\1\103\1\112\6\0\1\110\1\0\1\110\26\0\3\351"+
    "\1\102\1\351\12\0\1\352\1\102\1\103\2\0\3\352"+
    "\1\110\1\111\1\112\12\0\1\103\1\112\6\0\1\110"+
    "\1\0\1\110\26\0\3\352\1\102\1\352\103\0\1\353"+
    "\10\0\2\12\1\0\11\12\1\0\1\12\3\0\5\12"+
    "\1\260\22\12\20\0\5\12\7\0\2\12\1\0\11\12"+
    "\1\0\1\12\3\0\21\12\1\354\6\12\20\0\5\12"+
    "\7\0\2\12\1\0\11\12\1\0\1\12\3\0\6\12"+
    "\1\355\21\12\20\0\5\12\7\0\2\12\1\0\11\12"+
    "\1\0\1\12\3\0\10\12\1\356\17\12\20\0\5\12"+
    "\7\0\2\12\1\0\11\12\1\0\1\12\3\0\16\12"+
    "\1\202\11\12\20\0\5\12\7\0\2\12\1\0\11\12"+
    "\1\0\1\12\3\0\5\12\1\357\22\12\20\0\5\12"+
    "\7\0\2\12\1\0\11\12\1\0\1\12\3\0\1\360"+
    "\27\12\20\0\5\12\7\0\2\12\1\0\11\12\1\0"+
    "\1\12\3\0\10\12\1\361\17\12\20\0\5\12\7\0"+
    "\2\12\1\0\11\12\1\0\1\12\3\0\13\12\1\143"+
    "\14\12\20\0\5\12\7\0\2\12\1\0\11\12\1\0"+
    "\1\12\3\0\3\12\1\362\24\12\20\0\5\12\7\0"+
    "\2\77\1\0\11\77\1\0\1\77\3\0\1\363\27\77"+
    "\20\0\5\77\12\0\2\364\1\103\1\0\5\364\1\0"+
    "\1\364\3\0\2\364\3\0\1\364\1\0\1\103\1\364"+
    "\6\0\1\364\1\0\1\364\26\0\5\364\12\0\1\365"+
    "\1\102\1\103\2\0\3\365\1\110\1\111\1\112\12\0"+
    "\1\103\1\112\6\0\1\110\1\0\1\110\26\0\3\365"+
    "\1\102\1\365\12\0\1\366\1\102\1\103\2\0\3\366"+
    "\1\110\1\111\1\112\12\0\1\103\1\112\6\0\1\110"+
    "\1\0\1\110\26\0\3\366\1\102\1\366\17\0\1\367"+
    "\74\0\2\12\1\0\11\12\1\0\1\12\3\0\23\12"+
    "\1\143\4\12\20\0\5\12\7\0\2\12\1\0\11\12"+
    "\1\0\1\12\3\0\11\12\1\370\16\12\20\0\5\12"+
    "\7\0\2\12\1\0\11\12\1\0\1\12\3\0\11\12"+
    "\1\260\16\12\20\0\5\12\7\0\2\12\1\0\11\12"+
    "\1\0\1\12\3\0\10\12\1\371\17\12\20\0\5\12"+
    "\7\0\2\12\1\0\11\12\1\0\1\12\3\0\5\12"+
    "\1\202\22\12\20\0\5\12\7\0\2\12\1\0\11\12"+
    "\1\0\1\12\3\0\11\12\1\372\16\12\20\0\5\12"+
    "\7\0\2\12\1\0\11\12\1\0\1\12\3\0\10\12"+
    "\1\243\17\12\20\0\5\12\7\0\2\77\1\0\11\77"+
    "\1\0\1\77\3\0\5\77\1\373\22\77\20\0\5\77"+
    "\12\0\2\374\1\103\1\0\5\374\1\0\1\374\3\0"+
    "\2\374\3\0\1\374\1\0\1\103\1\374\6\0\1\374"+
    "\1\0\1\374\26\0\5\374\12\0\1\375\1\102\1\103"+
    "\2\0\3\375\1\110\1\111\1\112\12\0\1\103\1\112"+
    "\6\0\1\110\1\0\1\110\26\0\3\375\1\102\1\375"+
    "\12\0\1\376\1\102\1\103\2\0\3\376\1\110\1\111"+
    "\1\112\12\0\1\103\1\112\6\0\1\110\1\0\1\110"+
    "\26\0\3\376\1\102\1\376\104\0\1\377\7\0\2\12"+
    "\1\0\11\12\1\0\1\12\3\0\15\12\1\u0100\12\12"+
    "\20\0\5\12\7\0\2\12\1\0\11\12\1\0\1\12"+
    "\3\0\6\12\1\u0101\21\12\20\0\5\12\7\0\2\12"+
    "\1\0\11\12\1\0\1\12\3\0\3\12\1\214\24\12"+
    "\20\0\5\12\7\0\2\77\1\0\11\77\1\0\1\77"+
    "\3\0\10\77\1\u0102\17\77\20\0\5\77\12\0\2\u0103"+
    "\1\103\1\0\5\u0103\1\0\1\u0103\3\0\2\u0103\3\0"+
    "\1\u0103\1\0\1\103\1\u0103\6\0\1\u0103\1\0\1\u0103"+
    "\26\0\5\u0103\12\0\1\u0104\1\102\1\103\2\0\3\u0104"+
    "\1\110\1\111\1\112\12\0\1\103\1\112\6\0\1\110"+
    "\1\0\1\110\26\0\3\u0104\1\102\1\u0104\12\0\1\u0105"+
    "\1\102\1\103\2\0\3\u0105\1\110\1\111\1\112\12\0"+
    "\1\103\1\112\6\0\1\110\1\0\1\110\26\0\3\u0105"+
    "\1\102\1\u0105\101\0\1\u0106\12\0\2\12\1\0\11\12"+
    "\1\0\1\12\3\0\27\12\1\362\20\0\5\12\7\0"+
    "\2\12\1\0\11\12\1\0\1\12\3\0\21\12\1\143"+
    "\6\12\20\0\5\12\12\0\2\u0107\1\103\1\0\5\u0107"+
    "\1\0\1\u0107\3\0\2\u0107\3\0\1\u0107\1\0\1\103"+
    "\1\u0107\6\0\1\u0107\1\0\1\u0107\26\0\5\u0107\12\0"+
    "\1\u0108\1\102\1\103\2\0\3\u0108\1\110\1\111\1\112"+
    "\12\0\1\103\1\112\6\0\1\110\1\0\1\110\26\0"+
    "\3\u0108\1\102\1\u0108\12\0\1\u0109\1\102\1\103\2\0"+
    "\3\u0109\1\110\1\111\1\112\12\0\1\103\1\112\6\0"+
    "\1\110\1\0\1\110\26\0\3\u0109\1\102\1\u0109\103\0"+
    "\1\103\13\0\2\u010a\1\103\1\0\5\u010a\1\0\1\u010a"+
    "\3\0\2\u010a\3\0\1\u010a\1\0\1\103\1\u010a\6\0"+
    "\1\u010a\1\0\1\u010a\26\0\5\u010a\12\0\1\u010b\1\102"+
    "\1\103\2\0\3\u010b\1\110\1\111\1\112\12\0\1\103"+
    "\1\112\6\0\1\110\1\0\1\110\26\0\3\u010b\1\102"+
    "\1\u010b\12\0\1\u010c\1\102\1\103\2\0\3\u010c\1\110"+
    "\1\111\1\112\12\0\1\103\1\112\6\0\1\110\1\0"+
    "\1\110\26\0\3\u010c\1\102\1\u010c\12\0\2\u010d\1\103"+
    "\1\0\5\u010d\1\0\1\u010d\3\0\2\u010d\3\0\1\u010d"+
    "\1\0\1\103\1\u010d\6\0\1\u010d\1\0\1\u010d\26\0"+
    "\5\u010d\12\0\1\u010e\1\102\1\103\2\0\3\u010e\1\110"+
    "\1\111\1\112\12\0\1\103\1\112\6\0\1\110\1\0"+
    "\1\110\26\0\3\u010e\1\102\1\u010e\12\0\1\u010f\1\102"+
    "\1\103\2\0\3\u010f\1\110\1\111\1\112\12\0\1\103"+
    "\1\112\6\0\1\110\1\0\1\110\26\0\3\u010f\1\102"+
    "\1\u010f\12\0\2\u0110\1\103\1\0\5\u0110\1\0\1\u0110"+
    "\3\0\2\u0110\3\0\1\u0110\1\0\1\103\1\u0110\6\0"+
    "\1\u0110\1\0\1\u0110\26\0\5\u0110\12\0\1\u0111\1\102"+
    "\1\103\2\0\3\u0111\1\110\1\111\1\112\12\0\1\103"+
    "\1\112\6\0\1\110\1\0\1\110\26\0\3\u0111\1\102"+
    "\1\u0111\12\0\1\u0112\1\102\1\103\2\0\3\u0112\1\110"+
    "\1\111\1\112\12\0\1\103\1\112\6\0\1\110\1\0"+
    "\1\110\26\0\3\u0112\1\102\1\u0112\12\0\2\u0113\1\103"+
    "\1\0\5\u0113\1\0\1\u0113\3\0\2\u0113\3\0\1\u0113"+
    "\1\0\1\103\1\u0113\6\0\1\u0113\1\0\1\u0113\26\0"+
    "\5\u0113\12\0\1\u0114\1\102\1\103\2\0\3\u0114\1\110"+
    "\1\111\1\112\12\0\1\103\1\112\6\0\1\110\1\0"+
    "\1\110\26\0\3\u0114\1\102\1\u0114\12\0\1\u0115\1\102"+
    "\1\103\2\0\3\u0115\1\110\1\111\1\112\12\0\1\103"+
    "\1\112\6\0\1\110\1\0\1\110\26\0\3\u0115\1\102"+
    "\1\u0115\12\0\2\u0116\1\103\1\0\5\u0116\1\0\1\u0116"+
    "\3\0\2\u0116\3\0\1\u0116\1\0\1\103\1\u0116\6\0"+
    "\1\u0116\1\0\1\u0116\26\0\5\u0116\12\0\1\u0117\1\102"+
    "\1\103\2\0\3\u0117\1\110\1\111\1\112\12\0\1\103"+
    "\1\112\6\0\1\110\1\0\1\110\26\0\3\u0117\1\102"+
    "\1\u0117\12\0\1\u0118\1\102\1\103\2\0\3\u0118\1\110"+
    "\1\111\1\112\12\0\1\103\1\112\6\0\1\110\1\0"+
    "\1\110\26\0\3\u0118\1\102\1\u0118\12\0\2\u0119\1\103"+
    "\1\0\5\u0119\1\0\1\u0119\3\0\2\u0119\3\0\1\u0119"+
    "\1\0\1\103\1\u0119\6\0\1\u0119\1\0\1\u0119\26\0"+
    "\5\u0119\12\0\1\u011a\1\102\1\103\2\0\3\u011a\1\110"+
    "\1\111\1\112\12\0\1\103\1\112\6\0\1\110\1\0"+
    "\1\110\26\0\3\u011a\1\102\1\u011a\12\0\1\u011b\1\102"+
    "\1\103\2\0\3\u011b\1\110\1\111\1\112\12\0\1\103"+
    "\1\112\6\0\1\110\1\0\1\110\26\0\3\u011b\1\102"+
    "\1\u011b\12\0\2\u011c\1\103\1\0\5\u011c\1\0\1\u011c"+
    "\3\0\2\u011c\3\0\1\u011c\1\0\1\103\1\u011c\6\0"+
    "\1\u011c\1\0\1\u011c\26\0\5\u011c\12\0\1\u011d\1\102"+
    "\1\103\2\0\3\u011d\1\110\1\111\1\112\12\0\1\103"+
    "\1\112\6\0\1\110\1\0\1\110\26\0\3\u011d\1\102"+
    "\1\u011d\14\0\1\103\22\0\1\103\57\0\1\u011e\1\102"+
    "\1\103\2\0\3\u011e\1\110\1\111\1\112\12\0\1\103"+
    "\1\112\6\0\1\110\1\0\1\110\26\0\3\u011e\1\102"+
    "\1\u011e\12\0\1\u011f\1\102\1\103\2\0\3\u011f\1\110"+
    "\1\111\1\112\12\0\1\103\1\112\6\0\1\110\1\0"+
    "\1\110\26\0\3\u011f\1\102\1\u011f\12\0\1\u0120\1\102"+
    "\1\103\2\0\3\u0120\1\110\1\111\1\112\12\0\1\103"+
    "\1\112\6\0\1\110\1\0\1\110\26\0\3\u0120\1\102"+
    "\1\u0120\12\0\1\u0121\1\102\1\103\2\0\3\u0121\1\110"+
    "\1\111\1\112\12\0\1\103\1\112\6\0\1\110\1\0"+
    "\1\110\26\0\3\u0121\1\102\1\u0121\12\0\2\102\1\103"+
    "\2\0\3\102\1\110\1\111\1\112\12\0\1\103\1\112"+
    "\6\0\1\110\1\0\1\110\26\0\5\102\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18009];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\1\11\10\1\2\11\20\1\10\11"+
    "\2\1\1\11\5\1\2\11\2\1\1\11\3\1\1\11"+
    "\3\1\1\11\4\1\1\11\1\0\3\1\1\11\1\1"+
    "\2\0\46\1\3\11\1\1\1\11\6\1\2\0\52\1"+
    "\1\0\34\1\1\0\25\1\1\0\16\1\1\0\13\1"+
    "\1\0\7\1\1\0\6\1\2\0\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	public Token token(int type) {
		return new TokenImpl(type, yychar, yytext().length());
	}
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaTokenizer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2894) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return token(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return token(OTHER);
            }
          case 30: break;
          case 2: 
            { return token(WHITESPACE);
            }
          case 31: break;
          case 3: 
            { return token(OPERATOR);
            }
          case 32: break;
          case 4: 
            { return token(IDENTIFIER);
            }
          case 33: break;
          case 5: 
            { return token(INTEGER_LITERAL);
            }
          case 34: break;
          case 6: 
            { return token(DOT);
            }
          case 35: break;
          case 7: 
            { yybegin(STRING); return token(STRING_LITERAL);
            }
          case 36: break;
          case 8: 
            { yybegin(CHARLITERAL); return token(CHARACTER_LITERAL);
            }
          case 37: break;
          case 9: 
            { return token(LPAREN);
            }
          case 38: break;
          case 10: 
            { return token(RPAREN);
            }
          case 39: break;
          case 11: 
            { return token(LBRACE);
            }
          case 40: break;
          case 12: 
            { return token(RBRACE);
            }
          case 41: break;
          case 13: 
            { return token(LBRACK);
            }
          case 42: break;
          case 14: 
            { return token(RBRACK);
            }
          case 43: break;
          case 15: 
            { return token(SEMICOLON);
            }
          case 44: break;
          case 16: 
            { return token(COMMA);
            }
          case 45: break;
          case 17: 
            { return token(STRING_LITERAL);
            }
          case 46: break;
          case 18: 
            { yybegin(YYINITIAL);
            }
          case 47: break;
          case 19: 
            { yybegin(YYINITIAL); return token(STRING_LITERAL);
            }
          case 48: break;
          case 20: 
            { return token(CHARACTER_LITERAL);
            }
          case 49: break;
          case 21: 
            { yybegin(YYINITIAL); return token(CHARACTER_LITERAL);
            }
          case 50: break;
          case 22: 
            { return token(COMMENT_MULTI);
            }
          case 51: break;
          case 23: 
            { return token(COMMENT_EOL);
            }
          case 52: break;
          case 24: 
            { yybegin(COMMENT); return token(COMMENT_MULTI);
            }
          case 53: break;
          case 25: 
            { return token(ANNOTATION);
            }
          case 54: break;
          case 26: 
            { return token(FLOATING_POINT_LITERAL);
            }
          case 55: break;
          case 27: 
            { return token(KEYWORD);
            }
          case 56: break;
          case 28: 
            { yybegin(YYINITIAL); return token(COMMENT_MULTI);
            }
          case 57: break;
          case 29: 
            { return token(BOOLEAN_LITERAL);
            }
          case 58: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
